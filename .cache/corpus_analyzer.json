{
  "dialects": {
    "func": 5448,
    "arith": 1961,
    "test": 879,
    "memref": 188,
    "gpu": 100,
    "tosa": 1419,
    "shape": 113,
    "transform": 956,
    "scf": 871,
    "builtin": 172,
    "llvm": 377,
    "cf": 7,
    "testd": 45,
    "smt": 228,
    "math": 192,
    "spirv": 555,
    "foo": 46,
    "affine": 110,
    "tensor": 316,
    "testvar": 34,
    "complex": 127,
    "dummy": 14,
    "bufferization": 29,
    "nvvm": 19,
    "ub": 13,
    "consume": 10,
    "rocdl": 2,
    "emitc": 94,
    "omp": 57,
    "dialect": 10,
    "produce": 2,
    "xla": 34,
    "async": 19,
    "live": 6,
    "arm_sme": 8,
    "index": 38,
    "sparse_tensor": 14,
    "test_irdl_to_cpp": 3,
    "linalg": 29,
    "irdl": 37,
    "unregistered": 5,
    "some": 1,
    "unregistered_dialect": 1,
    "mpi": 25,
    "unknown": 2,
    "xevm": 3,
    "vector": 2,
    "simple": 1
  },
  "operations": {
    "func.func": 2746,
    "arith.constant": 1041,
    "test.addi": 29,
    "func.return": 2539,
    "memref.cast": 18,
    "gpu.memset": 1,
    "tosa.const": 425,
    "tosa.mul": 49,
    "tosa.negate": 28,
    "shape.const_size": 14,
    "shape.add": 4,
    "transform.named_sequence": 207,
    "transform.test_transform_op": 7,
    "transform.yield": 209,
    "test.type_producer": 9,
    "func.call": 163,
    "scf.while": 40,
    "arith.cmpi": 74,
    "arith.addi": 136,
    "scf.condition": 40,
    "scf.yield": 469,
    "tosa.add": 64,
    "test.simple": 1,
    "test.non_cast": 1,
    "builtin.unrealized_conversion_cast": 41,
    "llvm.func": 64,
    "llvm.mlir.constant": 74,
    "llvm.alloca": 38,
    "llvm.store": 10,
    "llvm.load": 36,
    "llvm.return": 74,
    "tosa.logical_not": 10,
    "cf.assert": 7,
    "test.op_with_property_predicates": 2,
    "test.same_operand_shape": 4,
    "tosa.gather": 17,
    "gpu.module": 46,
    "gpu.func": 16,
    "gpu.return": 16,
    "testd.all_of": 3,
    "smt.solver": 16,
    "smt.constant": 11,
    "smt.forall": 1,
    "smt.eq": 37,
    "smt.yield": 71,
    "smt.assert": 22,
    "smt.exists": 11,
    "smt.implies": 6,
    "smt.int.constant": 12,
    "smt.check": 11,
    "test.init": 5,
    "scf.for": 186,
    "test.op": 18,
    "test.consume": 8,
    "test.complex_f64": 1,
    "math.fpowi": 12,
    "tosa.intdiv": 10,
    "scf.if": 132,
    "tosa.rfft2d": 12,
    "spirv.func": 87,
    "spirv.Return": 22,
    "tosa.rescale": 43,
    "foo.return": 10,
    "transform.test_add_test_extension": 6,
    "transform.test_check_if_test_extension_present": 6,
    "transform.test_remap_operand_to_self": 5,
    "tosa.logical_right_shift": 5,
    "test.dynamic_one_operand_two_results": 2,
    "affine.min": 43,
    "arith.index_cast": 20,
    "tosa.select": 15,
    "spirv.CL.fma": 1,
    "test.test1": 6,
    "test.test2": 6,
    "tosa.fft2d": 13,
    "tensor.dim": 61,
    "test.reflect_bounds": 12,
    "testd.any": 12,
    "testvar.var_and_opt_operand": 2,
    "tosa.reduce_sum": 30,
    "tosa.reduce_max": 22,
    "tosa.reduce_min": 18,
    "tosa.reduce_product": 15,
    "math.rsqrt": 12,
    "test.op_with_region": 2,
    "test.op_1": 2,
    "test.split_block_here": 1,
    "test.op_2": 2,
    "test.op_3": 2,
    "test.single_no_terminator_op": 2,
    "test.variadic_no_terminator_op": 1,
    "test.single_no_terminator_custom_asm_op": 1,
    "testd.eq": 2,
    "transform.structured.match": 132,
    "transform.structured.transpose_matmul": 2,
    "transform.apply_cse": 2,
    "transform.apply_patterns": 20,
    "transform.apply_patterns.canonicalization": 4,
    "builtin.module": 131,
    "transform.loop.forall_to_for": 2,
    "test.broadcastable": 14,
    "spirv.module": 34,
    "spirv.SpecConstant": 11,
    "spirv.mlir.referenceof": 7,
    "spirv.ReturnValue": 104,
    "spirv.FDiv": 1,
    "foo.op": 5,
    "memref.load": 28,
    "memref.store": 24,
    "transform.get_parent_op": 17,
    "transform.loop.unroll_and_jam": 8,
    "spirv.GroupNonUniformLogicalXor": 2,
    "test.container": 7,
    "test.foo": 28,
    "transform.apply_patterns.transform.test_patterns": 8,
    "transform.annotate": 8,
    "complex.neq": 3,
    "tosa.abs": 18,
    "tensor.extract": 71,
    "dummy.some_op": 6,
    "dummy.another_op": 6,
    "tensor.insert": 36,
    "tosa.sub": 26,
    "shape.div": 6,
    "spirv.SLessThan": 4,
    "spirv.Select": 24,
    "tosa.maximum": 14,
    "test.cse_of_single_block_op": 12,
    "test.region_yield": 19,
    "tensor.collapse_shape": 24,
    "bufferization.to_tensor": 4,
    "tosa.table": 14,
    "test.pretty_printed_region": 3,
    "test.special.op": 2,
    "test.return": 33,
    "tosa.concat": 38,
    "math.cos": 7,
    "arith.mulf": 25,
    "arith.negf": 11,
    "test.one_region_op": 7,
    "test.hoist_me": 1,
    "test.valid": 2,
    "complex.tanh": 6,
    "tosa.scatter": 14,
    "complex.create": 11,
    "complex.constant": 5,
    "complex.re": 3,
    "complex.im": 3,
    "complex.add": 5,
    "complex.sub": 5,
    "complex.div": 10,
    "complex.mul": 6,
    "complex.abs": 9,
    "transform.print": 5,
    "transform.foreach_match": 12,
    "test.print_me": 1,
    "nvvm.read.ptx.sreg.tid.x": 1,
    "nvvm.read.ptx.sreg.tid.y": 1,
    "nvvm.read.ptx.sreg.tid.z": 1,
    "gpu.printf": 7,
    "testd.anyof": 3,
    "spirv.GroupNonUniformUMax": 2,
    "test.block_arg_num_mismatch": 2,
    "test.some_branching_op": 8,
    "test.SingleBlockImplicitTerminator": 2,
    "test.type_consumer": 6,
    "test.finish": 9,
    "tensor.generate": 3,
    "tensor.yield": 3,
    "arith.divf": 9,
    "arith.remf": 8,
    "arith.select": 18,
    "arith.trunci": 8,
    "complex.sign": 3,
    "tensor.concat": 18,
    "test.dummy_op": 6,
    "tensor.bitcast": 4,
    "arith.addf": 89,
    "memref.collapse_shape": 13,
    "tosa.bitwise_xor": 5,
    "testd.attrs": 4,
    "test.two_region_op": 5,
    "shape.const_witness": 6,
    "shape.assuming": 7,
    "test.source": 16,
    "shape.assuming_yield": 7,
    "test.sink": 8,
    "test.invalid": 10,
    "tosa.matmul": 20,
    "arith.subf": 9,
    "test.recursive_rewrite": 1,
    "transform.apply_patterns.memref.extract_address_computations": 5,
    "transform.debug.emit_remark_at": 45,
    "arith.fptosi": 11,
    "llvm.intr.memset": 9,
    "spirv.GroupNonUniformBitwiseXor": 2,
    "tosa.bitwise_or": 5,
    "spirv.CL.sinh": 1,
    "test.compare": 25,
    "test.graph_loop": 5,
    "tosa.while_loop": 15,
    "tosa.greater_equal": 27,
    "tosa.yield": 72,
    "test.isolated_graph_region": 1,
    "arith.andi": 24,
    "arith.ori": 4,
    "arith.xori": 19,
    "transform.apply_patterns.tensor.decompose_concat": 1,
    "tosa.arithmetic_right_shift": 6,
    "tosa.equal": 17,
    "affine.max": 32,
    "transform.loop.peel": 3,
    "tosa.cond_if": 21,
    "tosa.argmax": 22,
    "tosa.reduce_all": 14,
    "test.val": 4,
    "test.use": 9,
    "tensor.empty": 32,
    "complex.cos": 5,
    "transform.apply_licm": 1,
    "testd.constraint_vars": 3,
    "test.illegal_op_a": 4,
    "ub.poison": 13,
    "test.match_anchor_1": 6,
    "test.match_anchor_2": 6,
    "test.region_terminator": 6,
    "transform.test_produce_value_handle_to_result": 7,
    "transform.test_consume_operand": 34,
    "tosa.greater": 14,
    "spirv.FunctionCall": 6,
    "arith.subi": 13,
    "arith.muli": 45,
    "test.one_region_with_operands_op": 1,
    "foo.yield": 9,
    "spirv.EXT.AtomicFAdd": 1,
    "spirv.GroupNonUniformAllEqual": 1,
    "math.sin": 6,
    "math.tan": 5,
    "math.exp": 12,
    "spirv.Kill": 2,
    "tosa.reciprocal": 21,
    "tosa.bitwise_not": 5,
    "transform.test_produce_self_handle_or_forward_operand": 9,
    "transform.test_re_enter_region": 3,
    "complex.pow": 5,
    "complex.sqrt": 6,
    "complex.sin": 5,
    "complex.conj": 3,
    "complex.angle": 4,
    "complex.log": 5,
    "complex.tan": 5,
    "transform.test_produce_value_handle_to_argument_of_parent_block": 5,
    "test.drop_region_op": 2,
    "test.illegal_op_f": 5,
    "test.replace_non_root": 1,
    "test.complex_f64_tensor": 1,
    "arith.extsi": 15,
    "arith.fptoui": 9,
    "tosa.log": 15,
    "affine.apply": 24,
    "dummy.some_use": 1,
    "transform.tensor.make_loop_independent": 1,
    "math.cttz": 1,
    "test.move_before_parent_op": 1,
    "test.dummy_terminator": 1,
    "tosa.tanh": 6,
    "tosa.cast": 38,
    "tosa.minimum": 11,
    "arith.cmpf": 95,
    "shape.cstr_broadcastable": 8,
    "shape.assuming_all": 7,
    "consume.witness": 10,
    "transform.test_produce_null_param": 1,
    "test.operands_and_result_have_same_rank": 4,
    "test.with_bounds": 24,
    "rocdl.permlanex16": 1,
    "tosa.clamp": 40,
    "complex.neg": 2,
    "test.illegal_op_with_region_anchor": 1,
    "emitc.add": 2,
    "tensor.cast": 39,
    "tensor.reshape": 9,
    "math.ceil": 8,
    "test.op_with_result_shape_interface": 1,
    "test.ranked_tensor_op": 3,
    "test.get_some_value": 8,
    "tosa.ceil": 6,
    "test.i8_attr": 1,
    "spirv.EmitVertex": 1,
    "spirv.EndPrimitive": 1,
    "test.firstCodeTrue": 7,
    "test.secondCodeTrue": 7,
    "llvm.or": 1,
    "spirv.GroupNonUniformElect": 1,
    "arith.floordivsi": 11,
    "test.operand0_and_result_have_same_element_count": 3,
    "math.powf": 15,
    "testvar.single_result": 3,
    "emitc.call_opaque": 15,
    "omp.critical.declare": 1,
    "omp.critical": 2,
    "omp.terminator": 18,
    "test.conversion_call_op": 1,
    "tosa.identity": 8,
    "test.direct_replacement": 4,
    "test.legal_op": 4,
    "math.atan2": 7,
    "dialect.op1": 1,
    "dialect.op2": 1,
    "dialect.op3": 1,
    "dialect.innerop1": 1,
    "math.ctpop": 1,
    "math.exp2": 7,
    "math.sqrt": 6,
    "bufferization.to_buffer": 8,
    "tensor.splat": 6,
    "test.secondCodeFalse": 3,
    "tosa.reduce_any": 11,
    "produce.redundant": 1,
    "produce.meaningful": 1,
    "memref.dealloc": 18,
    "test.symbol": 7,
    "bufferization.materialize_in_destination": 2,
    "spirv.GroupIAdd": 4,
    "spirv.GroupFAdd": 4,
    "spirv.GroupFMin": 4,
    "spirv.GroupUMin": 4,
    "spirv.GroupSMin": 4,
    "spirv.GroupFMax": 4,
    "spirv.GroupUMax": 4,
    "spirv.GroupSMax": 5,
    "tosa.logical_xor": 5,
    "transform.get_consumers_of_result": 3,
    "xla.add": 34,
    "testd.named_attr_base": 3,
    "test.nested_tuple_32_bit": 3,
    "test.illegal_op_g": 2,
    "shape.min": 1,
    "arith.divsi": 31,
    "tosa.clz": 6,
    "tosa.reverse": 17,
    "test.region": 5,
    "async.runtime.add_ref": 7,
    "async.runtime.drop_ref": 7,
    "async.runtime.await": 5,
    "spirv.GL.SClamp": 2,
    "transform.test_produce_null_payload": 1,
    "spirv.CL.atan2": 1,
    "shape.cstr_require": 2,
    "memref.copy": 4,
    "live.user": 6,
    "bufferization.clone": 15,
    "complex.expm1": 2,
    "tosa.sigmoid": 8,
    "math.round": 4,
    "test.any_attr_of_i32_str": 3,
    "math.tanh": 6,
    "shape.mul": 5,
    "tosa.custom": 7,
    "spirv.ConvertSToF": 3,
    "spirv.SDiv": 1,
    "test.versionedA": 1,
    "spirv.Constant": 19,
    "spirv.UDiv": 6,
    "spirv.INTEL.ConvertBF16ToF": 1,
    "arith.truncf": 12,
    "test.other_op": 2,
    "emitc.literal": 9,
    "emitc.variable": 2,
    "emitc.for": 18,
    "emitc.assign": 2,
    "emitc.yield": 20,
    "arith.extui": 16,
    "shape.cstr_eq": 4,
    "shape.broadcast": 3,
    "nvvm.cp.async.bulk.commit.group": 1,
    "nvvm.tcgen05.mma_smem_desc": 1,
    "spirv.FAdd": 5,
    "spirv.FMul": 2,
    "math.absf": 10,
    "test.verifiers": 4,
    "test.operands_have_same_rank": 2,
    "test.operand0_and_result_have_same_rank": 2,
    "testd.dynparams": 4,
    "test.inline_blocks_into_parent": 1,
    "arith.bitcast": 14,
    "memref.dim": 28,
    "shape.index_to_size": 5,
    "shape.size_to_index": 7,
    "spirv.GroupNonUniformFMax": 2,
    "transform.apply_conversion_patterns": 3,
    "transform.apply_conversion_patterns.transform.test_conversion_patterns": 3,
    "transform.apply_conversion_patterns.transform.test_type_converter": 2,
    "test.symbol_scope": 3,
    "arith.uitofp": 13,
    "test.op_with_memread": 12,
    "testvar.single_operand": 3,
    "test.graph_region": 4,
    "tosa.exp": 9,
    "memref.atomic_rmw": 17,
    "spirv.INTEL.ConvertFToBF16": 1,
    "transform.split_handle": 4,
    "transform.num_associations": 8,
    "transform.debug.emit_param_as_remark": 16,
    "arith.ceildivsi": 21,
    "testvar.var_operand": 7,
    "test.value_with_bounds": 18,
    "transform.affine.simplify_min_max_affine_ops": 1,
    "test.some_use": 5,
    "test.erase_op": 5,
    "test.foo_a": 1,
    "test.foo_b": 1,
    "test.constant": 3,
    "test.manual_cpp_op_with_fold": 1,
    "foo.print": 1,
    "test.op_with_regions": 3,
    "test.firstCodeFalse": 3,
    "arm_sme.streaming_vl": 8,
    "index.constant": 5,
    "index.castu": 5,
    "tosa.erf": 5,
    "test.op_with_memwrite": 2,
    "scf.execute_region": 4,
    "math.asin": 4,
    "math.acos": 4,
    "math.atan": 7,
    "sparse_tensor.push_back": 4,
    "test_irdl_to_cpp.bar": 2,
    "test.type_changer": 3,
    "emitc.conditional": 1,
    "spirv.GroupBroadcast": 1,
    "test.op_with_bit_enum": 2,
    "transform.bufferization.one_shot_bufferize": 1,
    "test.match_anchor": 3,
    "spirv.UMod": 1,
    "llvm.mlir.global": 9,
    "llvm.mlir.alias": 6,
    "llvm.mlir.addressof": 8,
    "spirv.AtomicExchange": 1,
    "spirv.EntryPoint": 7,
    "spirv.ExecutionMode": 7,
    "llvm.shl": 2,
    "arith.minsi": 10,
    "arith.maxsi": 13,
    "arith.minui": 10,
    "arith.maxui": 10,
    "arith.minimumf": 6,
    "arith.maximumf": 6,
    "arith.minnumf": 8,
    "arith.maxnumf": 8,
    "test.outerop": 1,
    "test.innerop": 1,
    "test.custom_result_name": 3,
    "spirv.CL.asin": 1,
    "test.another_type_producer": 2,
    "test.top_level_op": 2,
    "test.bar": 3,
    "transform.select": 2,
    "transform.match.operation_name": 8,
    "test.something_else": 1,
    "memref.memory_space_cast": 4,
    "nvvm.elect.sync": 3,
    "test.versionedC": 2,
    "spirv.SMod": 1,
    "arith.shli": 10,
    "llvm.comdat": 3,
    "llvm.comdat_selector": 7,
    "linalg.softmax": 4,
    "test.some_op_with_region": 2,
    "test.possible_terminator": 2,
    "arith.divui": 18,
    "arith.ceildivui": 15,
    "tosa.pow": 9,
    "spirv.mlir.selection": 2,
    "math.ctlz": 8,
    "tosa.logical_and": 7,
    "math.expm1": 6,
    "transform.test_consume_operand_each": 2,
    "test.fold_to_call_op": 1,
    "spirv.SConvert": 1,
    "test.use2": 1,
    "test.yield2": 1,
    "test.yield": 1,
    "test.op1": 4,
    "test.op2": 2,
    "test.op3": 2,
    "test.inop": 3,
    "test.inop1": 3,
    "spirv.FSub": 1,
    "transform.test_copy_payload": 5,
    "transform.test_consume_operand_of_op_kind_or_fail": 6,
    "transform.test_succeed_if_operand_of_op_kind": 2,
    "test.testtest": 1,
    "test.some_op": 1,
    "tosa.sin": 5,
    "transform.test.move_operand_deps": 7,
    "llvm.bitcast": 2,
    "test.op_crash_long": 1,
    "llvm.icmp": 2,
    "test.block_arg_replace": 1,
    "shape.get_extent": 1,
    "spirv.CL.atan": 1,
    "spirv.ULessThan": 4,
    "complex.rsqrt": 3,
    "test.attr_with_trait": 1,
    "spirv.GroupNonUniformSMin": 2,
    "linalg.map": 11,
    "linalg.yield": 11,
    "transform.structured.flatten_elementwise": 2,
    "spirv.SpecConstantOperation": 2,
    "spirv.ISub": 3,
    "spirv.mlir.yield": 2,
    "shape.shape_of": 8,
    "irdl.dialect": 6,
    "irdl.type": 6,
    "irdl.any": 5,
    "irdl.parametric": 3,
    "irdl.is": 3,
    "irdl.any_of": 3,
    "irdl.parameters": 5,
    "spirv.GL.UClamp": 2,
    "test.replace_with_new_op": 1,
    "test.dummy_user": 2,
    "tosa.logical_left_shift": 7,
    "memref.assume_alignment": 4,
    "spirv.Variable": 9,
    "spirv.Load": 1,
    "tensor.from_elements": 6,
    "omp.new_cli": 13,
    "omp.canonical_loop": 15,
    "omp.unroll_heuristic": 4,
    "spirv.IMul": 1,
    "memref.reshape": 3,
    "test.int_types": 3,
    "spirv.AtomicCompareExchangeWeak": 1,
    "test.string_attr_pretty_name": 1,
    "math.absi": 2,
    "tosa.apply_scale": 4,
    "tosa.rsqrt": 7,
    "memref.generic_atomic_rmw": 2,
    "memref.atomic_yield": 2,
    "memref.realloc": 3,
    "test.noop": 1,
    "test.no_result": 3,
    "test.unused_result": 1,
    "test.one_result": 1,
    "test.many_results": 2,
    "tosa.logical_or": 5,
    "testvar.var_result": 7,
    "shape.rank": 3,
    "gpu.warp_execute_on_lane_0": 2,
    "arith.sitofp": 7,
    "gpu.yield": 2,
    "test.always_speculatable_op": 1,
    "test.never_speculatable_op": 2,
    "test.conditionally_speculatable_op": 2,
    "test.recursively_speculatable_op": 2,
    "testd.dyn_type_base": 4,
    "testd.dyn_attr_base": 3,
    "transform.test_reverse_payload_ops": 1,
    "transform.tune.knob": 9,
    "affine.parallel": 3,
    "affine.load": 5,
    "affine.yield": 3,
    "tosa.bitwise_and": 6,
    "foo.possibly_unknown_symbol_table": 3,
    "spirv.mlir.loop": 2,
    "test.some_user": 1,
    "spirv.BitCount": 1,
    "testvar.opt_result": 5,
    "test.positive_int_attr": 1,
    "memref.alloca_scope": 4,
    "memref.alloca_scope.return": 4,
    "spirv.FRem": 1,
    "unregistered.attributes": 1,
    "spirv.INTEL.SubgroupBlockWrite": 1,
    "unregistered.foo": 1,
    "unregistered.bar": 1,
    "unregistered.empty_dict": 1,
    "unregistered.complex": 1,
    "math.log1p": 5,
    "test.increment": 2,
    "foo.unknown_op": 2,
    "llvm.zext": 3,
    "spirv.GroupNonUniformFMin": 3,
    "transform.structured.replace": 2,
    "arith.remui": 6,
    "arith.remsi": 7,
    "spirv.InBoundsPtrAccessChain": 1,
    "memref.view": 2,
    "spirv.CL.acosh": 1,
    "test.dataflow_match": 2,
    "test.producer": 4,
    "test.consumer": 8,
    "test.result_type_with_trait": 2,
    "transform.verify": 2,
    "test.condition": 5,
    "spirv.AtomicCompareExchange": 1,
    "transform.loop.outline": 2,
    "spirv.CL.acos": 1,
    "llvm.mlir.zero": 3,
    "testd.region_and_operand": 2,
    "llvm.unreachable": 3,
    "linalg.winograd_input_transform": 1,
    "nvvm.fence.mbarrier.init": 1,
    "spirv.IAdd": 2,
    "math.ipowi": 3,
    "complex.exp": 3,
    "test.float_elements_attr": 1,
    "emitc.file": 2,
    "emitc.func": 2,
    "emitc.return": 2,
    "transform.test_remove_test_extension": 2,
    "emitc.bitwise_and": 1,
    "emitc.bitwise_left_shift": 1,
    "emitc.bitwise_not": 1,
    "emitc.bitwise_or": 1,
    "emitc.bitwise_right_shift": 1,
    "emitc.bitwise_xor": 1,
    "test.op_in_place_self_fold": 1,
    "llvm.fdiv": 1,
    "gpu.set_default_device": 1,
    "spirv.FOrdLessThanEqual": 4,
    "test.cast": 5,
    "llvm.add": 6,
    "llvm.mul": 1,
    "test.op_involution_trait_no_operation_fold": 6,
    "test.op_involution_trait_failing_operation_fold": 2,
    "test.op_involution_trait_succesful_operation_fold": 2,
    "test.op_idempotent_trait": 6,
    "test.op_idempotent_trait_binary": 1,
    "test.emit_error": 1,
    "test.do_not_emit_error": 1,
    "llvm.intr.memset.inline": 7,
    "spirv.SLessThanEqual": 4,
    "transform.include": 11,
    "math.log": 5,
    "complex.eq": 3,
    "shape.any": 1,
    "test.loop_block": 1,
    "test.loop_block_term": 1,
    "math.log2": 3,
    "spirv.PtrAccessChain": 1,
    "math.isnan": 1,
    "test.concat": 1,
    "transform.test_produce_param": 2,
    "test.op_with_region_fold": 2,
    "foo.op_with_region_terminator": 2,
    "smt.array.broadcast": 2,
    "smt.array.select": 2,
    "smt.array.store": 2,
    "spirv.FConvert": 2,
    "spirv.GroupNonUniformAny": 1,
    "spirv.ULessThanEqual": 4,
    "foo.region": 3,
    "irdl.base": 1,
    "math.copysign": 2,
    "foo.test": 2,
    "shape.from_extents": 3,
    "spirv.GroupNonUniformUMin": 2,
    "test.i64_enum_attr": 2,
    "tosa.floor": 7,
    "test.dynamic_custom_parser_printer": 1,
    "emitc.unary_minus": 1,
    "emitc.unary_plus": 1,
    "test.default_value_print": 2,
    "transform.apply_registered_pass": 10,
    "test.unsupported_block_arg_type": 1,
    "test.string_attr_with_type": 1,
    "foo.shared_compute": 2,
    "foo.evaluate_condition": 2,
    "foo.payload": 2,
    "test.mixed_normal_variadic_result": 1,
    "arith.shrui": 8,
    "spirv.ConvertUToF": 3,
    "transform.test_produce_param_with_number_of_test_ops": 9,
    "transform.param.constant": 11,
    "transform.match.param.cmpi": 6,
    "test.something": 1,
    "math.roundeven": 4,
    "test.qux": 1,
    "test.parent1": 1,
    "test.child_with_parent_one_of": 2,
    "sparse_tensor.unary": 2,
    "sparse_tensor.yield": 5,
    "emitc.constant": 4,
    "spirv.ConvertFToU": 3,
    "test.dummy_op_lvl_1": 1,
    "test.dummy_op_lvl_2": 1,
    "test.drop_operands_and_replace_with_valid": 1,
    "test.parent": 1,
    "test.data_layout_query": 3,
    "spirv.FOrdLessThan": 4,
    "test.op_with_region_pattern": 1,
    "test.op_with_region_terminator": 1,
    "tosa.cos": 6,
    "test.op_crash": 2,
    "spirv.AtomicIAdd": 1,
    "spirv.AtomicIDecrement": 1,
    "spirv.AtomicIIncrement": 1,
    "spirv.AtomicISub": 1,
    "spirv.AtomicOr": 1,
    "spirv.AtomicSMax": 1,
    "spirv.AtomicSMin": 1,
    "spirv.AtomicUMax": 1,
    "spirv.AtomicUMin": 1,
    "spirv.AtomicXor": 1,
    "test.wrapping_region": 1,
    "some.op": 1,
    "test.signature_conversion_no_converter": 2,
    "test.replace_with_legal_op": 1,
    "arith.extf": 5,
    "shape.dim": 1,
    "transform.cast": 2,
    "test.name": 1,
    "transform.get_defining_op": 1,
    "sparse_tensor.select": 1,
    "test.one_variadic_out_one_variadic_in1": 2,
    "test.remapped_value_region": 1,
    "test.polyfor": 2,
    "testvar.opt_operand": 5,
    "math.sinh": 1,
    "math.cosh": 1,
    "spirv.GL.FClamp": 1,
    "spirv.GroupNonUniformBitwiseAnd": 2,
    "spirv.UConvert": 1,
    "test.top_level_name_mismatch": 1,
    "test.top_level_name_mismatch2": 1,
    "transform.test_produce_value_handle_to_self_operand": 2,
    "transform.merge_handles": 2,
    "transform.foreach": 3,
    "spirv.EXT.EmitMeshTasks": 2,
    "arith.shrsi": 8,
    "test.illegal_op_b": 1,
    "test.illegal_op_c": 2,
    "test.illegal_op_d": 1,
    "test.illegal_op_e": 1,
    "transform.test_produce_empty_payload": 1,
    "spirv.MemoryBarrier": 1,
    "llvm.mlir.global_ctors": 2,
    "llvm.mlir.global_dtors": 2,
    "test.some_returning_op": 4,
    "test.some_other_returning_op": 1,
    "gpu.barrier": 4,
    "test.val1": 1,
    "transform.scf.take_assumed_branch": 1,
    "transform.loop.unroll": 2,
    "gpu.memcpy": 1,
    "test.create_block": 1,
    "unregistered_dialect.op": 1,
    "test.format_maybe_empty_type": 2,
    "spirv.KHR.GroupFMul": 1,
    "memref.prefetch": 3,
    "memref.rank": 5,
    "linalg.winograd_output_transform": 1,
    "complex.log1p": 3,
    "complex.atan2": 3,
    "complex.bitcast": 1,
    "test.multi_tensor_rank_of": 6,
    "test.test": 7,
    "spirv.GroupNonUniformRotateKHR": 2,
    "irdl.c_pred": 1,
    "mpi.init": 1,
    "mpi.comm_world": 1,
    "mpi.comm_rank": 2,
    "mpi.comm_size": 2,
    "mpi.comm_split": 2,
    "mpi.send": 2,
    "mpi.recv": 2,
    "mpi.isend": 2,
    "mpi.irecv": 2,
    "mpi.wait": 2,
    "mpi.barrier": 2,
    "mpi.allreduce": 2,
    "mpi.finalize": 1,
    "mpi.retval_check": 1,
    "mpi.error_class": 1,
    "test.func": 1,
    "unknown.return": 2,
    "transform.collect_matching": 3,
    "spirv.ConvertFToS": 3,
    "foo.result_op": 1,
    "dummy.use": 1,
    "memref.extract_aligned_pointer_as_index": 2,
    "omp.master": 1,
    "test.payload": 1,
    "spirv.Store": 3,
    "test.run": 1,
    "test.terminator": 1,
    "llvm.addrspacecast": 2,
    "gpu.subgroup_id": 1,
    "gpu.lane_id": 1,
    "gpu.num_subgroups": 1,
    "gpu.subgroup_size": 1,
    "shape.is_broadcastable": 2,
    "arith.index_castui": 5,
    "testd.named_type_base": 2,
    "test.multiple_1_to_n_replacement": 1,
    "transform.loop.promote_if_one_iteration": 1,
    "spirv.CopyMemory": 4,
    "irdl.operation": 2,
    "irdl.regions": 1,
    "smt.declare_fun": 3,
    "test.top_level_op_attr_mismatch": 2,
    "spirv.SNegate": 1,
    "nvvm.convert.float.to.tf32": 10,
    "xevm.prefetch": 1,
    "test.isolated_region": 2,
    "test.isolated_regions": 1,
    "test.unknown_op": 5,
    "spirv.EXT.SetMeshOutputs": 1,
    "sparse_tensor.has_runtime_library": 1,
    "llvm.intr.memcpy": 2,
    "foo.has_region": 1,
    "spirv.GroupNonUniformAll": 1,
    "math.fma": 1,
    "tensor.rank": 4,
    "test.origTrue": 1,
    "test.origFalse": 1,
    "test.region_builder": 2,
    "spirv.FNegate": 1,
    "test.create_illegal_block": 1,
    "spirv.ImageQuerySize": 1,
    "test.test_effects_result": 1,
    "test.operand_num_mismatch": 2,
    "math.floor": 5,
    "test.nd_tensor_of": 1,
    "irdl.attributes": 1,
    "math.erf": 3,
    "vector.vscale": 2,
    "transform.dlti.query": 1,
    "test.munge_tensor": 3,
    "spirv.SRem": 1,
    "test.signature_conversion_undo": 1,
    "index.sub": 2,
    "test.arg0": 1,
    "test.arg1": 1,
    "transform.apply_dce": 1,
    "spirv.CL.tan": 1,
    "transform.test_add_to_param": 3,
    "test.op_a": 4,
    "spirv.GL.Ldexp": 1,
    "spirv.KHR.AssumeTrue": 1,
    "test.op_with_result_shape_per_dim_interface": 1,
    "spirv.GL.Fma": 1,
    "dialect.memref_producer": 5,
    "xevm.blockprefetch2d": 1,
    "spirv.FMod": 1,
    "transform.structured.split": 1,
    "test.op_with_shaped_type_infer_type_if": 2,
    "test.i32_enum_attr": 4,
    "index.add": 3,
    "index.mul": 1,
    "index.divs": 1,
    "index.divu": 1,
    "index.rems": 1,
    "index.remu": 1,
    "index.maxs": 1,
    "index.maxu": 1,
    "index.mins": 1,
    "index.minu": 1,
    "index.shl": 1,
    "index.shrs": 1,
    "index.shru": 1,
    "index.or": 1,
    "index.xor": 1,
    "index.bool.constant": 1,
    "index.ceildivs": 1,
    "index.ceildivu": 1,
    "index.floordivs": 1,
    "index.casts": 4,
    "index.sizeof": 1,
    "test.blackhole_producer": 1,
    "test.blackhole": 1,
    "spirv.GroupNonUniformSMax": 3,
    "spirv.ShiftLeftLogical": 1,
    "omp.atomic.update": 1,
    "omp.yield": 1,
    "test.using_int_property_with_worse_bytecode": 1,
    "test.in_range_attrs": 1,
    "spirv.GroupNonUniformLogicalAnd": 2,
    "emitc.if": 2,
    "emitc.include": 1,
    "emitc.verbatim": 1,
    "testvar.var_and_opt_result": 2,
    "test.dataflow_mismatch": 2,
    "transform.alternatives": 1,
    "shape.num_elements": 2,
    "spirv.CL.printf": 1,
    "test.dummy_tensor_op": 2,
    "test.operand_rank_equals_result_size": 2,
    "shape.meet": 1,
    "shape.with_shape": 1,
    "test.type_array_attr": 1,
    "spirv.CL.mix": 1,
    "transform.bufferization.empty_tensor_to_alloc_tensor": 1,
    "test.operands_have_same_type": 1,
    "test.operand0_and_result_have_same_type": 1,
    "xevm.memfence": 1,
    "simple.terminator": 1,
    "spirv.Bitcast": 2,
    "test.elementwise_mappable": 1,
    "test.create_tensor_op": 1,
    "test_irdl_to_cpp.beef": 1,
    "test.value0": 2,
    "test.value1": 2,
    "test.value2": 2,
    "test.value3": 2,
    "test.value0_2": 1,
    "test.value1_2": 1,
    "spirv.INTEL.SubgroupBlockRead": 1,
    "test.insert_same_op": 1,
    "test.block_type_mismatch": 2,
    "spirv.GroupNonUniformBitwiseOr": 2,
    "test.op_commutative2": 2,
    "test.same_operand_and_result_shape": 5,
    "test.detached_signature_conversion": 1,
    "linalg.winograd_filter_transform": 1,
    "transform.loop.pipeline": 1,
    "test.get_some_value1": 1,
    "test.get_some_value2": 1,
    "test.get_some_value3": 1,
    "test.get_some_value4": 1,
    "spirv.GroupNonUniformLogicalOr": 2,
    "test.operands_have_same_element_type": 3,
    "transform.get_producer_of_operand": 2,
    "test.dynamic_generic": 2,
    "smt.int2bv": 2,
    "spirv.KHR.GroupIMul": 1,
    "spirv.GroupNonUniformBroadcast": 1,
    "test.op_commutative": 3,
    "test.op_large_commutative": 1,
    "smt.int.add": 2,
    "smt.int.mul": 2,
    "smt.int.sub": 2,
    "smt.int.div": 2,
    "smt.int.mod": 2,
    "smt.int.abs": 1,
    "smt.int.cmp": 8,
    "test.operand0_and_result_have_same_element_type": 3,
    "test.tuple_32_bit": 2,
    "transform.loop.hoist_loop_invariant_subsets": 1,
    "spirv.CL.cosh": 1,
    "test.same_operand_and_result_type": 5,
    "test.same_operand_result_type": 1,
    "shape.function_library": 1,
    "shape.func": 1,
    "shape.return": 1,
    "test.multi_slot_alloca": 1,
    "math.log10": 3,
    "math.isfinite": 1,
    "transform.test_emit_remark_and_erase_operand": 1,
    "spirv.BitReverse": 1,
    "transform.test_produce_null_value": 1,
    "test.annotate_me": 3,
    "spirv.IEqual": 1,
    "transform.apply_patterns.tensor.fold_tensor_empty": 1,
    "transform.gpu.map_forall_to_blocks": 1,
    "spirv.CL.asinh": 1,
    "dialect.op": 1,
    "omp.threadprivate": 1,
    "spirv.GroupNonUniformIAdd": 1,
    "spirv.GroupNonUniformFAdd": 1,
    "spirv.GroupNonUniformIMul": 1,
    "spirv.GroupNonUniformFMul": 1,
    "test.non.special.op": 1,
    "test.derived_type_attr": 3,
    "test.a": 1,
    "test.b": 1,
    "test.i32ElementsAttr": 1,
    "test.ranked_int_elements_attr": 1,
    "test.string_attr_with_mixed_type": 2,
    "math.cbrt": 3,
    "test.ssacfg_region": 1,
    "transform.apply_patterns.vector.sink_ops": 1,
    "transform.apply_patterns.vector.sink_mem_ops": 1,
    "test.get_two_results": 1,
    "test.get_three_results": 1,
    "transform.test_produce_invalid_ir": 1,
    "test.read_buffer": 1,
    "sparse_tensor.reduce": 1,
    "spirv.Not": 1,
    "test.non_negative_int_attr": 2,
    "transform.structured.convert_to_loops": 1,
    "test.another_dummy_op": 1,
    "test.rewrite": 2,
    "math.trunc": 1,
    "spirv.AtomicAnd": 1,
    "spirv.Image": 1,
    "spirv.PtrCastToGeneric": 1,
    "spirv.CL.atanh": 1,
    "shape.max": 1,
    "emitc.logical_and": 1,
    "emitc.logical_not": 1,
    "emitc.logical_or": 1,
    "foo.unknown_region": 1,
    "test.operand_type_mismatch": 2,
    "rocdl.readlane": 1,
    "test.mixed_normal_variadic_operand": 1
  },
  "type_patterns": {
    "i32i32": 167,
    "i32": 878,
    "10xf32f32": 1,
    "10xf32": 12,
    "f32": 1294,
    "shapesize": 11,
    "transformany_op": 393,
    "testtest_typei32": 1,
    "none": 707,
    "1x1x1x1x13x21x3xf321x1x1x1x13x21x3xf321x1x1x1x13x21x3xf32": 2,
    "1x1x1x1x13x21x3xf32": 33,
    "i1": 232,
    "llvmfunci32f32": 11,
    "i32f32": 18,
    "1x21x3xi11x21x3xi1": 4,
    "1x21x3xi1": 4,
    "10x10xf321xf3210x10xi32*xf32": 1,
    "10x10xf32": 3,
    "1xf32": 41,
    "10x10xi32": 1,
    "*xf32": 47,
    "13x21x3xbf1613x26xi3213x26x3xbf16": 1,
    "13x21x3xbf16": 24,
    "13x26xi32": 11,
    "5x4xf32": 29,
    "smtint": 44,
    "index": 890,
    "f64": 214,
    "f64i64": 2,
    "i64": 188,
    "1x24x2xi32": 1,
    "i1i1i1i1f32f32f32": 3,
    "i1i1i1i1f32f32f32f32f32": 1,
    "268435456x21x3xf32268435456x26xi32268435456x26x3xf32": 1,
    "268435456x21x3xf32": 1,
    "268435456x26xi32": 1,
    "3x?x5xi32?x6xi32": 1,
    "3x?x5xi32": 1,
    "?x6xi32": 1,
    "indexindexindexindex": 18,
    "13x8x16xf3213x8x9xf3213x8x9xf32": 3,
    "13x8x16xf32": 3,
    "spirvptri32PhysicalStorageBuffer": 8,
    "2xi82xi8": 3,
    "2xi8": 13,
    "13x21x3xi3213x21x1xi3213x21x3xi32": 10,
    "13x21x3xi32": 48,
    "13x21x1xi32": 22,
    "indexindexindexindexindexi32": 1,
    "1x1x1xi113x21x3xf3213x21x3xf3213x21x3xf32": 3,
    "1x1x1xi1": 6,
    "13x21x3xf32": 104,
    "f32f32f32": 52,
    "1x1xui81x1xi8": 2,
    "1x1xui8": 2,
    "?x?x?xf32?x?x?xf32?x?x?xf32?x?x?xf32": 1,
    "?x?x?xf32": 10,
    "*xi32index": 3,
    "*xi32": 27,
    "i16i64": 3,
    "i16": 34,
    "2x3x?x?xf32": 2,
    "?xf32?xf32": 23,
    "?xf32": 159,
    "transformany_optransformany_value": 1,
    "transformany_value": 6,
    "i32indexindexindexi32": 1,
    "indexindex": 46,
    "?x6x1xi32*xi32?x6x?xi32": 1,
    "?x6x1xi32": 1,
    "f32f32": 122,
    "96x128xi83128xi83": 2,
    "96x128xi83": 2,
    "128xi83": 2,
    "i8": 69,
    "i1i1": 22,
    "f32f32i1": 23,
    "?x1xf32?x1xf32": 18,
    "?x1xf32": 28,
    "5xi15xi1indexi1i1": 2,
    "5xi1": 40,
    "indexi323xi32": 1,
    "1x21x3xf3213x21x3xf3213x21x3xf32": 3,
    "1x21x3xf32": 5,
    "llvmfunci32": 20,
    "llvmptr": 11,
    "si32si32si32si32": 4,
    "si32": 18,
    "1xf32f322xf32f323xf32": 2,
    "13x21x3xbf1613x21x1xbf1613x21x3xbf16": 2,
    "13x21x1xbf16": 3,
    "1xf321xf321xf321xf32": 1,
    "?x?xf32?x?xf32?x?xf32?x?xf32": 3,
    "?x?xf32": 53,
    "2x3x5x4x?x7xf32indexindex": 1,
    "2x3x5x4x?x7xf32": 1,
    "?xf32indexf32": 2,
    "i64i32": 2,
    "?xi8512xi8": 1,
    "?xi8": 4,
    "512xi8": 2,
    "13x21x3xf3213x21x3xf3226x21x3xf32": 5,
    "f16f32f64f16f32f64": 22,
    "f16": 34,
    "f32f32f32f32f32": 4,
    "llvmfunci32i32": 3,
    "13x52x3xf3213x26xi3213x26x3xf3213x52x3xf32": 1,
    "13x52x3xf32": 1,
    "13x26x3xf32": 3,
    "4x?xi16513xi16": 1,
    "4x?xi16": 1,
    "513xi16": 5,
    "transformany_optransformany_op": 14,
    "?x5x4xf32": 2,
    "?x1xf321xf32?x1xf32": 1,
    "indexindex?x3x?xf32": 1,
    "?x?xf32?x?xf32f32i1?x?xf32?x?xf32": 2,
    "i32i8": 3,
    "?xf32f32index?xf32index": 1,
    "4x7x3xf324x4x3xf32?x?x?xf32": 1,
    "4x7x3xf32": 1,
    "4x4x3xf32": 1,
    "4xi324xi32": 3,
    "4xi32": 13,
    "13x21x3xf3213x26xi32*xf32": 1,
    "5xf32?xf32": 1,
    "5xf32": 27,
    "?x512x1x1xf32?x?xf32": 1,
    "?x512x1x1xf32": 1,
    "1x1x1xf32f32": 2,
    "1x1x1xf32": 3,
    "4xi324xi324xi1": 1,
    "13x21x1xi3213x21x3xi3213x21x3xi32": 9,
    "?x?x?xi322x4x5xi32": 1,
    "?x?x?xi32": 7,
    "2x4x5xi32": 2,
    "f16f16f16f16": 1,
    "1x1x7x7xf321x2x7x7xf32": 1,
    "1x1x7x7xf32": 6,
    "2x16x16xf32indexf32": 2,
    "2x16x16xf32": 4,
    "i32i32i32i32": 12,
    "i32i32i64i32i32": 1,
    "1xi81xi32": 2,
    "1xi8": 24,
    "f32f64": 14,
    "llvmfuncf32i8": 1,
    "f32i8": 1,
    "1x1x1x1x13x21x3xi321x1x1x1x13x21x3xi321x1x1x1x13x21x3xi32": 6,
    "1x1x1x1x13x21x3xi32": 15,
    "f64i32": 4,
    "10xf3210xf32": 2,
    "i32*xi32": 3,
    "3x1xi32": 5,
    "8x4xf32?x?xf32?x?xf32": 1,
    "8x4xf32": 2,
    "1xf322xf323xf324xf3210xf32": 1,
    "2xf32": 14,
    "3xf32": 7,
    "4xf32": 25,
    "1x?x64xf321x?x64xf321x?x128xf32": 1,
    "1x?x64xf32": 2,
    "1x?x?xf321x?x?xf321x?x128xf32": 1,
    "1x?x?xf32": 2,
    "13x21x1xf3213x21x3xf3213x21x3xf32": 6,
    "13x21x1xf32": 14,
    "13x21x3xf3213x1x3xf3213x21x3xi1": 4,
    "13x1x3xf32": 9,
    "i1i32i32i32": 3,
    "1x1x8x8xf321x2x4x8xf321x4x8x8xf32": 1,
    "1x1x8x8xf32": 1,
    "1x2x4x8xf32": 1,
    "42x?xf32": 8,
    "1x1x1x1x1x1x1x1xf321x1x1x1x1x1x1x1xf321x1x1x1x1x1x1x1xi11x1x1x1x1x1x1x1xf32": 1,
    "1x1x1x1x1x1x1x1xf32": 6,
    "1x1x1x1x1x1x1x1xi1": 1,
    "?x1xf321xi32": 1,
    "13x21x3xi11x21x3xi1": 4,
    "13x21x3xi1": 24,
    "f32i32": 6,
    "?xf32f32": 9,
    "13x21x1xf3213x21x3xf3213x21x3xi1": 2,
    "2x1xf322x2xf32": 1,
    "2x1xf32": 2,
    "2x2xf32": 6,
    "1xui8": 6,
    "spirvptrf32StorageBufferf32f32": 1,
    "spirvptrf32StorageBuffer": 1,
    "f32i1": 3,
    "13x21x3xbf1613x21x3xbf16": 11,
    "i32i32i32": 38,
    "13x21x1xi3213x21x1xi32": 3,
    "f32f64f32f64": 10,
    "5xf325xf32": 6,
    "10x42xf32": 6,
    "?x?x?x7x?xf32index": 2,
    "?x?x?x7x?xf32": 2,
    "13x21x3xf3213x21x3xf32": 44,
    "indexindexindex": 48,
    "1x1x1x1x13x21x3xf321x1x1x1x13x21x3xf32": 18,
    "1x1x1xi32": 4,
    "13x21x3xi1613x21x3xi8": 1,
    "13x21x3xi16": 7,
    "5x4xf325x4xf32": 13,
    "shapeshapeshapeshapeshapeshape": 4,
    "shapeshape": 40,
    "4x5xi8513xi8": 2,
    "4x5xi8": 4,
    "513xi8": 3,
    "?x3xf32?x3xf32": 1,
    "?x3xf32": 2,
    "2xi322xi32": 2,
    "2xi32": 7,
    "1xi322xf323xi321x2xf32*xi32": 1,
    "1xi32": 283,
    "3xi32": 3,
    "1x2xf32": 6,
    "llvmfuncf32f32": 2,
    "4xf324xf32": 4,
    "1x21x3xi3213x21x3xi3213x21x3xi32": 2,
    "1x21x3xi32": 2,
    "2x?x?x?xf322x?x?xf32": 1,
    "2x?x?x?xf32": 1,
    "1xi324xf32": 1,
    "?xf32f32?xf32": 3,
    "llvmptri32": 1,
    "transformany_optransformany_optransformparami64": 2,
    "transformparami64": 7,
    "*xf32*xf32": 6,
    "2x3x?xf32?x5xf32indexindexindexindexindex": 2,
    "2x3x?xf32": 2,
    "?x5xf32": 2,
    "i81xi32?x?xf32": 1,
    "i1i32i1": 2,
    "?x?x?xi32?x?xi323x6x5xi32": 1,
    "?x?xi32": 6,
    "3x6x5xi32": 3,
    "2x3xi32": 18,
    "i1i64": 6,
    "i32i32i32i32i32": 3,
    "36xi321x2xf32f32": 1,
    "36xi32": 1,
    "f64f64f64": 3,
    "f64f64": 17,
    "13x21x3xf321x21x3xf32": 5,
    "13x21x3xi413x21x3xi4": 1,
    "13x21x3xi4": 1,
    "testdtype1i32": 4,
    "llvmptrllvmptri64i64i64i64i64": 1,
    "4x3x2xi32?xi324x3x2xi32": 1,
    "4x3x2xi32": 2,
    "?xi32": 18,
    "3x4x5xi32?x?xi32": 1,
    "3x4x5xi32": 3,
    "f32f32i32i32f64": 1,
    "13x260000000x3xf3213x260000000xi3213x260000000x3xf3213x260000000x3xf32": 1,
    "13x260000000x3xf32": 2,
    "13x260000000xi32": 1,
    "42xf3242xf32": 1,
    "42xf32": 1,
    "i1i64i32": 2,
    "13x21x3xi1613x1x3xi161xi813x21x3xi32": 1,
    "13x1x3xi16": 2,
    "2x3xi12x3xi322x3xi322x3xi32": 1,
    "2x3xi1": 2,
    "?x1xf32?x1xf32?x1xf32": 2,
    "i1f32": 3,
    "i1f32i32f64": 1,
    "?xf32index?xf32": 1,
    "3x1xi1": 2,
    "1x1x1x1x13x1x3xi11x1x1x1x13x21x3xi11x1x1x1x13x21x3xi1": 2,
    "1x1x1x1x13x1x3xi1": 2,
    "1x1x1x1x13x21x3xi1": 6,
    "13x21x3xi113x21x3xi8": 1,
    "2xf322xf322xf32": 1,
    "llvmfuncf64": 1,
    "4xf324xf324xf32": 2,
    "shapeshapeshapeshape": 5,
    "4xi322xi8": 1,
    "13x21x3xi81x21x3xi8": 1,
    "13x21x3xi8": 15,
    "1x5x3xi81x3x6xi81x5x6xi32": 1,
    "1x5x3xi8": 1,
    "1x3x6xi8": 1,
    "asynctoken": 15,
    "1x1xi321x1x1x1x1x1x1xi32": 1,
    "1x1xi32": 1,
    "2x3x?x4xf32": 2,
    "f32f32*xf32": 2,
    "?x?xf64?x?xf64?x?xf64": 1,
    "?x?xf64": 2,
    "13x21x3xbf1613x21x3xi8": 1,
    "1x1xi81x1xui8": 3,
    "1x1xi8": 3,
    "13x16384x16xf3213x16384x9xf3213x16384x9xf32": 1,
    "13x16384x16xf32": 1,
    "i32bf16": 2,
    "1x5x?xf321x?x6xf321x5x6xf32": 1,
    "1x5x?xf32": 1,
    "1x?x6xf32": 1,
    "spirvimagef32Dim1DNoDepthNonArrayedSingleSampledSamplerUnknownUnknown": 1,
    "5xf32indexf325xf32": 1,
    "13x21x3xi813x1x3xi81xi813x21x3xi16": 2,
    "13x1x3xi8": 3,
    "f32bf16": 1,
    "14x19xf3214xi32": 2,
    "14x19xf32": 2,
    "1x1x1x1x1x1x1xi11x1x1x1x13x21x3xf321x1x1x1x13x21x3xf321x1x1x1x13x21x3xf32": 1,
    "1x1x1x1x1x1x1xi1": 1,
    "10xi3210xi1": 1,
    "10xi32": 10,
    "shapeshapeshapeshapeindex": 3,
    "indexi1": 2,
    "32x128xi4132x128xi4": 2,
    "32x128xi41": 2,
    "32x128xi4": 1,
    "llvmfunci64i32i32i32i8i1i8": 1,
    "i64i32i32i32i8i1i8": 1,
    "42x?xf32indexindexf32": 1,
    "1xf321xf32": 1,
    "1x1x1x1x13x21x3xf321x1x1x1x13x1x3xf321x1x1x1x13x21x3xi1": 1,
    "1x1x1x1x13x1x3xf32": 3,
    "f32f32f32f32": 12,
    "?xf32index": 6,
    "1xi322xf323xi321x2xf321x2xi32": 1,
    "1x2xi32": 3,
    "*xi32*xi32": 2,
    "8xf328xf32": 4,
    "8xf32": 10,
    "14x19xbf1614xi32": 1,
    "14x19xbf16": 1,
    "shapeshapeshapeshapeshapewitness": 1,
    "3x?xf32indexindex": 1,
    "3x?xf32": 1,
    "1x1x1x1x1x1x1xf321xi32": 1,
    "1x1x1x1x1x1x1xf32": 12,
    "2x1xi1": 2,
    "i32i64": 4,
    "?x?xf32indexindexf32": 1,
    "indexindexindexindexindexindex": 3,
    "?x1xf32?x?xf32": 1,
    "10xf32f32indexf32f32": 1,
    "i16i32i64i64": 1,
    "indexindexindexi32": 10,
    "4xui84xui8": 1,
    "4xui8": 1,
    "f32indexindexf32f32": 2,
    "indexindexindexf32f32": 2,
    "1x14x19xf321x19x28xf321xf321xf321x14x28xf32": 3,
    "1x14x19xf32": 7,
    "1x19x28xf32": 7,
    "i1i1i1i1i1i1i1i1i1i1i1i1i1i1i1i1": 3,
    "i1i64i32i32": 2,
    "4xi32f32": 1,
    "2x3xi322x3xi32": 3,
    "1x5x3xf321x3x6xf321x5x6xf32": 1,
    "1x5x3xf32": 2,
    "1x3x6xf32": 1,
    "index?xf64f64?xf64index": 2,
    "?xf64": 4,
    "?x?xf32index": 3,
    "?xf32?xf32i1f32?xf32": 3,
    "1x5x3xf321x3x?xf321x5x?xf32": 1,
    "1x3x?xf32": 1,
    "12x7xf32": 1,
    "2xf16": 2,
    "?x?xf32?x?xf32": 1,
    "4x6xf32": 1,
    "32xbf16": 1,
    "13x21x3xi3213x21x3xf32": 4,
    "i64i64": 15,
    "1xf16": 4,
    "?x3x2xf32?x3xi32": 1,
    "?x3x2xf32": 1,
    "?x3xi32": 1,
    "5x4xi85x4xi8": 6,
    "5x4xi8": 12,
    "?xf32f32?xf32f32": 3,
    "i1i32i32": 2,
    "f32i32f32": 3,
    "4xi84xi8": 7,
    "4xi8": 7,
    "1x1x1x1x1x1x1xf32i32": 1,
    "3x11x11x3xi4": 1,
    "bf16bf16bf16i1": 1,
    "bf16": 8,
    "f3210x2x4xf32": 1,
    "spirvptri32Workgroupi32i32": 1,
    "spirvptri32Workgroup": 3,
    "42x32x15x13x27xf32": 3,
    "13x21x3xf3213x26xi3213x26x3xf32": 3,
    "?x?x?x?x?xf32?x?xf32": 2,
    "?x?x?x?x?xf32": 2,
    "1x1x1x13x21x3x8xf321x1x1x13x21x3x8xf321x1x1x26x21x3x8xf32": 1,
    "1x1x1x13x21x3x8xf32": 2,
    "2x2x2x1xi32": 4,
    "?xf32?xf322": 1,
    "i15xf325xf325xf32": 1,
    "13x21x3xi3213x1x3xi321xi813x21x3xi32": 2,
    "13x1x3xi32": 7,
    "1x3x3xi32": 4,
    "*xf32*xf3213x21x3xf32": 1,
    "1xi481xi8": 3,
    "1xi48": 3,
    "13x21x3xi1613x21x3xi1626x21x3xi16": 1,
    "2x1x4xi1": 2,
    "13x28x3xf3213x26xi3213x26x3xf3213x28x3xf32": 2,
    "13x28x3xf32": 2,
    "*xi324x8xi32": 1,
    "16x64x256xf3216x64x256xf32": 1,
    "16x64x256xf32": 1,
    "i32i32indexindexindex": 10,
    "i32indexindexindex": 4,
    "i8indexindexindex": 8,
    "13x21x3xf3213x21x1xf3213x21x3xf32": 6,
    "?x?x?x4x?xf32?x?x?xf32": 1,
    "?x?x?x4x?xf32": 1,
    "?xi1index?xi1": 1,
    "?xi1": 3,
    "13x21x3xi113x21x1xi113x21x3xi1": 4,
    "13x21x1xi1": 5,
    "?x?x?xf32?x?xi32": 1,
    "4xi1281": 3,
    "?x?xf32?x?xf32index": 2,
    "1x1x1x1x1x21x3xf321x1x1x1x13x21x3xf321x1x1x1x13x21x3xf32": 1,
    "1x1x1x1x1x21x3xf32": 2,
    "spirvptrspirvptri32PhysicalStorageBufferGeneric": 4,
    "1x1x7x7xf321x4x7x7xf32": 1,
    "13x21x3xi813x21x3xi8": 6,
    "?x5xi32index": 2,
    "?x5xi32": 4,
    "42x?xf32indexindex": 1,
    "i1i1i32f32i32i8": 2,
    "1xi321xi8": 2,
    "13x21x3xi813x21x3xbf16": 1,
    "2x?x?xf32?x?xf32": 1,
    "2x?x?xf32": 2,
    "?x?xf32?x?xf32?x?xf32": 2,
    "3x7x5xi323x6xi323x6x5xi323x7x5xi32": 1,
    "3x7x5xi32": 1,
    "3x6xi32": 5,
    "?xf32indexf32?xf32?xf32": 1,
    "5xi15xi1index5xi15xi1": 4,
    "testsmpla": 4,
    "testsmplatestsmpla": 2,
    "llvmfunci1i32": 2,
    "i1i32": 9,
    "shapeshapeshapesize": 4,
    "2x16x16xf32index": 2,
    "llvmfunci40i8": 2,
    "i40i8": 2,
    "i40": 2,
    "i64i16i64i64i64": 1,
    "32xf3232xf3232xf32": 1,
    "32xf32": 9,
    "13x21x3xi113x21x3xi1": 2,
    "1x3xi32": 7,
    "i64llvmptr": 1,
    "?x1xf32?x1xi32": 1,
    "2x1x4xi32": 4,
    "si32si32si32": 2,
    "42x2x?xf32": 2,
    "5xf325xf325xi1": 1,
    "128xi8": 3,
    "13x21x3xf32*xi3213x26x3xf32": 1,
    "spirvimagef32Dim2DNoDepthNonArrayedSingleSampledNoSamplerRgba8": 2,
    "f32f32index3xf32": 1,
    "?x?x?xf324xi64?x?x12x32xf32": 1,
    "4xi64": 2,
    "?xf32i32": 1,
    "spirvptri32Workgroupi32i32i32": 2,
    "i64i32i8i32": 2,
    "?xf32?xf32indexindexindex?xf32?xf32": 4,
    "i3": 2,
    "1x3xi1": 2,
    "10xf32index": 1,
    "10x42xf32indexindex": 1,
    "2xf32f322xf32": 1,
    "4x5xi324x5xi32": 5,
    "4x5xi32": 5,
    "?x2xf322x2xf32": 1,
    "?x2xf32": 1,
    "4xi11xi1": 1,
    "4xi1": 2,
    "1xi1": 3,
    "13x21x3xi3213x1x3xi3213x21x3xi32": 3,
    "8xi32": 7,
    "indexi32f32": 1,
    "testdself_referencingtestdself_referencingi32": 2,
    "testdself_referencingi32": 4,
    "testdparametrici64": 1,
    "f64f16": 1,
    "?xf32f32index?xf32": 1,
    "shapesizeindex": 1,
    "6xi16513xi16": 1,
    "6xi16": 1,
    "5x4xi32": 4,
    "100x100xf32index": 1,
    "100x100xf32": 1,
    "4xi164xi16": 1,
    "4xi16": 1,
    "1xi321xui321xui64": 1,
    "1xui32": 3,
    "1xui64": 1,
    "1x1x7x7xf321x8x7x7xf32": 1,
    "13x21x3xbf161xbf161xbf1613x21x3xbf16": 1,
    "1xbf16": 2,
    "i1i1i1i1i1i1i1i1i1i1": 1,
    "5x2x8xf32": 2,
    "13x21x3xi3213x21x3xi32": 6,
    "4x?xf32indexindex": 1,
    "4x?xf32": 1,
    "536870912x8x16xf32536870912x8x9xf32536870912x8x9xf32": 1,
    "536870912x8x16xf32": 1,
    "i8i64": 1,
    "i1i32i1i32": 5,
    "8xf3216xf32": 1,
    "13x21x3xf3213x1x3xf3213x21x3xf32": 2,
    "13x1x3xf3213x21x3xf3213x21x3xi1": 2,
    "2xi322xf32": 1,
    "f32i24": 1,
    "llvmfuncf32": 4,
    "5xf32?xf325xf32": 1,
    "64xf3264xf3264xf3264xf32": 3,
    "64xf32": 20,
    "5x4xi1": 2,
    "spirvstructsimplef32": 1,
    "spirvptri32StorageBufferi32": 4,
    "spirvptri32StorageBuffer": 13,
    "4x?x?x8x2x?xf324x?x?x8x2x?xf324x?x?x8x2x?xi1": 1,
    "4x?x?x8x2x?xf32": 2,
    "i1index?xf32i8": 4,
    "llvmfunci64": 5,
    "?x6x32xf32indexindexf32": 1,
    "?x6x32xf32": 1,
    "4x5x?xf32": 2,
    "4x3x2xi323x1xi324x3x2xi32": 1,
    "1x1x1x1x13x21x3xf321xf321x1x1x1x13x21x3xf32": 1,
    "?xf3232xf32": 3,
    "1x14x19xf321x19x28xf321xf321x14x28xf32": 2,
    "4xi11xi324xi32": 1,
    "13x8x16384xf3213x8x8193xf3213x8x8193xf32": 1,
    "13x8x16384xf32": 1,
    "i42": 2,
    "?x?x?xf32?x?x?xf32?x?x?xf32": 1,
    "2x3xi12x3xi322x3xi32": 1,
    "indexindexindexindexindexindexindexindexindex": 1,
    "spirvptrf32CrossWorkgroupi64": 2,
    "spirvptrf32CrossWorkgroup": 4,
    "?xf325xf32": 2,
    "4x5xi8256xi8": 2,
    "256xi8": 2,
    "?xi8index?xi8": 1,
    "13x21x3xi321xi3213x21x3xi32": 5,
    "testdtype1testdtype2testdtype1i32": 2,
    "testdtype2testdtype1i32": 2,
    "indexindex?x?xf32f32": 1,
    "i32i32i32i32i32i32": 1,
    "i32i32i32i32i32i32i32": 1,
    "index?xf64f64index?xf64index": 2,
    "f323x2x2xf32": 1,
    "*xf32index": 3,
    "f16f16": 3,
    "1x14x19xi81x19x28xi81x14x28xi32": 1,
    "1x14x19xi8": 1,
    "1x19x28xi8": 1,
    "?x?x?x?xf326x6x?x?x?x?xf326x6x?x?x?x?xf32": 1,
    "?x?x?x?xf32": 6,
    "6x6x?x?x?x?xf32": 2,
    "ui32ui32ui32": 1,
    "ui32": 3,
    "64xf3264xf3264xf32": 3,
    "5x1xf326x1xf32": 1,
    "5x1xf32": 1,
    "6x1xf32": 1,
    "2xf322xf32": 2,
    "536870912xi32536870912xi32": 1,
    "536870912xi32": 4,
    "llvmfuncf16f16f16": 1,
    "f16f16f16": 1,
    "llvmfunci64i64i64i64": 1,
    "i64i64i64i64": 2,
    "1xf321xi321xf321xi32": 1,
    "10xi3210xi32": 3,
    "3x5xi32index": 2,
    "3x5xi32": 4,
    "i16f64": 1,
    "2x6x32xf32indexindexf32": 2,
    "2x6x32xf32": 2,
    "2x3xi322x3xi321xi82x3xi32": 1,
    "4x2x3xi324x2x3xi32": 1,
    "4x2x3xi32": 1,
    "?x42x?xf32": 2,
    "i32i1": 9,
    "testtest_tensor42f32": 2,
    "?x16x?xf322x?x?xf32indexindexindex": 1,
    "?x16x?xf32": 1,
    "4x4xf16": 2,
    "13x1x3xi113x21x3xi113x21x3xi1": 4,
    "13x1x3xi1": 4,
    "indexindexindex?xf32?xf32": 2,
    "f32f32i1f32": 7,
    "1x1x1x1x13x1x3xf321x1x1x1x13x21x3xf321x1x1x1x13x21x3xi1": 1,
    "1xf322xf32": 2,
    "42x?x?x13x?xf32": 2,
    "indexindexindexindexindex": 4,
    "?x1x6x1xi327x1x5xi32?x7x6x5xi32": 2,
    "?x1x6x1xi32": 2,
    "7x1x5xi32": 4,
    "1xi64": 2,
    "1x1x1x1x13x21x3xi11x1x1x1x13x21x3xi1": 1,
    "?x4x?xf322x4x?xf32?x4x?xf32": 1,
    "?x4x?xf32": 1,
    "2x4x?xf32": 1,
    "indexindexi1i1i1": 1,
    "f16f64f16f64": 1,
    "1x2xf322x?xf32": 1,
    "2x?xf32": 3,
    "1x1x1x1x13x21x3xf321x1x1x1x13x21x1xf321x1x1x1x13x21x3xf32": 2,
    "1x1x1x1x13x21x1xf32": 3,
    "13x21x3xi161xi161xi1613x21x3xi16": 1,
    "1xi16": 4,
    "?x?x4x?x6x7xi32?x?x42xi32": 1,
    "?x?x4x?x6x7xi32": 1,
    "smtbool": 2,
    "smtboolsmtbool": 4,
    "?x4x8xf32?x4x8xf32?x4x8xf32?x4x8xf32": 1,
    "?x4x8xf32": 2,
    "1xf64": 2,
    "3x4xf323x4xf32": 2,
    "i8i8i8i8i8": 8,
    "2xi48": 2,
    "smtintsmtbool": 4,
    "?x?x?xf16?x?x?xf16": 1,
    "?x?x?xf16": 1,
    "3x3xf323x3xf323x3xf32": 1,
    "3x3xf32": 2,
    "1x1x1x1x13x21x3xi321x1x1x1x13x21x3xi32": 2,
    "3x11x11x3xf32": 1,
    "4xi32i324xi32": 1,
    "1xf323xf323xf32": 1,
    "13x21x3xi3213x21x3xi16": 1,
    "*xi32*xi322xi32": 1,
    "indexshapeshape": 1,
    "2x2x5xf32": 1,
    "1xf32index": 1,
    "?x?x?xf32indexindexindex": 1,
    "5xf32index": 3,
    "13x21x3xi113x21x3xi126x21x3xi1": 2,
    "?xf32?xf32f32": 2,
    "testdynamic_pairi32f64": 1,
    "testdynamic_singleton": 1,
    "indexi64": 1,
    "32x32x16384xf3232x32x16384xf3232x32x16384xf3232x32x16384xf32": 2,
    "32x32x16384xf32": 4,
    "4xf321xf32": 2,
    "llvmtarget\"spirv.Image\"i320": 2,
    "8x8x8xf328x8x8xf328x8x8xf328x8x8xf32": 1,
    "8x8x8xf32": 2,
    "bf16i32": 2,
    "64xf3264xf32": 2,
    "10xi110xi1": 6,
    "4xi321xi32": 2,
    "?xf32indexindexindex?xf32": 3,
    "1x1x1x1x1x1x1xf321x1x1x1x1x1x1xf32i11x1x1x1x1x1x1xf32": 1,
    "i12xf322xf32": 1,
    "?xf32?xf32i1?xf32": 1,
    "4xf321xf321xf32*xf32": 1,
    "13x21x3xi1613x21x3xi16": 1,
    "i80": 2,
    "spirvptri32StorageBufferi32i32": 9,
    "i32f32i3i2i1": 1,
    "4x4xf32shapeshape": 1,
    "4x4xf32": 6,
    "f16f64": 1,
    "2x3xf32indexindex": 1,
    "2x3xf32": 4,
    "1x2x?xf32shapesize": 1,
    "1x2x?xf32": 2,
    "2x64xi16256xi162x64xi32": 1,
    "2x64xi16": 1,
    "256xi16": 1,
    "i48i32i8i32": 1,
    "i48": 1,
    "5x4x8xf325x4x5xf325x4x5xf32": 1,
    "5x4x8xf32": 1,
    "i16i32i64": 3,
    "i8i8i64": 6,
    "2xui8": 4,
    "llvmfunci8": 1,
    "?xf32?xf32?xf32": 5,
    "?x?x?xi323x6xi32?x?x?xi32": 1,
    "?xi8indexindex": 1,
    "?x5xi32indexindex": 2,
    "transformtest_dialect_param": 2,
    "i1f32f32f32": 6,
    "i32spirvptri32TaskPayloadWorkgroupEXT": 1,
    "spirvptri32TaskPayloadWorkgroupEXT": 1,
    "?xf32?xf32i1?xf32?xf32": 1,
    "1xi81xi16": 2,
    "1x1x1x1x13x21x3xi11x1x1x1x13x21x3xi11x1x1x1x13x21x3xi1": 1,
    "23178x20000x19xf3223178x19x28xf3223178x20000x28xf32": 1,
    "23178x20000x19xf32": 1,
    "23178x19x28xf32": 1,
    "index?xf32f32": 1,
    "index5x?x6xf32": 1,
    "i1i2": 1,
    "1xf321xi64": 1,
    "indexf32f32": 1,
    "2xf32*xf32": 1,
    "13x21x3xf321x21x3xf3213x21x3xf32": 2,
    "3x11x11x3xf16": 1,
    "1x4x8xf321x4x8xf321x4x8xf321x4x8xf32": 5,
    "1x4x8xf32": 10,
    "transformany_optransformany_valuetransformany_value": 1,
    "?x5x3xf32?x3x6xf32?x5x6xf32": 1,
    "?x5x3xf32": 1,
    "?x3x6xf32": 1,
    "llvmfunci10": 2,
    "i10": 4,
    "testdtype2i64": 2,
    "?xf3210xf32": 1,
    "*xf32f32": 2,
    "*xf32?xf32": 1,
    "i32i1i32": 1,
    "?x?x?xi323x6xi32": 1,
    "i1284xi1281": 1,
    "i128": 1,
    "13x21x3xf3213x1x3xf321xi813x21x3xf32": 1,
    "testoptional_value_typetestoptional_value_type3": 1,
    "testoptional_value_type": 1,
    "testoptional_value_type3": 1,
    "1x1x7x7xf321x1x7x7xf321x4x7x7xf32": 1,
    "?x?xf32indexindex": 2,
    "4x4x?xf32": 4,
    "32xf3232xf32": 2,
    "6x6x?x?x?x?xf32?x?x?x?xf32?x?x?x?xf32": 1,
    "?xf32?xf32?xf32?xf32": 1,
    "index4xi32": 3,
    "index4xi64": 1,
    "4x8xf32indexindexf32": 1,
    "4x8xf32": 2,
    "?xf32f32f32": 1,
    "?x2x4xf32": 2,
    "1xf321xf321xf32": 2,
    "i8i32f321xi81xi321xf32": 1,
    "i64f32i32": 1,
    "2x3xf322x3xf322x3xf32": 1,
    "100xf32": 7,
    "f32f32f32f32f32f32f32f32f32f32f32f32": 1,
    "4xf164xf16": 1,
    "4xf16": 1,
    "1xf32?xf32?xf32": 1,
    "1x1x?x1x1x1xf32?xf32": 1,
    "1x1x?x1x1x1xf32": 1,
    "1x1x7x7xf322x2x7x7xf32": 1,
    "5xi15xi1index": 1,
    "5xf325xf325xf32": 2,
    "shapesizeshapesize": 2,
    "i1i1i32": 1,
    "llvmfuncbf16": 1,
    "1x2x?xf321x?xf32": 1,
    "3x4x5xi323x6xi32": 1,
    "4x5xi16513xi16": 2,
    "4x5xi16": 2,
    "3x8x5xi323x6xi323x6x5xi32": 1,
    "3x8x5xi32": 1,
    "7x8xf32index": 1,
    "7x8xf32": 1,
    "shapeshapei1": 1,
    "1x14x19xf321x19x28xf321x14x28xf32": 2,
    "i64i64i64": 3,
    "5xf32f32f32": 1,
    "16xi16": 1,
    "32xi8": 1,
    "32xi4": 1,
    "256xi1": 1,
    "2xi322xi32*xi32": 1,
    "i1?xf32?xf32?xf32": 1,
    "testdself_referencingi64": 2,
    "?x3x5xi32indexindex": 2,
    "?x3x5xi32": 2,
    "shapeshapeshapeshapei1": 1,
    "i1024i1024i1024": 1,
    "i1024": 2,
    "i8smtboolsmtbool": 1,
    "spirvstructa4spirvptrspirvstructa4Uniform": 1,
    "spirvptrspirvstructa4Uniform": 1,
    "spirvstructa4": 1,
    "10x20xf32?x?xf3210x?xf32": 1,
    "10x20xf32": 2,
    "10x?xf32": 1,
    "i64i1i1i1i1i1i1i1i1i1i1": 1,
    "13x21x3xbf161x21x3xbf16": 1,
    "128xf32128xf32": 1,
    "128xf32": 1,
    "1x2x3xf321x3x4xf321xf321x2x4xf32": 1,
    "1x2x3xf32": 3,
    "1x3x4xf32": 1,
    "1x224x224x3xf3296xf32": 1,
    "1x224x224x3xf32": 1,
    "13x21x3xi3213x1x3xi3213x21x3xi1": 2,
    "i1indexindex": 2,
    "8x12x32xf32?x32xf32": 1,
    "8x12x32xf32": 1,
    "standalonecustom\"10\"": 2,
    "42x32x15x13x27xf32index": 1,
    "?xf32?xf32i1f32f32?xf32": 1,
    "4xf32*xf32": 1,
    "1x2x?xi321x2x3xi321x2x?xi32": 1,
    "1x2x?xi32": 1,
    "llvmptr1": 3,
    "ui8ui8i1ui8": 1,
    "ui8": 6,
    "2xf323xf32i1": 1,
    "1x1x1xi113x21x3xi813x21x3xi813x21x3xi8": 1,
    "1xi11xi1": 1,
    "3x2xi32*xi324x3x2xi32": 1,
    "3x2xi32": 2,
    "f16f32": 1,
    "13x21x3xbf1613x1x3xbf1613x21x3xi1": 1,
    "13x1x3xbf16": 2,
    "13x21x3xi321x21x3xi32": 1,
    "?xi32indexi32": 2,
    "32x16384x32xf3232x16384x32xf3232x16384x32xf3232x16384x32xf32": 2,
    "32x16384x32xf32": 4,
    "4x4xf32indexf32": 1,
    "spirvsampled_imagespirvimagef32Dim1DNoDepthNonArrayedSingleSampledNoSamplerUnknown": 1,
    "spirvimagef32Dim1DNoDepthNonArrayedSingleSampledNoSamplerUnknown": 3,
    "indexi32": 1,
    "1x8x8x8xi161x8x8x8xi161x8x8x8xi32": 1,
    "1x8x8x8xi16": 2,
    "?x?xf321xi32?xf32": 1,
    "2x3x4xi32?x?x?xi32": 1,
    "2x3x4xi32": 2,
    "*xf322xf32": 1,
    "i16i64i64": 2,
    "160xi1": 1,
    "f64f64f64f64": 1,
    "8x?xf328x?xf328x?xf32": 1,
    "8x?xf32": 2,
    "1x1x1x1x13x21x3xi81x1x1x1x13x21x3xi8": 1,
    "1x1x1x1x13x21x3xi8": 1,
    "?x1x?x1x1x?x?x1x1xf32?x?x?x?xf32": 1,
    "?x1x?x1x1x?x?x1x1xf32": 1,
    "13x21x3xi3213x26xi3213x26x3xi32": 1,
    "3x5xi32indexindex": 2,
    "f322x4xf32": 1,
    "1x1x1x1x13x21x3xf321x1x1x1x1x21x3xf321x1x1x1x13x21x3xf32": 1,
    "i1index": 5,
    "i11xf32i32": 1,
    "bf16bf16": 1,
    "13x21x1xi113x21x3xi113x21x3xi1": 1,
    "indexshapesize": 1,
    "3x11x11x3xi1": 1,
    "2x3xf322x3xf32": 2,
    "2x16x32xf322x16x32xf322x16x32xf32": 1,
    "2x16x32xf32": 3,
    "f32f32f64f64": 2,
    "13x21x3xi813x21x3xi32": 2,
    "?x3x?xi32?x?x5xi32": 1,
    "?x3x?xi32": 1,
    "?x?x5xi32": 2,
    "2x1xi32": 4,
    "f3210xf3220x30xi1640x50x60xi1670x80x90x100xi16": 1,
    "20x30xi16": 1,
    "40x50x60xi16": 1,
    "70x80x90x100xi16": 1,
    "llvmfunci32i8": 2,
    "*xi322xi32": 1,
    "3xf323xf323xf32": 1,
    "4xi324xi324xi32": 2,
    "4x8xf32f32indexindex": 1,
    "i1f32f32": 1,
    "indexindexindexi1": 1,
    "128x32xf16": 2,
    "2x3x2xf322x3xi32": 1,
    "2x3x2xf32": 1,
    "*xf32?x?xf324x?xf32": 1,
    "2x3x2xi322x3xi32": 1,
    "2x3x2xi32": 1,
    "transformany_optransformany_optransformany_value": 2,
    "1x1x8xi8i8i8": 1,
    "1x1x8xi8": 1,
    "2x3xi322x3xi322x3xi32": 2,
    "1x21x3xbf1613x21x3xbf1613x21x3xbf16": 1,
    "1x21x3xbf16": 1,
    "f325xf32index": 1,
    "llvmstruct\"_Converted.foo\"f32": 1,
    "llvmstruct\"foo\"index": 2,
    "i32i32i8i32": 1,
    "?xf32?xf32indexindexindex?xf32": 1,
    "13x21x3xbf1613x21x3xbf1626x21x3xbf16": 1,
    "*xf321xi32?xf32": 1,
    "2xi82xi16": 1,
    "5x?xf326x?xf32": 1,
    "5x?xf32": 1,
    "6x?xf32": 1,
    "i18xi328xi32": 1,
    "f323xf32i1": 1,
    "128xi8128xi8": 1,
    "1xi2": 2,
    "100xf32100xf32": 1,
    "index?xf32?xf32?xf32?xf32": 1,
    "i321xi32": 1,
    "8xf328xi328xf32": 1,
    "10xi32i3210xf32f32index": 1,
    "10x1xi3210x1xi3210x1xi32": 1,
    "10x1xi32": 1,
    "llvmptr1i32i32i32i32i32": 1,
    "quantanyi8": 1,
    "i8i16i32": 1,
    "i32i32i1": 4,
    "?x?x?xf32indexindexf32": 1,
    "1x3x4x1x5xf323x4x5xf32": 2,
    "1x3x4x1x5xf32": 2,
    "1x1x1x1x1x21x3xi11x1x1x1x1x21x3xi1": 1,
    "1x1x1x1x1x21x3xi1": 1,
    "100xf32100xf32100xf32": 1,
    "1x1xui161x1xi8": 1,
    "1x1xui16": 1,
    "2x2xf322x2xf322x2xf322x2xf32": 1,
    "8x7x6x5x4xf32": 2,
    "10xf3220xf32": 1,
    "20xf32": 1,
    "bf16f32": 1,
    "*xf32?xi32index": 2,
    "8x1x?x1xi327x1x5xi328x7x?x5xi32": 1,
    "8x1x?x1xi32": 1,
    "5x12xi32?x12xi32?x?xi32": 1,
    "5x12xi32": 1,
    "?x12xi32": 2,
    "indexi64i32i64i32": 1,
    "i32i64indexindexindexindex": 1,
    "i8i8": 2,
    "2x?xi12x?xf322x?xf322x?xf32": 1,
    "2x?xi1": 1,
    "1x?x?x32xi32": 2,
    "5x8xf325x8xf32": 1,
    "5x8xf32": 1,
    "?xi32indexindex": 4,
    "i32i16i32": 1,
    "*xf32indexindexindexindex": 4,
    "?x?x?x?xf32indexindexindexindex": 4,
    "?x10xf322x2x5xf32": 1,
    "?x10xf32": 1,
    "4x8xi328x4xi32": 1,
    "4x8xi32": 1,
    "*xf32indexindex": 1,
    "3x4xf32": 1,
    "testdtype1testdtype2i32": 2,
    "testdtype2i32": 2,
    "3x11x11x3xi48": 1,
    "?xf325xf326xf32": 1,
    "f32indexf32": 2,
    "10xf32f32index": 1,
    "1x2xf32indexindex": 1,
    "2x3x?x?xi1": 2,
    "2x52x3xf322x12x3xf322x52x3xf32": 1,
    "2x52x3xf32": 1,
    "2x12x3xf32": 1,
    "?x512x1x?xf32?x?xf32": 1,
    "?x512x1x?xf32": 1,
    "13x21x3xi321xi813x21x3xi32": 2,
    "13x21x3xf161x21x3xf16": 1,
    "13x21x3xf16": 2,
    "2x?xi32": 2,
    "1x8x8x8xi321x8x8x8xi321x8x8x8xi32": 2,
    "1x8x8x8xi32": 4,
    "6xi8?xi8": 1,
    "6xi8": 2,
    "1x1x1x1x1x1x64xi16513xi161x1x1x1x1x1x64xi32": 1,
    "1x1x1x1x1x1x64xi16": 1,
    "f64f32": 1,
    "3x11x11x3xi32": 1,
    "1x1x1x1x29x29x4xf321x1x1x1x29x4xi32": 1,
    "1x1x1x1x29x29x4xf32": 1,
    "spirvptri8UniformConstanti32i32i32": 1,
    "spirvptri8UniformConstant": 1,
    "3x600x1200xi32": 1,
    "testtest_tensor3264f64testtest_tensor32128f64": 1,
    "testtest_tensor3264f64": 1,
    "?x2xi8": 2,
    "1x2x3x4xi32": 2,
    "shapevalue_shapeshapevalue_shapeshapeshape": 2,
    "shapevalue_shape": 5,
    "testdtype1i64": 2,
    "f32f32f64f64f32f32f64f64": 1,
    "1x1x1x1x13x21x1xf321x1x1x1x13x21x3xf321x1x1x1x13x21x3xi1": 1,
    "4x4xf324x4xi1": 1,
    "f32indexindex?x3x?xf32": 1,
    "3x?xi32": 5,
    "1x1x1xi113x21x3xi113x21x3xi113x21x3xi1": 2,
    "?x?x?xf32index": 1,
    "1x1x1xf321x1x1xf321x1x1xf32": 1,
    "*xi32*xf32": 2,
    "13x21x3xf3213x21x3xbf16": 1,
    "2x16x32xf322x16x32xf32": 1,
    "i1i64i32i64": 1,
    "?x12xi32?x?xi32?x12xi32": 1,
    "13x21x3xbf1613x21x3xi32": 1,
    "f32i1i1i1i1": 1,
    "2x4xf32": 2,
    "testtest_tensor42f64": 1,
    "32x7xf3232x7xf3232x7xf32": 1,
    "32x7xf32": 3,
    "i1i1index": 1,
    "*xf321xi322xi32?xi32*xf32": 1,
    "f32index2x?xf32": 1,
    "?x1xi8?x1xi8": 1,
    "?x1xi8": 1,
    "10x10xf321xf32*xf32?xf32": 1,
    "i16i16": 2,
    "13x21x3xf32*xf3213x21x3xf32": 1,
    "8x4xf328x5xf328x9xf32": 1,
    "8x5xf32": 1,
    "indexindexindexi32f32": 2,
    "spirvstructa9spirvptrspirvstructb9spirvptrspirvstructa9UniformUniform": 1,
    "spirvptrspirvstructb9spirvptrspirvstructa9UniformUniform": 1,
    "spirvstructb9spirvptrspirvstructa9Uniform": 1,
    "spirvptrspirvstructa9Uniform": 1,
    "spirvstructa9": 1,
    "1x2xf322x2xf32": 1,
    "?x3x3x?xf326x6x?x?xf326x6x?x?xf32": 1,
    "?x3x3x?xf32": 1,
    "6x6x?x?xf32": 1,
    "123456x8192x8192xf32123456x8192x8192xf32123456x8192x8192xf32123456x8192x8192xf32": 1,
    "123456x8192x8192xf32": 2,
    "f32f32i1i1f32": 1,
    "2x1xf321x1xf322x1xf32": 1,
    "1x1xf32": 1,
    "128x256xf32128x256xf32128x256xf32": 1,
    "128x256xf32": 2,
    "*xi32i322x3xi32": 1,
    "13x21x3xf32*xi3213x21x3xf3213x21x3xf32": 1,
    "transformany_optransformany_optransformparami32": 1,
    "transformparami32": 1,
    "i64f32": 2,
    "f32f32i32": 2,
    "*xi8*xi8": 3,
    "*xi8": 2,
    "5x2x?xf32": 2,
    "8x1x6x1xi327x1x5xi328x7x6x5xi32": 1,
    "8x1x6x1xi32": 1,
    "2x2xi1f322xi12xi12xi1": 1,
    "2x2xi1": 1,
    "2xi1": 1,
    "f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32f32": 1,
    "emitclvaluei8": 2,
    "10x42xf32indexindexf32": 1,
    "13x21x3xf1613x21x3xf16": 1,
    "testtest_memref42f32": 2,
    "i32f64i32": 1,
    "index4xf32": 1,
    "13x21x3xf321xf321xf3213x21x3xf32": 2,
    "10x10xf321xf32*xf32?xf32i32": 1,
    "i64i64f32i64f32": 1,
    "10x20xf3210x20xf32": 1,
    "shapevalue_shapeshapeshape": 1,
    "?xi32?xi322xi32": 1,
    "index1x12xf32": 1,
    "1x8x8x8xf32": 2,
    "indexindexindexf32": 2,
    "13x21x3xbf1613x1x3xbf161xi813x21x3xbf16": 1,
    "3x600x1200xf32": 1,
    "13x26x3xbf1613x26xi3213x26x3xbf1613x26x3xbf16": 1,
    "13x26x3xbf16": 2,
    "2x64xi8513xi82x64xi8": 1,
    "2x64xi8": 1,
    "13x21x3xi1613x1x3xi1613x21x3xi16": 1,
    "llvmfunci64i64i64": 1,
    "5xf32f32": 2,
    "13x21x3xi813x1x3xi81xi813x21x3xi32": 1,
    "1x1x1x1x13x21x3xf321x1x1x1x13x1x3xf321x1x1x1x13x21x3xf32": 1,
    "i14xf324xf324xf32": 1,
    "2x3x4xi322x4x5xi32": 1,
    "4x6x16x32xi8?x?x16x32xi8": 1,
    "4x6x16x32xi8": 1,
    "indexindexindexindex5x?x?xf32": 1,
    "3x2xi326xf32": 1,
    "6xf32": 1,
    "1x1x1x1x13x21x3xi321x1x1x1x13x21x3xi16": 1,
    "3x4x5xi32?x?xi32?x?x?xi32": 1,
    "llvmstruct\"_Converted.foo\"i64": 1,
    "536870912xi32i32": 1,
    "5x?x4xf32": 2,
    "9xf32f32": 1,
    "9xf32": 1,
    "?x4x?xi323x?xi32?x?x5xi32": 1,
    "?x4x?xi32": 1,
    "5xi15xi325xi325xi32": 1,
    "5xi32": 2,
    "10x8xf32": 2,
    "1x1x8xf321x8x1xf32?x1x1xf32": 1,
    "1x1x8xf32": 1,
    "1x8x1xf32": 1,
    "1x1x1x?xi64?x?xi64": 1,
    "1x1x1x?xi64": 1,
    "13x27x3xi3213x26xi3213x26x3xi3213x27x3xi32": 1,
    "13x27x3xi32": 1,
    "13x26x3xi32": 1,
    "transformany_optransformparami64transformparami64": 1,
    "1x1x1x1x1x1x10xi321x1x1x1x1x1x10xi32": 1,
    "1x1x1x1x1x1x10xi32": 1,
    "index4x?xf32": 1,
    "llvmfunci1": 2,
    "f32i64f32": 1,
    "i16f16": 1,
    "*xf323xi32?x?x8xf32": 1,
    "3xi83xi8": 1,
    "3xi8": 1,
    "1xui81xui81xui81xui8": 1,
    "transformany_optransformparami64transformparami64transformparami64": 1,
    "6xi8512xi8": 1,
    "13x21x1xbf1613x21x3xbf1613x21x3xbf16": 1,
    "f32index?x?x?xf32": 1,
    "?xi32i1": 1,
    "536870912x21x3xf32536870912x26xi32536870912x26x3xf32": 1,
    "536870912x21x3xf32": 1,
    "536870912x26xi32": 1,
    "14x19xi814xi32": 1,
    "14x19xi8": 1,
    "2x3x1x5xi32": 1,
    "f32i64": 1,
    "1x13x13x5xf321x13x13xi64": 1,
    "1x13x13x5xf32": 1,
    "i32indexindexindexi32i32": 1,
    "1x1x1x1x13x21x1xi321x1x1x1x13x21x1xi32": 1,
    "1x1x1x1x13x21x1xi32": 1,
    "llvmfunci16": 1,
    "f324xf32index": 1,
    "spirvsampled_imagespirvimagef32Dim2DNoDepthNonArrayedSingleSampledNeedSamplerUnknown": 2,
    "spirvimagef32Dim2DNoDepthNonArrayedSingleSampledNeedSamplerUnknown": 3,
    "?xf32i1indexf32?xf32index": 1,
    "?xi16?xbf16": 1,
    "?xi16": 1,
    "5xi85xi8": 1,
    "5xi8": 1,
    "5xf325xi32": 1,
    "1x1x1x1x13x21x3xi11x1x1x1x1x21x3xi1": 1,
    "8xi32i32": 1,
    "?x?xi32?x8xi32": 1,
    "*xf324x4xf32?x?xf32": 1
  },
  "complexity_metrics": [
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 59,
      "total_blocks": 20,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 6,
      "total_ops": 146,
      "total_blocks": 95,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 23,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 20,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 12,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 64,
      "total_blocks": 14,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 19,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 15,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 18,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 40,
      "total_blocks": 11,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 22,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 35,
      "total_blocks": 10,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 15,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 22,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 4,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 75,
      "total_blocks": 26,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 26,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 16,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 31,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 16,
      "total_ops": 52,
      "total_blocks": 21,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 10,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 30,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 17,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 20,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 47,
      "total_blocks": 13,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 16,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 136,
      "total_blocks": 45,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 16,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 14,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 19,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 19,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 22,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 14,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 37,
      "total_blocks": 15,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 17,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 32,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 14,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 24,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 24,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 14,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 32,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 13,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 35,
      "total_blocks": 10,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 12,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 3,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 20,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 15,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 19,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 12,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 24,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 56,
      "total_blocks": 10,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 13,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 6,
      "total_ops": 14,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 6,
      "total_ops": 14,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 17,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 18,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 30,
      "total_blocks": 11,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 4,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 19,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 20,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 16,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 20,
      "total_blocks": 11,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 23,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 17,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 30,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 27,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 30,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 16,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 104,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 30,
      "total_blocks": 11,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 15,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 18,
      "total_blocks": 10,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 16,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 12,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 16,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 4,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 44,
      "total_blocks": 12,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 9,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 10,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 24,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 16,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 15,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 20,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 24,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 25,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 15,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 50,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 55,
      "total_blocks": 11,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 22,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 15,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 16,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 15,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 16,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 12,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 16,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 12,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 18,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 15,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 35,
      "total_blocks": 8,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 8,
      "total_ops": 22,
      "total_blocks": 14,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 10,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 38,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 15,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 13,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 14,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 53,
      "total_blocks": 20,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 39,
      "total_blocks": 15,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 6,
      "total_ops": 10,
      "total_blocks": 7,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 15,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 3,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 70,
      "total_blocks": 15,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 38,
      "total_blocks": 12,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 58,
      "total_blocks": 19,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 18,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 5,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 1,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 9,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 8,
      "total_ops": 34,
      "total_blocks": 14,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 22,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 13,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 11,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 1,
      "total_ops": 2,
      "total_blocks": 1,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 2,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 8,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 27,
      "total_blocks": 9,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 20,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 77,
      "total_blocks": 31,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 11,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 10,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 16,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 7,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 27,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 17,
      "total_blocks": 6,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 7,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 6,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 11,
      "total_blocks": 5,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 4,
      "total_ops": 7,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 5,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 32,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 3,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 3,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 4,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 3,
      "total_ops": 8,
      "total_blocks": 4,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 5,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 6,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 26,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    },
    {
      "region_depth": 2,
      "total_ops": 9,
      "total_blocks": 2,
      "ssa_values": 0,
      "functions": 0,
      "modules": 0
    }
  ],
  "structural_templates": [
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"base_test\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 45 : i32}> : () -> i32\n    %1 = \"arith.const..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10xf32>, f32) -> (), sym_name = \"memset_after_cast\"}> ({\n  ^bb0(%arg0: memref<10xf32>, %arg1: f32):\n    %0 = \"memref.cast\"(%arg0) : (mem..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> (), sym_name = \"test_0d_input\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xi8>}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"fold_add_size\"}> ({\n    %0 = \"shape.const_size\"() <{value = 2 : index}> : () -> !shape.size\n    %1 = \"shape.const..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg1: !transform.any_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!test.test_type) -> i32, sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> i32, sym_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"wrap_while_loop_in_zero_trip_check\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_add_rank_invalid\"}> ({\n  ^bb0(%arg0:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"simpleTest\"}> ({\n    \"test.simple\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (f32)>, linkage = #llvm.linkage<external>, sym_name = \"store_float_to_int\", unnamed_addr = 0 : i64, vis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_logical_not\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xi1>):\n    %0 = \"tosa.logical_not\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "cf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"unsupported_op\"}> ({\n  ^bb0(%arg0: i1):\n    \"cf.assert\"(%arg0) <{msg = \"assertion foo\"}> : (i1) -> ()\n    \"func.return\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.op_with_property_predicates\"() <{array = [], defaulted = 0 : i64, more_constrained = 4 : i64, non_empty_constrained = [6], non_empty_optional = [], non_empty_unconstraine..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10x10xf32>, tensor<1xf32>, memref<10x10xi32>, tensor<*xf32>) -> (), sym_name = \"succeededSameOperandShape\"}> ({\n  ^bb0(%arg0: tensor<10x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<13x26xi32>) -> tensor<13x26x3xbf16>, sym_name = \"test_gather\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"foo\"}> ({\n    \"gpu.func\"() <{arg_attrs = [{gpu.test_promote_workgroup}], function_type = (memref<5x4xf32>) -> ()}> ({\n    ^bb0(%arg0: memref<5x4xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedAllOfConstraint1\"}> ({\n    %0 = \"testd.all_of\"() : () -> i1\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %0 = \"smt.constant\"() <{value = true}> : () -> !smt.bool\n    %1 = \"smt.forall\"() <{boundVarNames = [\"a\", \"b\"], weight = 2 : i32}> ({\n    ^bb0(%arg22: !smt..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"remove_zero_iteration_loop\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : index}> : () -> index\n    %1 = \"arith.constant..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"complex_f64_success\"}> ({\n    %0 = \"test.complex_f64\"() : () -> complex<f64>\n    \"func.return\"() : () -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64, i64) -> (), sym_name = \"fpowi64\"}> ({\n  ^bb0(%arg0: f64, %arg1: i64):\n    %0 = \"math.fpowi\"(%arg0, %arg1) <{fastmath = #arith.fastmath<non..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x24x2xi32>, sym_name = \"do_not_fold_intdiv_division_by_0\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1x24x2xi32>}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1, i1, i1, f32, f32) -> f32, sym_name = \"deep_tree\"}> ({\n  ^bb0(%arg18: i1, %arg19: i1, %arg20: i1, %arg21: i1, %arg22: f32, %arg23: f32):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<268435456x21x3xf32>, tensor<268435456x26xi32>) -> tensor<268435456x26x3xf32>, sym_name = \"test_gather_tensor_size_invalid\"}> ({\n  ^bb0(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x?x5xi32>, tensor<?x6xi32>) -> (), sym_name = \"gather_minimum_info\"}> ({\n  ^bb0(%arg0: tensor<3x?x5xi32>, %arg1: tensor<?x6xi32>):\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (index, index), sym_name = \"matchingOperands\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0:2 = \"builtin.unrealized_conversi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x8x16xf32>) -> (tensor<13x8x9xf32>, tensor<13x8x9xf32>), sym_name = \"test_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<13x8x16xf32>):\n    %0:2 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{arg_attrs = [{spirv.decoration = #spirv.decoration<Restrict>}], function_control = #spirv.function_control<None>, function_type = (!spirv.ptr<i32, PhysicalStor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> tensor<2xi8>, sym_name = \"unsupportedRescaleInexactRound\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_invalid_result_materialization\"}> ({\n    %0 = \"test.type_producer\"() : () -> f16\n    \"foo.return\"(%0) : (f16) -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_add_test_exte..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_logical_right_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"rewrite_dynamic_op\"}> ({\n  ^bb0(%arg0: i32):\n    %0:2 = \"test.dynamic_one_operand_two_results\"(%arg0) : (i32) -> (i32, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, index, index) -> i32, sym_name = \"nested_loops\"}> ({\n  ^bb0(%arg0: index,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xi1>, tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_select\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xi1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> (), sym_name = \"fma\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.CL.fma\"(%arg0, %arg1, %arg2) : (f32, f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xui8>) -> tensor<1x1xi8>, sym_name = \"test_rescale_input_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1x1xui8>):\n    %0 = \"tosa.const\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"uplift_while\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"scf.while\"(%arg0) ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> (tensor<?x?x?xf32>, tensor<?x?x?xf32>), sym_name = \"test_dynamic_fft2d\"}> ({\n  ^bb0(%arg0: tensor<?x?x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>) -> index, sym_name = \"dim_unranked\"}> ({\n  ^bb0(%arg0: tensor<*xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedParametrizedVerifierWrongNumOfArgs\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.parametrized<i32>\n  }) : () -> ()\n}) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i64) -> (), sym_name = \"testMultOperandsMissingSegment\"}> ({\n  ^bb0(%arg0: i16, %arg1: i64):\n    \"testvar.var_and_opt_operand\"(%arg0, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x?x?xf32>) -> (), sym_name = \"test_reduce_float\"}> ({\n  ^bb0(%arg0: tensor<2x3x?x?xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"non_static_shape_rsqrt_op\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"math.rsqrt\"(%arg0) <{fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.any_value) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op, %arg1: !tran..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_split_block\"}> ({\n    \"test.op_with_region\"() ({\n      \"test.op_1\"() : () -> ()\n      \"test.split_block_here\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.single_no_terminator_op\"() ({\n    %2 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n  }) : () -> ()\n  \"test.variadic_no_terminator_op\"() ({\n    %1 = \"arith.constant..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededEqConstraint\"}> ({\n    %0 = \"testd.eq\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"llvm.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, index, index, index) -> i32, sym_name = \"fold_away_iter_and_result_with_no_use\"}> ({\n  ^bb0(%arg0: i32, %arg1: index, %arg2: index, %arg3:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequence..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x6x1xi32>, tensor<*xi32>) -> tensor<?x6x?xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<?x6x1xi32>, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"test_9_negative\"}> ({\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> {tag = \"zero\"} : () -> f32\n    %1 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.SpecConstant\"() <{default_value = -5 : i32, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"fdiv_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FDiv\"(%arg0, %arg0) : (f32, f32) -> f32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"foo\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n    }) : () -> ()\n  }) {sym.new_name ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<96x128xi8, 3>, memref<128xi8, 3>) -> (), sym_name = \"loop_unroll_and_jam_unsupported_dynamic_trip_count\", sym_visibility = \"private\"}> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<96x128xi8, 3>, memref<128xi8, 3>) -> (), sym_name = \"loop_unroll_and_jam_op\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg1: memref<96x12..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"group_non_uniform_logical_xor\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"spirv.GroupNonUniformLogicalXor\"(%arg0) <{execution_sco..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replacement_op_not_found_silenced\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.foo\"() {replace_with_new_op = \"test.bar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> i1, sym_name = \"complex_neq\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex.neq\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"fold_abs_abs\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.abs\"(%arg0) : (tensor<?x1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dummy",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (i1, i1), sym_name = \"scf_while_non_equiv_yield\"}> ({\n  ^bb0(%arg0: tensor<5xi1>, %arg1: tensor<5xi1>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, i32) -> tensor<3xi32>, sym_name = \"unknown_memory_space\"}> ({\n  ^bb0(%arg0: index, %arg1: i32):\n    %0 = \"arith.constant\"() <{value = de..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sub\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xf32>, %arg1: tensor<13x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"recursive_alloca\", unnamed_addr = 0 : i64, visibili..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"fold_div_index_neg_lhs\"}> ({\n    %0 = \"arith.constant\"() <{value = -10 : index}> : () -> index\n    %1 = \"arith.constant..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (si32, si32, si32) -> si32, sym_name = \"clamp_slessthan\"}> ({\n  ^bb0(%arg0: si32, %arg1: si32, %arg2: si32):\n    %0 = \"spirv.SLessThan\"(%arg1, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<1xf32>, f32, tensor<2xf32>, f32, tensor<3xf32>), res_attrs = [{}, {test.erase_this_result}, {}, {test.erase_this_result}, {}], sym..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<13x21x1xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>, sym_name = \"test_negate_non_const_zps\"}> ({\n  ^bb0(%arg0: tensor<1xf32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> (tensor<?x?xf32>, tensor<?x?xf32>), sym_name = \"cse_single_block_ops\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x5x4x?x7xf32>) -> (index, index), sym_name = \"dim_reshape_collapse\"}> ({\n  ^bb0(%arg0: tensor<2x3x5x4x?x7xf32>):\n    %0 = \"arith.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>, index) -> f32, sym_name = \"to_tensor_op_unsupported\"}> ({\n  ^bb0(%arg0: memref<?xf32>, %arg1: index):\n    %0 = \"bufferization.to..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i32, sym_name = \"liveChain\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i1\n    %1 = \"built..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xi8>, tensor<512xi8>) -> (), sym_name = \"table8_dyn\"}> ({\n  ^bb0(%arg0: tensor<?xi8>, %arg1: tensor<512xi8>):\n    %0 = \"tosa.table\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"pretty_printed_region_op_deferred_loc\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"test.pretty_printed_region\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<26x21x3xf32>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_cos\"}> ({\n    ^bb0(%arg0: f16, %arg1: f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (f32, f32, f32, f32), sym_name = \"test_mulf\"}> ({\n  ^bb0(%arg2: f32):\n    %3 = \"arith.constant\"() <{value = 1.000000e+00 : f32}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_move_op_before_rollback\"}> ({\n    \"test.one_region_op\"() ({\n      %0 = \"test.hoist_me\"() : () -> i32\n      \"test.vali..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"math_fpowi_even_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 2 : i64}> : () -> i64\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (i32)>, linkage = #llvm.linkage<external>, sym_name = \"store_int_to_float\", unnamed_addr = 0 : i64, vis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_tanh_nnan_ninf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.tanh\"(%arg0) <{fastmath ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x52x3xf32>, tensor<13x26xi32>, tensor<13x26x3xf32>) -> tensor<13x52x3xf32>, sym_name = \"test_scatter\"}> ({\n  ^bb0(%arg0: tensor<13x52x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "complex"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> complex<f32>, sym_name = \"complex_create\"}> ({\n  ^bb0(%arg11: f32, %arg12: f32):\n    %37 = \"complex.create\"(%arg11, %arg12) : (f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x?xi16>, tensor<513xi16>) -> (), sym_name = \"test_table_dynamic\"}> ({\n  ^bb0(%arg0: tensor<4x?xi16>, %arg1: tensor<513xi16>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"do_nothing\"}> ({\n  ^bb0(%arg2: !transform.any_op):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "nvvm",
        "scf",
        "gpu"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"module\"}> ({\n    \"gpu.func\"() <{function_type = () -> ()}> ({\n      %0 = \"nvvm.read.ptx.sreg.tid.x\"() <{range = #llvm.constant_range<i32, 0, 32>}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (), sym_name = \"rsqrt_double\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) -> f64..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededAnyOfConstraint\"}> ({\n    %0 = \"testd.anyof\"() : () -> i32\n    %1 = \"testd.anyof\"() : () -> i64\n    \"func.return\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x5x4xf32>) -> (), sym_name = \"reduce_float_dyn\"}> ({\n  ^bb0(%arg0: tensor<?x5x4xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis = 1 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>, tensor<1xf32>) -> tensor<?x1xf32>, sym_name = \"no_fold_negate_negate_non_const_zp\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_umax_reduce\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformUMax\"(%arg0) <{execution_scope ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (si32, si32, si32) -> si32, sym_name = \"clamp_slessthan\"}> ({\n  ^bb0(%arg0: si32, %arg1: si32, %arg2: si32):\n    %0 = \"spirv.SLessThan\"(%arg0, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.block_arg_num_mismatch\"() ({\n  ^bb0(%arg1: f32, %arg2: f32):\n    \"test.some_branching_op\"() : () -> ()\n  }) : () -> ()\n  \"test.block_arg_num_mismatch\"() ({\n  ^bb0(%arg0: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"remap_input_1_to_N\"}> ({\n  ^bb0(%arg0: f32):\n    \"test.return\"(%arg0) : (f32) -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"inline_regions\"}> ({\n    \"test.SingleBlockImplicitTerminator\"() ({\n      %0 = \"test.type_producer\"() : () -> i32\n      \"te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> tensor<?x3x?xf32>, sym_name = \"tensor.generate\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"tensor.generate\"(%arg0, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>, f32, i1) -> (tensor<?x?xf32>, tensor<?x?xf32>), sym_name = \"cse_single_block_ops_identical_bodies\"}> ({\n  ^bb..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i8, sym_name = \"arith_trunci\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.trunci\"(%arg0) <{overflowFlags = #arith.overflow<none>}> : (i32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, f32, index) -> (tensor<?xf32>, index), sym_name = \"dim_not_reading\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: f32, %arg2: index):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sign_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sign\"(%arg0) <{fastmath =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x7x3xf32>, tensor<4x4x3xf32>, tensor<?x?x?xf32>) -> (), sym_name = \"concat\"}> ({\n  ^bb0(%arg0: tensor<4x7x3xf32>, %arg1: tensor<4x4x3xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"memory_space_of_unknown_op\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"test.dummy_op\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"module_b\"}> ({\n    \"builtin.module\"() <{sym_name = \"module_c\"}> ({\n      \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>) -> tensor<4xi32>, sym_name = \"tensor_bitcast_chain_nop\"}> ({\n  ^bb0(%arg0: tensor<4xi32>):\n    %0 = \"tensor.bitcast\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x26xi32>) -> tensor<*xf32>, sym_name = \"unranked_gather\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<13..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> tensor<?xf32>, sym_name = \"test_abs_1d_cast_static_to_dynamic\"}> ({\n  ^bb0(%arg0: tensor<5xf32>):\n    %0 = \"tosa.abs\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.addf\"(%arg0, %arg0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x512x1x1xf32>) -> memref<?x?xf32>, sym_name = \"collapse_after_memref_cast_type_change\"}> ({\n  ^bb0(%arg0: memref<?x512x1x1xf32>):\n    %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xf32>) -> tensor<f32>, sym_name = \"tensor.collapse_shape_to_scalar\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xf32>):\n    %0 = \"tensor.collaps..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>, tensor<4xi32>) -> tensor<4xi1>, sym_name = \"broadcastDifferentResultType\"}> ({\n  ^bb0(%arg0: tensor<4xi32>, %arg1: tensor<4xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_xor\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedAttrsConstraint\"}> ({\n    \"testd.attrs\"() {attr1 = i64, attr2 = i64} : () -> ()\n    \"func.return\"() : () -> ()\n  }) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_tanh_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.tanh\"(%arg0) <{fastmath =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> (), sym_name = \"remap_input_1_to_0\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"correct_number_of_regions\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"shape.const_witness\"() <{passing = true}> : () -> !shape.witness\n    %1 = \"shape.assuming\"(%0) ({\n      ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> (), sym_name = \"remap_input_1_to_1\"}> ({\n  ^bb0(%arg1: i64):\n    \"test.invalid\"(%arg1) : (i64) -> ()\n  }) : () -> ()\n  \"func.func\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"TestCreateInvalidCallInPass\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_add_zero_rhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xi32>, tensor<2x4x5xi32>) -> (), sym_name = \"test_dynamic_lhs_matmul\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xi32>, %arg1: tensor<2x4x5xi32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f16) -> (f16, f16, f16), sym_name = \"test_subf\"}> ({\n  ^bb0(%arg0: f16):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f16}> : () -> f16..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x7x7xf32>) -> tensor<1x2x7x7xf32>, sym_name = \"single_concat\"}> ({\n  ^bb0(%arg0: tensor<1x1x7x7xf32>):\n    %0 = \"tosa.concat\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bounded_recursion\"}> ({\n    \"test.recursive_rewrite\"() <{depth = 3 : i64}> : () -> ()\n    \"func.return\"() : () -> ()\n  }) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x16x16xf32>, index) -> f32, sym_name = \"test_load\"}> ({\n  ^bb0(%arg1: memref<2x16x16xf32>, %arg2: index):\n    %1 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (i32, i32), sym_name = \"multiple_conversion_casts\"}> ({\n  ^bb0(%arg3: i32, %arg4: i32):\n    %2:2 = \"builtin.unrealized_conversion_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> tensor<1xi32>, sym_name = \"test_error_i32_unsigned_output\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.const\"() <{values ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f64) -> (), sym_name = \"fptosi\"}> ({\n  ^bb0(%arg0: f32, %arg1: f64):\n    %0 = \"arith.fptosi\"(%arg0) : (f32) -> i32\n    %1 = \"arith.fptosi\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 (i8)>, linkage = #llvm.linkage<external>, sym_name = \"memset_float\", unnamed_addr = 0 : i64, visibility..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_bitwise_xor\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformBitwiseXor\"(%arg0) <{execution_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    \"foo\"() : () -> ()\n    \"test.two_region_op\"() ({\n      \"work\"() : () -> ()\n    }, {\n      \"work\"() : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>, tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_bitwise_or_rank_invalid\"}> ({\n  ^bb0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"sinh\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.sinh\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"dynamic_dims_are_different\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_intdiv\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64, i32) -> (), sym_name = \"fpowi32\"}> ({\n  ^bb0(%arg0: f64, %arg1: i32):\n    %0 = \"math.fpowi\"(%arg0, %arg1) <{fastmath = #arith.fastmath<non..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_invariants_in_graph_region\"}> ({\n    \"test.single_no_terminator_op\"() ({\n      \"test.graph_loop\"() ({\n        %0 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xf32>, tensor<10xf32>), sym_name = \"unknown_op_copy\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<*xi32>, sym_name = \"while_dont_crash_nested\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.add\"(%arg0, %arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x1xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6], [7, 8, 9]]> : tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"graph_region_with_cycle\"}> ({\n    \"test.isolated_graph_region\"() ({\n      %0 = \"slicing-test-op\"(%1) : (i1) -> i1\n      %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"arith_bitwise_bool\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"arith.andi\"(%arg0, %arg1) : (i1, i1) -> i1\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_sub_zero_rhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<0.000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "builtin",
        "transform"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x4xf32>, tensor<?x?xf32>) -> tensor<?x?xf32>, sym_name = \"decompose_dynamic_concat\"}> ({\n  ^bb0(%arg9: tensor<8x4xf32>, %arg10: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"simple1\"}> ({\n    %3 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_arithmetic_right_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_equal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"dead_private_function\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_na..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32>, sym_name = \"select\"}> ({\n  ^bb0(%arg0: tensor<i1>, %arg1: tensor<i32>, %arg2: tensor<i32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"max.oneval\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"affine.max\"(%arg0) <{map = #map..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x8x8xf32>, tensor<1x2x4x8xf32>) -> tensor<1x4x8x8xf32>, sym_name = \"partially_foldable\"}> ({\n  ^bb0(%arg0: tensor<1x1x8x8xf32>, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_peel_first_iter_op\"}> ({\n    %3 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %4 = \"arith.constant\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x?xf32>) -> (), sym_name = \"memref_cast_mixed_to_static\"}> ({\n  ^bb0(%arg0: memref<42x?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x1x1xf32>, tensor<1x1x1x1x1x1x1x1xf32>, tensor<1x1x1x1x1x1x1x1xi1>) -> tensor<1x1x1x1x1x1x1x1xf32>, sym_name = \"test_cond_if_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"return_i32\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<1xi32>, sym_name = \"argmax_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_reduce_all\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.reduce_all\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xui8>) -> tensor<1x1xi8>, sym_name = \"test_rescale_input_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1x1xui8>):\n    %0 = \"tosa.const\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_div\"}> ({\n  ^bb0(%arg2: complex<f32>, %arg3: complex<f32>):\n    %1 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"while_cmp_lhs\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"scf.while\"() ({\n      %3 = \"test.val\"() : () -> i32\n      %4 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_non_tosa_ops\"}> ({\n    %0 = \"arith.constant\"() <{value = 6 : index}> : () -> index\n    %1 = \"tensor.empty\"(%0) : (ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_cos_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.cos\"(%arg0) <{fastmath = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_licm_invalid\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"transform.named_sequence\"() <{function_type = (!..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedConstraintVars\"}> ({\n    %0:2 = \"testd.constraint_vars\"() : () -> (i64, i32)\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i32, sym_name = \"private_callee\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg1: f32):\n    %1 = \"arith.constant\"() <{value = 0 : i32}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"remove_all_ops\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.illegal_op_a\"() : () -> i32\n    \"func.return\"(%0) : (i32) -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_div\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"check_poison\"}> ({\n    %0 = \"ub.poison\"() <{value = #ub.poison}> : () -> index\n    %1 = \"ub.poison\"() <{value = #ub.poison..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = 1.500000e+00 : f32}> : () -> f32\n    \"func.return\"() : () -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"func.func\"() <{function_type = () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.match_anchor_1\"() ({\n    %3 = \"test.match_anchor_2\"() : () -> i32\n    \"test.region_terminator\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"int\"}> ({\n  ^bb0(%arg1: i32):\n    \"func.return\"(%arg1) : (i32) -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> f32, sym_name = \"f0\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_greater\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_integer_ops_signed_nsw\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.addi\"(%arg0, %arg1) <{overflowF..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_add_zero_lhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<0.000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x1xf32>, tensor<2x2xf32>) -> (), sym_name = \"test_concat_axis_1\"}> ({\n  ^bb0(%arg0: tensor<2x1xf32>, %arg1: tensor<2x2xf32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xui8>) -> (), sym_name = \"test_const_ui8\"}> ({\n  ^bb0(%arg0: tensor<1xui8>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xui8..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"op\"() : () -> i32\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "tensor",
        "test",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"make_isolated_from_above_single_block\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.constant\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<f32, StorageBuffer>, f32) -> f32, sym_name = \"atomic_fadd\"}> ({\n  ^bb0(%arg0: !spirv.ptr<f32, StorageBuffer>, %arg1: f32):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i1, sym_name = \"group_non_uniform_all_equal\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.GroupNonUniformAllEqual\"(%arg0) <{execution_scope..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"trigonometrics\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.sin\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_exp\"}> ({\n    ^bb0(%arg0: f16, %arg1: f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"kill\"}> ({\n    \"spirv.Kill\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"dynamic_dims_are_equal\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_reciprocal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.reciprocal..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_add\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_single_iteration_loop_non_unit_step\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : index}> : () -> index\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"hoist_from_scf_while\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"scf.while\"(%arg1) ({\n    ^bb0(%arg3: i32):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"no_block_func_declaration\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>) -> tensor<13x21x1xi32>, sym_name = \"test_bitwise_not\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>):\n    %0 = \"tosa.bitwise_not\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_intdiv\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f64>) -> (complex<f32>, complex<f64>), sym_name = \"cpow_caller\"}> ({\n  ^bb0(%arg18: complex<f32>, %arg19: complex<f64>):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.match_anchor_1\"() ({\n  ^bb0(%arg1: f32):\n    \"test.match_anchor_2\"() : () -> ()\n    \"test.region_terminator\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"tra..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"rsqrt\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"multi_level_mapping\"}> ({\n    %2 = \"test.type_producer\"() : () -> i32\n    \"test.type_consumer\"(%2) : (i32) -> ()\n    \"test..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> tensor<5xf32>, sym_name = \"outer_func\"}> ({\n  ^bb0(%arg1: tensor<5xf32>):\n    \"func.return\"(%arg1) : (tensor<5xf32>) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"complex_f64_tensor_success\"}> ({\n    %0 = \"test.complex_f64_tensor\"() : () -> tensor<complex<f64>>\n    \"func.return\"() : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"arith_extsi\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.extsi\"(%arg0) : (i32) -> i64\n    \"func.return\"() : () -> ()\n  }) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "math",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"by_operand_type\"}> ({\n    %4 = \"arith.constant\"() <{value = 2.000000e+00 : f32}> : () -> f32\n    %5 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10x42xf32>) -> (), sym_name = \"memref_cast_static_to_mixed\"}> ({\n  ^bb0(%arg0: memref<10x42xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?x7x?xf32>) -> index, sym_name = \"out_of_bound_dim_of_collapse_shape\"}> ({\n  ^bb0(%arg0: tensor<?x?x?x7x?xf32>):\n    %0 = \"arith.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_log\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.log\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "tensor",
        "scf",
        "affine",
        "dummy",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (-d0 + s0)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"make_empty_loop_independent\"}> ({\n  ^bb0(%arg1: index, %arg2:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16)>\n#map1 = affine_map<()[s0] -> (s0 * 4)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (index, index), sym_name = \"canonicalize_single_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"cttz\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"math.cttz\"(%arg0) : (i32) -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_move_op_before\"}> ({\n    \"test.op_with_region\"() ({\n      \"test.move_before_parent_op\"() : () -> ()\n      \"test.dummy..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_unroll_and_jam_op\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %3 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_tanh_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x1x1xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<42> : tensor<1x1x1xi32>}> : () -> tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi16>) -> tensor<13x21x3xi8>, sym_name = \"test_cast_i16_i8\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi16>):\n    %0 = \"tosa.cast\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"minimum_nan_ignore\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_oeq\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape, !shape.shape) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape, %arg2: !shape.shape):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> tensor<5xf32>, sym_name = \"foo\"}> ({\n  ^bb0(%arg1: tensor<5xf32>):\n    %1 = \"func.call\"(%arg1) <{callee = @bar}> : (tensor<5x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x5xi8>, tensor<513xi8>) -> (), sym_name = \"test_table\"}> ({\n  ^bb0(%arg0: tensor<4x5xi8>, %arg1: tensor<513xi8>):\n    %0 = \"tosa.table\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x3xf32>, tensor<?x3xf32>) -> (), sym_name = \"concat_axis_dyn\"}> ({\n  ^bb0(%arg0: tensor<?x3xf32>, %arg1: tensor<?x3xf32>):\n    %0 = \"to..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi32>) -> tensor<2xi32>, sym_name = \"tensor_and\"}> ({\n  ^bb0(%arg0: tensor<2xi32>):\n    %0 = \"arith.constant\"() <{value = dense<-1> : t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"test.match_anchor_1\"() ({\n    \"test.match_anchor_2\"() : () -> ()\n    \"test.region_terminator\"() : () -> ()\n  }) : () -> i32\n  \"builtin.module\"() ({\n    \"transform.named_s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"aap\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"kat\"}> ({..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"invalid_pattern_application_to_transform_ir\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<26x21x3xf32>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi32>, tensor<2xf32>, memref<3xi32>, tensor<1x2xf32>, tensor<*xi32>) -> (), sym_name = \"same_rank_if_known_success\"}> ({\n  ^bb0(%arg0: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = -1 : index}> : () -> index\n    %1 = \"test.with_bounds\"() <{smax = 9223372..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i32>, sym_name = \"no_fold_mul_result_exceeds_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<23661> : tensor<i32>}> : () -> tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() {interrupt_before_all = true} : () -> f32\n    %1 = \"arith.addf\"(%0, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "rocdl",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 (f32)>, linkage = #llvm.linkage<external>, sym_name = \"rocdl.permlanex16\", unnamed_addr = 0 : i64, visi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>) -> tensor<4xf32>, sym_name = \"clamp_f32_is_noop\"}> ({\n  ^bb0(%arg0: tensor<4xf32>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 0x7..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_neg\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.neg\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_negate\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.const\"() <{values..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"undo_child_created_before_parent\"}> ({\n    \"test.illegal_op_with_region_anchor\"() : () -> ()\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"emitc.add\"(%arg0, %arg1) : (i32, i32) -> i32\n    \"func.return..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_sub\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xi32>, %arg1: tensor<13x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    %1 = \"arith.constant\"() <{value = dense<[[[[-3.905800e+00, 0.907199978], [-2.947000e+00, -2.205500e+00], [1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi32>) -> tensor<4xf32>, sym_name = \"fold_reshape_constant_splat\"}> ({\n  ^bb0(%arg0: tensor<1xi32>):\n    %0 = \"arith.constant\"() <{valu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, f32) -> tensor<?xf32>, sym_name = \"simple_tensor_test\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: f32):\n    %0 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"func\"}> ({\n    %1 = \"ub.poison\"() <{value = #ub.poison}> : () -> i32\n    \"func.return\"(%1) : (i32) -> ()\n  }) : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.any_op, !transform.param<i64>) -> (), sym_name = \"__transform_main\"}> ({..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> tensor<*xf32>, sym_name = \"unranked_ceil_op\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"math.ceil\"(%arg0) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x?xf32>, tensor<?x5xf32>) -> (index, index, index, index, index), sym_name = \"result_shape\"}> ({\n  ^bb0(%arg0: tensor<2x3x?xf32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i8>, tensor<1xi32>, tensor<?x?xf32>) -> (), sym_name = \"ranked_tensor_success\"}> ({\n  ^bb0(%arg0: tensor<i8>, %arg1: tensor<1xi32>, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (i32, i1), sym_name = \"replace_if_with_cond1\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_ceil\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.ceil\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_valid_result_legalization\"}> ({\n    %0 = \"test.type_producer\"() : () -> f32\n    \"foo.return\"(%0) : (f32) -> ()\n  }) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_oge\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"int_attrs_pass\"}> ({\n    \"test.i8_attr\"() {attr_00 = -1 : i8, attr_01 = -1 : i16, attr_02 = -1 : i32, attr_03 = -1 : i64} ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xi32>, tensor<?x?xi32>, tensor<3x6x5xi32>) -> (), sym_name = \"scatter_static_input\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xi32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x3xi32>, sym_name = \"reduce_sum_constant_aggressive\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1> : tensor<2x2x3xi32>}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_remap_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_greater\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() ({\n      \"bar\"() : () -> ()\n    }) {interrupt_after_all = true} : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"emit_vertex\"}> ({\n    \"spirv.EmitVertex\"() : () -> ()\n    \"spirv.Return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{fu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> (), sym_name = \"combineIfsNot\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"foo\"}> ({\n  ^bb0(%arg1: tensor<?xf32>):\n    \"func.return\"(%arg1) : (tensor<?xf32>) -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"or_basic\", unnamed_addr = 0 : i64, visibility_ = 0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"group_non_uniform_elect\"}> ({\n    %0 = \"spirv.GroupNonUniformElect\"() <{execution_scope = #spirv.scope<Workgroup>}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_bitwise\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.andi\"(%arg0, %arg1) : (i32, i32) -> i32\n    %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32, i32, i32), sym_name = \"simple_arith.floordivsi\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<36xi32>, tensor<1x2xf32>, tensor<f32>) -> (), sym_name = \"same_element_count_success\"}> ({\n  ^bb0(%arg0: tensor<36xi32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64, f64) -> f64, sym_name = \"powf_func\"}> ({\n  ^bb0(%arg8: f64, %arg9: f64):\n    %16 = \"math.powf\"(%arg8, %arg9) <{fastmath = #arith.fastmath<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<1x21x3xf32>, sym_name = \"test_reduce_sum\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reduce_sum\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testSingleResult\"}> ({\n    %0 = \"testvar.single_result\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32):\n    \"emitc.call_opaque\"(%arg0) <{callee = \"bar\"}> : (i32) -> ()\n    \"func.return\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "omp"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"omp.critical.declare\"() <{hint = 10 : i64, sym_name = \"mutex\"}> : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"critical_declare\"}> ({\n    \"omp.critical\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedParametrizedVerifierWrongArgument\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.parametrized<i32, i1>\n  }) : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"nested_module\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"func_a\"}> ({\n      \"func.return\"() : () -> ()\n    }) : () -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"one_3d_nest\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value = 1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi4>) -> tensor<13x21x3xi4>, sym_name = \"test_identity\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi4>):\n    %0 = \"tosa.identity\"(%arg0) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.type1<i32>) -> (), sym_name = \"type1_no_references\"}> ({\n  ^bb0(%arg0: !testd.type1<i32>):\n    \"func.return\"() : () -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> (), sym_name = \"construct_ranked_memref_descriptor\"}> ({\n  ^bb0(%arg0: !llvm.ptr, %arg1: !llv..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_atan2\"}> ({\n    ^bb0(%arg0: f16, %arg1: f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x3x2xi32>, tensor<?xi32>) -> tensor<4x3x2xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<4x3x2xi32>, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "dialect"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0:4 = \"dialect.op1\"() : () -> (i1, i16, i32, i64)\n  \"dialect.op2\"(%0#0, %0#2) : (i1, i32) -> ()\n  \"dialect.op3\"() ({\n  ^bb0(%arg0: i1):\n    \"dialect.innerop1\"(%arg0, %0#2) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"ctpop\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"math.ctpop\"(%arg0) : (i32) -> i32\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x4x5xi32>, tensor<?x?xi32>) -> (), sym_name = \"gather_dynamic_indices\"}> ({\n  ^bb0(%arg0: tensor<3x4x5xi32>, %arg1: tensor<?x?xi32>):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, i32, i32, f64) -> (), sym_name = \"ops\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: i32, %arg3: i32, %arg4: f64):\n    %0 = \"math.exp\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x260000000x3xf32>, tensor<13x260000000xi32>, tensor<13x260000000x3xf32>) -> tensor<13x260000000x3xf32>, sym_name = \"test_scatter_tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<42xf32>) -> memref<42xf32>, sym_name = \"builtin_ranked\"}> ({\n  ^bb0(%arg0: tensor<42xf32>):\n    %0 = \"bufferization.to_buffer\"(%arg0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xf32>, sym_name = \"splat_fold\"}> ({\n    %0 = \"arith.constant\"() <{value = 1.000000e+00 : f32}> : () -> f32\n    %1 = \"tensor.splat\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"abar\"}> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> i32, sym_name = \"combineIfs2\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    \"scf.if\"(%arg0) ({\n      \"test.firstCodeTrue\"() : () -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_any_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_any\"(%arg0) <{axis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi16>, tensor<13x1x3xi16>, tensor<1xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi16>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"no_loop_single_block\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_index\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.index_cast\"(%arg0) : (i32) -> index\n    %1 = \"ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi1>, tensor<2x3xi32>, tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"select_not_pred\"}> ({\n  ^bb0(%arg0: tensor<2x3xi1>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "produce",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"unused_assuming_results\"}> ({\n    %0 = \"test.source\"() : () -> !shape.witness\n    %1:2 = \"shape.assuming\"(%0) ({\n      %2 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>) -> (), sym_name = \"unranked_dealloc\"}> ({\n  ^bb0(%arg0: memref<*xf32>):\n    \"memref.dealloc\"(%arg0) : (memref<*xf32>) -> ()\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>, tensor<?x1xf32>, tensor<?x1xf32>) -> (), sym_name = \"concat_axis_dyn_mixed\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc",
        "scf",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, f32) -> (), sym_name = \"test_if\"}> ({\n  ^bb0(%arg4: i1, %arg5: f32):\n    \"scf.if\"(%arg4) ({\n      %8 = \"emitc.call_opaque\"(%arg5) <{callee ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.symbol\"() <{sym_name = \"foo_3\", sym_visibility = \"nested\"}> : () -> ()\n  \"test.symbol\"() <{sym_name = \"foo_4\", sym_visibility = \"private\"}> : () -> ()\n  \"test.symbol\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, index) -> tensor<?xf32>, sym_name = \"materialize_in_destination\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: index):\n    %0 = \"tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{function_control = #spirv.function_control<None>, function_type = (i32) -> i32, sym_name = \"group_reduce_iadd\"}> ({\n  ^bb0(%arg24: i32):\n    %24 = \"spirv.Group..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x1xi1>, sym_name = \"reduce_any_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[true, false, false], [false, false, false..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x1x3xi1>, tensor<1x1x1x1x13x21x3xi1>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_logical_xor_rank_invalid\"}> ({\n  ^bb0(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<13x21x3xi8>, sym_name = \"test_cast_i1_i8\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.cast\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"get_consumer_fail_1\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %2 = \"arith.muli\"(%arg1, %arg2) <{overflowFl..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.cstr_broadcastable\"(%arg0, %arg0) : (!shape.shape, !shape..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xf32>, tensor<2xf32>) -> tensor<2xf32>, sym_name = \"main\"}> ({\n  ^bb0(%arg0: tensor<2xf32>, %arg1: tensor<2xf32>):\n    %0 = \"tosa.add\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f64 ()>, linkage = #llvm.linkage<external>, sym_name = \"impossible_load\", unnamed_addr = 0 : i64, visibilit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "xla"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>, sym_name = \"main\"}> ({\n  ^bb0(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>):\n    %0 = \"arith.addf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedDynAttrBaseConstraintNotType\"}> ({\n    \"testd.named_attr_base\"() {attr1 = i32} : () -> ()\n    \"func.return\"() : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"nested_tuple_multi_level_success\"}> ({\n    %0 = \"test.nested_tuple_32_bit\"() : () -> tuple<i32, tuple<i32, tuple<i32>>>\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"create_unregistered_op_in_pattern\"}> ({\n    %0 = \"test.illegal_op_g\"() : () -> i32\n    \"test.return\"(%0) : (i32) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.shape, sym_name = \"min_same_arg\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.min\"(%arg0, %arg0) : (!shape.shape, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32), sym_name = \"simple_divi_signed\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"arith.constant..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>, tensor<2xi8>) -> (), sym_name = \"test_unary_i32\"}> ({\n  ^bb0(%arg0: tensor<4xi32>, %arg1: tensor<2xi8>):\n    %0 = \"tosa.abs\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<1x21x3xi8>, sym_name = \"test_reduce_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.reduce_max\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x5x3xi8>, tensor<1x3x6xi8>) -> tensor<1x5x6xi32>, sym_name = \"matmul_quantized\"}> ({\n  ^bb0(%arg0: tensor<1x5x3xi8>, %arg1: tensor<1x3x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"fail_to_convert_illegal_op\"}> ({\n    %0 = \"test.illegal_op_f\"() : () -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"remap_moved_region_args\"}> ({\n    \"test.region\"() ({\n    ^bb0(%arg0: i64, %arg1: i16, %arg2: i64, %arg3: f32):\n      \"test..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "async"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!async.token) -> (), sym_name = \"consume_token\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (!async.toke..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> (), sym_name = \"sclamp\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    %0 = \"spirv.GL.SClamp\"(%arg0, %arg1, %arg2) : (i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> (), sym_name = \"atan2\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"spirv.CL.atan2\"(%arg0, %arg1) : (f32, f32) -> f32\n    \"func...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"cstr_require_fold\"}> ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 = \"shape.cstr_require\"(%0) <{msg = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xi32>) -> tensor<1x1x1x1x1x1x1xi32>, sym_name = \"test_const\"}> ({\n  ^bb0(%arg0: tensor<1x1xi32>):\n    %0 = \"tosa.const\"() <{values = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x3x?x4xf32>) -> (), sym_name = \"self_copy\"}> ({\n  ^bb0(%arg0: memref<2x3x?x4xf32>):\n    \"memref.copy\"(%arg0, %arg0) : (memref<2x3x?x4xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ueq\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<*xf32>, sym_name = \"test_mul_scalar_with_unranked_output\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "live"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (i32, i32), sym_name = \"callable\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg0: i32):\n    %2 = \"arith.constant\"() <{value = 1 : i32}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf64>, memref<?x?xf64>) -> memref<?x?xf64>, sym_name = \"dealloc_existing_clones\"}> ({\n  ^bb0(%arg0: memref<?x?xf64>, %arg1: memref<?x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_expm1\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.expm1\"(%arg0) <{fastmath = #arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> complex<f32>, sym_name = \"complex_const\"}> ({\n    %0 = \"complex.constant\"() <{value = [0x7FC00000 : f32, 0.000000e+00 : f32]}> : () -> com..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sigmoid\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sigmoid\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"round\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.round\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededAttrs\"}> ({\n    \"testd.attrs\"() {attr1 = i32, attr2 = i64} : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"add_to_worklist_after_inplace_update\"}> ({\n    \"test.any_attr_of_i32_str\"() <{attr = 0 : i32}> : () -> ()\n    \"func.return..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> complex<f32>, sym_name = \"create_complex\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"complex.create\"(%arg0, %arg1) : (f32, f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_one_join\"}> ({\n    \"test.foo\"() {tag = \"a\"} : () -> ()\n    \"test.foo\"() {foo = 1 : ui64, tag = \"b\"} : () -> ()\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xi8>, sym_name = \"test_cast_bf16_i8\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.cast\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"tanh\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.tanh\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"fu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xi8>) -> tensor<1x1xui8>, sym_name = \"test_rescale_output_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1x1xi8>):\n    %0 = \"tosa.const\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"fold_mul_mixed\"}> ({\n    %0 = \"shape.const_size\"() <{value = 2 : index}> : () -> !shape.size\n    %1 = \"arith.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x16384x16xf32>) -> (tensor<13x16384x9xf32>, tensor<13x16384x9xf32>), sym_name = \"test_rfft2d_input_h\"}> ({\n  ^bb0(%arg0: tensor<13x163..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_custom_tensor_list_size_results\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xi32>}> : () -> tensor<1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> bf16, sym_name = \"convert_s32_to_bf16_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.ConvertSToF\"(%arg0) : (i32) -> bf16\n    \"spirv.R..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"sdiv_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.SDiv\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"private_1\", sym_visibility = \"private\"}> ({\n    %1 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %2 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x5x?xf32>, tensor<1x?x6xf32>) -> tensor<1x5x6xf32>, sym_name = \"matmul_dyn_independent_dim\"}> ({\n  ^bb0(%arg0: tensor<1x5x?xf32>, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_div_one_rhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<1> : t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.image<f32, Dim1D, NoDepth, NonArrayed, SingleSampled, SamplerUnknown, Unknown>) -> (), sym_name = \"image_parameters_1D\", sym_visibility ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.versionedA\"() <{dims = 123 : i64, modifier = false}> : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>, index, f32) -> tensor<5xf32>, sym_name = \"tensor.insert\"}> ({\n  ^bb0(%arg0: tensor<5xf32>, %arg1: index, %arg2: f32):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"udiv_x_1\"}> ({\n  ^bb0(%arg0: i32):\n    %10 = \"spirv.Constant\"() <{value = 1 : i32}> : () -> i32\n    %11 = \"spirv.UDiv\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{function_control = #spirv.function_control<None>, function_type = (i16) -> (), sym_name = \"bf16_to_f32\"}> ({\n  ^bb0(%arg0: i16):\n    %0 = \"spirv.INTEL.ConvertB..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"no_vector_type\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.cos\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>, tensor<13x1x3xi8>, tensor<1xi8>) -> tensor<13x21x3xi16>, sym_name = \"test_mul_non_const\"}> ({\n  ^bb0(%arg0: tensor<13x21x3x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> bf16, sym_name = \"truncf_f32\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.truncf\"(%arg0) : (f32) -> bf16\n    \"func.return\"(%0) : (bf16) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<14x19xf32>) -> tensor<14xi32>, sym_name = \"test_argmax\"}> ({\n  ^bb0(%arg0: tensor<14x19xf32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x1xi1>, tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_select_ran..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_one\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"func_empty\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_false_if_with_values\"}> ({\n    %0 = \"arith.constant\"() <{value = false}> : () -> i1\n    %1 = \"scf.if\"(%0) ({\n     ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10xi32>) -> tensor<10xi1>, sym_name = \"fold_eq_i32\"}> ({\n  ^bb0(%arg0: tensor<10xi32>):\n    %0 = \"tosa.equal\"(%arg0, %arg0) : (tensor<10..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_for_siblings\"}> ({\n    %4 = \"emitc.literal\"() <{value = \"0\"}> : () -> index\n    %5 = \"emitc.literal\"() <{value = \"10\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"fold_trunci\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.extui\"(%arg0) : (i1) -> i8\n    %1 = \"arith.trunci\"(%0) <{overflowFl..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_clamp_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"loop_unroll_static_yield_value_defined_above\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 42 : i32}>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> index, sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n    %0 = \"shape.cstr_eq\"(%arg0, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> (), sym_name = \"combineIfsNot2\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.shape, sym_name = \"broadcast_on_same_shape\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.broadcast\"(%arg0, %arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, i1) -> (), sym_name = \"index_cast\"}> ({\n  ^bb0(%arg0: index, %arg1: i1):\n    %0 = \"arith.index_cast\"(%arg0) : (index) -> i1\n    %1 = \"ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "nvvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"cp_async_bulk_commit\"}> ({\n    \"nvvm.cp.async.bulk.commit.group\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32x128xi4, 1>, memref<32x128xi4>) -> (), sym_name = \"memref_copy_i4\"}> ({\n  ^bb0(%arg0: memref<32x128xi4, 1>, %arg1: memref<32x128xi4>):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "nvvm",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 (i32, i32, i32, i8, i1, i8)>, linkage = #llvm.linkage<external>, sym_name = \"tcgen05_mma_smem_desc_test..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x?xf32>, index, index, f32) -> (), sym_name = \"mixed_store\"}> ({\n  ^bb0(%arg0: memref<42x?xf32>, %arg1: index, %arg2: index, %arg3: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "live"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"public_module\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"nested_function\", sym_visibility = \"nested\"}> ({\n    }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"exp2f_func\"}> ({\n  ^bb0(%arg1: f64):\n    %1 = \"math.exp2\"(%arg1) <{fastmath = #arith.fastmath<none>}> : (f64) -> f64\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x1x3xf32>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_equal_rank_invalid\"}> ({\n  ^bb0(%arg0:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"floordivsi\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.floordivsi\"(%arg0, %arg1) : (i32, i32) -> i32\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x1xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6], [7, 8, 9]]> : tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> (), sym_name = \"atan2_fmf\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"math.atan2\"(%arg0, %arg1) <{fastmath = #arith.fastmath<f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_fabs\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"fold_div_index_neg_rhs\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"shape.div\"(%0, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"no_overflow_on_test_verifiers_op\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    \"test.verifiers\"(%0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, index) -> (), sym_name = \"dim_all_positive\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: index):\n    %0 = \"arith.constant\"() <{value..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"arith.constant\"() <{value = 0 : i64}> : () -> i64\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_sigmoid\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.sigmoid\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi32>, tensor<2xf32>, memref<3xi32>, tensor<1x2xf32>, tensor<1x2xi32>) -> (), sym_name = \"same_rank_success\"}> ({\n  ^bb0(%arg0: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"cmpOfExtSI\"}> ({\n  ^bb0(%arg1: i1):\n    %3 = \"arith.extsi\"(%arg1) : (i1) -> i64\n    %4 = \"arith.constant\"() <{value = 0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"xorxor0\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.xori\"(%arg0, %arg1) : (i32, i32) -> i32\n    %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>) -> tensor<*xi32>, sym_name = \"from_unranked_to_unranked\"}> ({\n  ^bb0(%arg0: tensor<*xi32>):\n    %0 = \"tensor.cast\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8xf32>) -> tensor<8xf32>, sym_name = \"math_fpowi_neg_even_power\"}> ({\n  ^bb0(%arg0: tensor<8xf32>):\n    %0 = \"arith.constant\"() <{value ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedDynParamsConstraintParam\"}> ({\n    %0 = \"testd.dynparams\"() : () -> !testd.parametric<i1>\n    \"func.return\"() : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ult\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_inline_block_before\"}> ({\n    \"test.inline_blocks_into_parent\"() ({\n      \"test.op_1\"() : () -> ()\n      \"test.op_2\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<14x19xbf16>) -> tensor<14xi32>, sym_name = \"test_argmax\"}> ({\n  ^bb0(%arg0: tensor<14x19xbf16>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> !shape.witness, sym_name = \"cstr_broadcastable_on_duplicate_shapes\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !sha..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"bitcastSameType\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.bitcast\"(%arg0) : (f32) -> f32\n    \"func.return\"(%0) : (f32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<3x?xf32>, index) -> index, sym_name = \"memref_dim_with_dyn_index\"}> ({\n  ^bb0(%arg0: memref<3x?xf32>, %arg1: index):\n    %0 = \"memref.di..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"const_index_to_size_to_index\"}> ({\n    %0 = \"arith.constant\"() <{value = 123 : index}> : () -> index\n    %1 = \"shape.in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x1xf32>, tensor<1xi32>) -> (), sym_name = \"test_while_tensor_list_size\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x1x1x1xf32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_non_uniform_fmax_reduce\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.GroupNonUniformFMax\"(%arg0) <{execution_scope ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<5xf32>, sym_name = \"full_dialect_conversion\"}> ({\n    %1 = \"test.foo\"() {replace_with_new_op = \"test.bar\"} : () -> tensor<5xf32>\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"test_with_multiple_uses_in_same_op\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 45 : i32}> : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.symbol_scope\"() ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n    }) : () -> ()\n    \"test.finish\"() : () -> ()\n  }) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"and_index\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 31 : index}> : () -> index\n    %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1xi1>, sym_name = \"reduce_all_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[true, true, true], [true, false, true]]> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i64) -> (), sym_name = \"uitofp\"}> ({\n  ^bb0(%arg0: i32, %arg1: i64):\n    %0 = \"arith.uitofp\"(%arg0) : (i32) -> f32\n    %1 = \"arith.uitofp\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i64, sym_name = \"remove_multiple_duplicated_read_op\"}> ({\n    %0 = \"test.op_with_memread\"() : () -> i64\n    %1 = \"test.op_with_memread\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_intdiv\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>, index, index, f32) -> (), sym_name = \"dynamic_store\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>, %arg1: index, %arg2: index, %arg3: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"smt.solver\"() ({\n    %1 = \"arith.constant\"() <{value = true}> : () -> i1\n    \"smt.yield\"(%1) : (i1) -> ()\n  }) : () -> i1\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (16, d0 - s0)>\n#map1 = affine_map<(d0)[s0] -> (s0 * 3, d0)>\n#map2 = affine_map<(d0)[s0] -> (s0, -d0 + 5)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"testSingleOperandFail\"}> ({\n  ^bb0(%arg0: i32):\n    \"testvar.single_operand\"(%arg0, %arg0) : (i32, i32) -> ()\n    \"func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"use_before_def\"}> ({\n    \"test.graph_region\"() ({\n      %0 = \"arith.addi\"(%1, %2) <{overflowFlags = #arith.overflow<none>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"deadNToOneCast\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sqrt_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sqrt\"(%arg0) <{fastmath =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_exp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.exp\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x?xf32>, sym_name = \"concat_fold_cast\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.concat\"(%arg0) <{axis = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (16, d0 - s0)>\n#map1 = affine_map<(d0)[s0] -> (s0 * 3, d0)>\n#map2 = affine_map<(d0)[s0] -> (s0, -d0 + 5)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10xf32>, f32, index) -> (f32, f32), sym_name = \"atomic_rmw_no_conversion\"}> ({\n  ^bb0(%arg0: memref<10xf32>, %arg1: f32, %arg2: index):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{function_control = #spirv.function_control<None>, function_type = (f32) -> (), sym_name = \"f32_to_bf16\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.INTEL.ConvertF..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"split_handle\"}> ({\n  ^bb0(%arg1: index, %arg2: index, %arg3: index):\n    %5 = \"arith.muli\"(%arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<f32>, sym_name = \"addf_rank0\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):\n    %0 = \"arith.addf\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_int_from_float\", unnamed_addr = 0 : i64, visib..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"ceildivi\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.ceildivsi\"(%arg0, %arg1) : (i32, i32) -> i32\n    \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i32, i64, i64) -> (), sym_name = \"testVarOperandFail\"}> ({\n  ^bb0(%arg0: i16, %arg1: i32, %arg2: i64, %arg3: i64):\n    \"testvar.var_operan..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "affine",
        "test",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<()[s0, s1] -> (s0, 192, s1)>\n#map1 = affine_map<()[s0, s1] -> (s0, 32, s1)>\n#map2 = affine_map<()[s0, s1] -> (s0, 256, s1)>\n#map3 = affine_map<()[s0, s1, s2] -> (s0, s1, s2)>\n\"builti..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> i32, sym_name = \"fully_dynamic_bounds\"}> ({\n  ^bb0(%arg0: index, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<i1>, sym_name = \"cmpf\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):\n    %0 = \"arith.cmpf\"(%arg0, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xui8>) -> tensor<4xui8>, sym_name = \"clamp_uint8_is_noop\"}> ({\n  ^bb0(%arg0: tensor<4xui8>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededAllOfConstraint\"}> ({\n    %0 = \"testd.all_of\"() : () -> i64\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, index, index) -> (f32, f32), sym_name = \"read_after_write_conflict\"}> ({\n  ^bb0(%arg0: f32, %arg1: index, %arg2: index):\n    %0 = \"test.du..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, f32) -> f32, sym_name = \"doubleup\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index, %arg3: f32):\n    %0 = \"scf.for\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_remove_graph_region\"}> ({\n    \"test.erase_op\"() ({\n      \"test.graph_region\"() ({\n        %0 = \"test.foo_a\"(%1) : (i1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> (), sym_name = \"fcmp\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastmath<none>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul_non_const_zps\"}> ({\n  ^..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1), sym_name = \"cmpf_normal_numbers\"}> ({\n    %0 = \"arith.constant\"() <{valu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"noramalized_loops_with_yielded_non_iter_args\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"test\"}> ({\n    %0 = \"test.constant\"() <{value = 5 : i32}> : () -> i32\n    %1 = \"test.manual_cpp_op_with_fold\"(%0) : (i32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: f32):\n    \"foo.print\"(%arg0) : (f32) -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1xi8>, sym_name = \"reduce_max_constant_no_overflow\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[-127, 120, -126]> : tensor<3xi8>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (i32, i1), sym_name = \"replace_if_with_cond2\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.match_anchor_1\"() ({\n    \"test.op_with_regions\"() ({\n    ^bb0(%arg1: i32):\n      %3 = \"test.match_anchor_2\"() : () -> i32\n      \"test.region_terminator\"() : () -> ()\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> (i32, i32), sym_name = \"combineIfs\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    %0 = \"scf.if\"(%arg0) ({\n      %5 = \"test.firstCodeTrue\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>) -> f32, sym_name = \"external_func_with_return_val\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x1x1xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<42> : tensor<1x1x1xi32>}> : () -> tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"mul_one_int_and_shift\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>):\n    %0 = \"tosa.const\"() <{values =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"fu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_bytes\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<byte>}> : () -> ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "index"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i64, sym_name = \"test_materialize_failure\"}> ({\n    %0 = \"index.constant\"() <{value = 1234 : index}> : () -> index\n    %1 = \"index.castu\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_loop_peeling_not_beneficial\"}> ({\n    %3 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %4 = \"arith.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_erf\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.erf\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"dont_remove_duplicated_read_op_with_sideeffecting\"}> ({\n    %0 = \"test.op_with_memread\"() : () -> i32\n    \"test.op_with_m..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x1x1xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<42> : tensor<1x1x1xi32>}> : () -> tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>) -> (), sym_name = \"some_external_func_within_scf_execute\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{fun..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"inverse_trigonometrics_fmf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.asin\"(%arg0) <{fastmath = #arith.fastmath<fast>}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x5x3xf32>, tensor<1x3x6xf32>) -> tensor<1x5x6xf32>, sym_name = \"matmul\"}> ({\n  ^bb0(%arg0: tensor<1x5x3xf32>, %arg1: tensor<1x3x6xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, memref<?xf64>, f64) -> (memref<?xf64>, index), sym_name = \"sparse_push_back\"}> ({\n  ^bb0(%arg0: index, %arg1: memref<?xf64>, %arg2: f64)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>) -> index, sym_name = \"tensor_dim_of_iter_arg\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>) -> (), sym_name = \"dynamic_dealloc\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>):\n    \"memref.dealloc\"(%arg0) : (memref<?x?xf32>) -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {bufferization.writable = true}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, i1) -> (f32, tensor<?xf32>), ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x5x3xf32>, tensor<1x3x?xf32>) -> tensor<1x5x?xf32>, sym_name = \"matmul_dyn_independent_dim\"}> ({\n  ^bb0(%arg0: tensor<1x5x3xf32>, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<f32>, sym_name = \"reciprocal_fold_single_valued\"}> ({\n    %21 = \"tosa.const\"() <{values = dense<4.000000e+00> : tensor<f32>}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xf32>, sym_name = \"test_cast_i32_f32\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.cast\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_arithmetic_right_shift_rank_invalid\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"asymmetricChain\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>) -> tensor<5x4xf32>, sym_name = \"collapse_shape_identity_fold\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>):\n    %0 = \"tensor.collapse_s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf16>) -> (), sym_name = \"test_clamp_f16\"}> ({\n  ^bb0(%arg0: tensor<1xf16>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 6.000000e+00 : f1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> tensor<5xf32>, sym_name = \"arith_negf_tensor\"}> ({\n  ^bb0(%arg0: tensor<5xf32>):\n    %0 = \"arith.negf\"(%arg0) <{fastmath = #a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sqrt\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sqrt\"(%arg0) <{fastmath = #arith.f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x3x2xf32>, tensor<?x3xi32>) -> (), sym_name = \"gather_float_dyn\"}> ({\n  ^bb0(%arg0: tensor<?x3x2xf32>, %arg1: tensor<?x3xi32>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi8>, tensor<5x4xi8>) -> (), sym_name = \"maximum_nan_ignore_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi8>, %arg1: tensor<5x4xi8>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (f32, tensor<?xf32>, f32), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test_irdl_to_cpp"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"test_irdl_to_cpp.bar\"() : () -> !test_irdl_to_cpp.foo\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    %0 = \"test.type_producer\"() : () -> i32\n    %1 = \"test.type_changer\"(%0) : (i32) -> i16\n    %2 = \"test.type_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i32, i32) -> (), sym_name = \"cond\"}> ({\n  ^bb0(%arg0: i1, %arg1: i32, %arg2: i32):\n    %0 = \"emitc.conditional\"(%arg0, %arg1, %arg2) : (i1,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"roundf_func\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.round\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, i32) -> f32, sym_name = \"group_broadcast_scalar\"}> ({\n  ^bb0(%arg0: f32, %arg1: i32):\n    %0 = \"spirv.GroupBroadcast\"(%arg0, %arg1) <{exec..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"clamp_int8_is_noop\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 127 :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"allowed_cases_pass\"}> ({\n    \"test.op_with_bit_enum\"() <{value = #test.bit_enum<read, write>}> : () -> ()\n    \"test.op_wit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n    ^..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"test.match_anchor\"() : () -> i32\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"umod_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.UMod\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x1xf32>, tensor<i32>) -> (), sym_name = \"test_while_loop\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x1x1x1xf32>, %arg1: tensor<i32>):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global\"() <{addr_space = 0 : i32, global_type = i32, linkage = #llvm.linkage<external>, sym_name = \"zed\", unnamed_addr = 0 : i64, value = 42 : i32, visibility_ = 0 :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x11x11x3xi4>, sym_name = \"test_const_i4\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<3x11x11x3xi4>}> : () -> tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32), sym_name = \"cse_recursive_effects_failure\"}> ({\n    %0 = \"test.op_with_memread\"() : () -> i32\n    %1 = \"arith.constant\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"maximum_nan_ignore\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (bf16, bf16, bf16) -> i1, sym_name = \"chained\"}> ({\n  ^bb0(%arg0: bf16, %arg1: bf16, %arg2: bf16):\n    %0 = \"arith.addf\"(%arg0, %arg1) <{fastmat..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> tensor<10x2x4xf32>, sym_name = \"tensor.splat\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"tensor.splat\"(%arg0) : (f32) -> tensor<10x2x4xf32>\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_log_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, Workgroup>, i32) -> i32, sym_name = \"atomic_exchange\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i32, Workgroup>, %arg1: i32):\n    %0 = \"spi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"shl_basic\", unnamed_addr = 0 : i64, visibility_ = 0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"minmaxi\"}> ({\n  ^bb0(%arg2: i32, %arg3: i32):\n    %4 = \"arith.minsi\"(%arg2, %arg3) : (i32, i32) -> i32\n    %5 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"private_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (tensor<?x?x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"arith.constant\"() <{value = 42 : i32}> : () -> i32\n  %1 = \"test.outerop\"(%0) ({\n    \"test.innerop\"(%0) : (i32) -> ()\n  }) : (i32) -> i32\n  %2:3 = \"test.custom_result_name..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"asin\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.asin\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0 + d1 + 1)>\n#map1 = affine_map<(d0, d1) -> (d0 + d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"compare_maps\"}> ({\n  ^b..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"non_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = 7 : i32}> : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x32x15x13x27xf32>) -> (), sym_name = \"static_memref_dim\"}> ({\n  ^bb0(%arg0: memref<42x32x15x13x27xf32>):\n    %0 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_transitive_use_invalid_materialization\"}> ({\n    %0 = \"test.another_type_producer\"() : () -> f16\n    \"foo.return\"(%0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x26xi32>) -> tensor<13x26x3xf32>, sym_name = \"test_gather\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sigmoid\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sigmoid\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?x?x?xf32>) -> tensor<?x?xf32>, sym_name = \"compose_collapse_of_collapse\"}> ({\n  ^bb0(%arg0: tensor<?x?x?x?x?xf32>):\n    %0 = \"tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.top_level_op\"() : () -> ()\n  \"test.top_level_op\"() : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x13x21x3x8xf32>, tensor<1x1x1x13x21x3x8xf32>) -> tensor<1x1x1x26x21x3x8xf32>, sym_name = \"test_concat_rank_invalid\"}> ({\n  ^bb0(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"no_peeling_front\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x2x2x1xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"select\"}> ({\n    \"test.foo\"() : () -> ()\n    \"test.bar\"() : () -> ()\n    \"test.foo\"() : () -> ()\n    \"func.return\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> !transform.any_op, sym_name = \"match_func\"}> ({\n  ^bb0(%arg2: !transfo..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32, 2>, sym_name = \"fold_multiple_memory_space_cast\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"memref.memory_spa..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"add\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.addi\"(%arg0, %arg1) <{overflowFlags = #arith.overflow<n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, tensor<5xf32>) -> (tensor<5xf32>, tensor<5xf32>), sym_name = \"cse_multiple_regions\"}> ({\n  ^bb0(%arg0: i1, %arg1: tensor<5xf32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0, s1, s2] -> (s0, s1, s2 * 2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"merge..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "nvvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"elect_one_leader_sync\"}> ({\n    %0 = \"nvvm.elect.sync\"() : () -> i1\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.versionedC\"() <{attribute = #test.attr_params<42, 24>}> : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>, tensor<1xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3x3xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"smod_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.SMod\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, tensor<*xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_mul_unranked_a_and_b\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %arg1: tensor<*x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"zero_whitespace\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_pow_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!async.token) -> (), sym_name = \"no_op\"}> ({\n  ^bb0(%arg0: !async.token):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi48>) -> tensor<1xi8>, sym_name = \"test_error_scale32_with_i48\"}> ({\n  ^bb0(%arg0: tensor<1xi48>):\n    %0 = \"tosa.const\"() <{values = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi16>, tensor<13x21x3xi16>) -> tensor<26x21x3xi16>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi16>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1x4xi1>, sym_name = \"reduce_all_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[true, false, false, true], [false, fal..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x28x3xf32>, tensor<13x26xi32>, tensor<13x26x3xf32>) -> tensor<13x28x3xf32>, sym_name = \"test_scatter\"}> ({\n  ^bb0(%arg0: tensor<13x28x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_invalid_result_materialization\"}> ({\n    %0 = \"test.type_producer\"() : () -> f16\n    \"foo.return\"(%0) : (f16) -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedDynParamsConstraintBase\"}> ({\n    %0 = \"testd.dynparams\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i8, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i8}> : () -> i8\n    %1 = \"test.with_bounds\"() <{smax = 12 : i8, smin ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"different_ops\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"arith.constant\"() <{valu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, index, index) -> (f32, f32), sym_name = \"read_after_write_conflict\"}> ({\n  ^bb0(%arg0: f32, %arg1: index, %arg2: index):\n    %0 = \"test.du..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<5xf32>, sym_name = \"tensor.empty\"}> ({\n    %0 = \"tensor.empty\"() : () -> tensor<5xf32>\n    \"func.return\"(%0) : (tensor<5xf32>) -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.op_with_regions\"() ({\n  ^bb0(%arg1: i32):\n    \"test.op_with_regions\"() ({\n      \"test.match_anchor_2\"() : () -> ()\n      \"test.region_terminator\"() : () -> ()\n    }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>) -> tensor<4x8xi32>, sym_name = \"tensor.cast_chain_ok\"}> ({\n  ^bb0(%arg0: tensor<*xi32>):\n    %0 = \"tensor.cast\"(%arg0) : (tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_logical_right_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.comdat\"() <{sym_name = \"__llvm_comdat\"}> ({\n    \"llvm.comdat_selector\"() <{comdat = 0 : i64, sym_name = \"any_comdat\"}> : () -> ()\n    \"llvm.comdat_selector\"() <{comdat = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<16x64x256xf32>) -> tensor<16x64x256xf32>, sym_name = \"dead_softmax\"}> ({\n  ^bb0(%arg0: tensor<16x64x256xf32>):\n    %0 = \"tensor.empty\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_mul_one_lhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<1.0000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_exp_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> (i32, i32), sym_name = \"combineIfsUsed\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    %0 = \"scf.if\"(%arg0) ({\n      %5 = \"test.firstCodeT..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "math",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.some_op_with_region\"() ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.atan\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) -> f64\n    \"test.possible_terminator\"() : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, index, index, index) -> (), sym_name = \"no_speculate_divui\"}> ({\n  ^bb0(%arg114: i32, %arg115: i32, %arg116: index, %arg117: index, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_pow\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?x4x?xf32>) -> tensor<?x?x?xf32>, sym_name = \"legal_collapsing_reshape_dynamic_tensor\"}> ({\n  ^bb0(%arg0: tensor<?x?x?x4x?xf32>):\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_log\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.log\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"udiv_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.UDiv\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"custom_insertion_position\"}> ({\n    \"test.one_region_op\"() ({\n      %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0, s1, s2] -> (s0, s1 + 1, s2 * 2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"m..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dummy",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xi1>, index) -> tensor<?xi1>, sym_name = \"scf_while\"}> ({\n  ^bb0(%arg0: tensor<?xi1>, %arg1: index):\n    %0:2 = \"scf.while\"(%arg0, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_half_words\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<half>}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xf32>) -> tensor<f32>, sym_name = \"compose_collapse_of_collapse_zero_dim\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xf32>):\n    %0 = \"tensor.c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_single_iteration_loop_2\"}> ({\n    %0 = \"arith.constant\"() <{value = 5 : index}> : () -> index\n    %1 = \"arith.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"selection_with_control\"}> ({\n    \"spirv.mlir.selection\"() <{selection_control = #spirv.selection_control<Flatten>}> ({\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"hoist_scf_for_with_unknown_trip_count_unit_step\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"math.ctlz\"(%arg0) : (i32) -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"test.source\"() : () -> !shape.witness\n    %1 = \"test.source\"() : () -> !shape.witness\n    %2 = \"test.sou..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.SpecConstant\"() <{default_value = false, sym..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>, tensor<13x21x1xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"expm1_fmf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.expm1\"(%arg0) <{fastmath = #arith.fastmath<fast>}> : (f32) -> f32\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xf32>, tensor<?x?xi32>) -> (), sym_name = \"gather_float_all_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xf32>, %arg1: tensor<?x?xi32>):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<4xi128, 1>) -> (), sym_name = \"load_i128\"}> ({\n  ^bb0(%arg0: memref<4xi128, 1>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "builtin",
        "gpu"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"func1\"}> ({\n    ^bb0(%arg1: i32):\n      %3 = \"arith.addi\"(%arg1, %arg1) <{overflowFlags = #a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"test_abs_scalar\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.abs\"(%arg0) : (tensor<f32>) -> tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"fold_mul_size\"}> ({\n    %0 = \"shape.const_size\"() <{value = 2 : index}> : () -> !shape.size\n    %1 = \"shape.const..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"any_attr_of_pass\"}> ({\n    \"test.any_attr_of_i32_str\"() <{attr = 3 : i32}> : () -> ()\n    \"test.any_attr_of_i32_str\"() <{a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"fully_static_bounds\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> index, sym_name = \"tensor_dim_of_loop_result_no_canonicalize\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> (), sym_name = \"arith_ops\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.addf\"(%arg0, %arg1) <{fastmath = #arith.fastmath<n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"conversion_dynamic\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (me..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"hoist_scf_for_with_unknown_trip_count_non_unit_constant_step\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x21x3xf32>, tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_sub_rank_invalid\"}> ({\n  ^bb0(%arg0: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{arg_attrs = [{spirv.decoration = #spirv.decoration<RestrictPointer>}], function_control = #spirv.function_control<None>, function_type = (!spirv.ptr<!spirv.ptr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"live_function_e\"}> ({\n    \"func.call\"() <{callee = @dead_function_e}> : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<5xf32>, sym_name = \"full_dialect_conversion_failed\"}> ({\n    %1 = \"test.foo\"() {replace_with_new_op = \"test.bar\"} : () -> tensor<5x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x7x7xf32>) -> tensor<1x4x7x7xf32>, sym_name = \"fold_concats\"}> ({\n  ^bb0(%arg0: tensor<1x1x7x7xf32>):\n    %0 = \"tensor.empty\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"clone_multiple_dealloc_of_source\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_no_change\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.reverse\"(%arg0) <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"nested_tuple_one_level_success\"}> ({\n    %0 = \"test.nested_tuple_32_bit\"() : () -> tuple<i32>\n    \"func.return\"() : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i64, sym_name = \"extSIOfExtUI\"}> ({\n  ^bb0(%arg2: i1):\n    %4 = \"arith.extui\"(%arg2) : (i1) -> i8\n    %5 = \"arith.extsi\"(%4) : (i8) -> i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i64, sym_name = \"s_convert_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.SConvert\"(%arg0) : (i32) -> i64\n    \"spirv.ReturnValue\"(%0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"fixpoint\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.use\"(%arg0) ({\n      %1 = \"test.use2\"(%arg0) ({\n        \"test.yield2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x5xi32>) -> index, sym_name = \"dim_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?x5xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x?xf32>, index, index) -> (), sym_name = \"mixed_load\"}> ({\n  ^bb0(%arg0: memref<42x?xf32>, %arg1: index, %arg2: index):\n    %0 = \"memr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (i32, f32, i32, i8), sym_name = \"merge_yielding_nested_if\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"test.op\"() : () -> i32\n    %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"fsub_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FSub\"(%arg0, %arg0) : (f32, f32) -> f32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi32>) -> tensor<1xi8>, sym_name = \"test_error_i32_input_unsigned_output\"}> ({\n  ^bb0(%arg0: tensor<1xi32>):\n    %0 = \"tosa.const\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>, tensor<1xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xbf16>, sym_name = \"test_cast_i8_bf16\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.cast\"(%arg0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"private\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"no_overflowing_memset\", unnamed_addr = 0 : i64, vis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x?x?xf32>) -> tensor<?x?xf32>, sym_name = \"tensor.collapse_shape\"}> ({\n  ^bb0(%arg0: tensor<2x?x?xf32>):\n    %0 = \"tensor.collapse_shap..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"simple_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> !transform.any_op, sym_name = \"match1\"}> ({\n  ^bb0(%arg4: !transform.a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> tensor<?x?xf32>, sym_name = \"test_add_2d_all_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, %arg1: tensor<?x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x7x5xi32>, tensor<3x6xi32>, tensor<3x6x5xi32>) -> tensor<3x7x5xi32>, sym_name = \"scatter_test\"}> ({\n  ^bb0(%arg0: tensor<3x7x5xi32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sin\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sin\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, index, f32) -> (tensor<?xf32>, tensor<?xf32>), sym_name = \"read_after_write_conflict\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"do_not_move_slice\"}> ({\n    %2 = \"before\"() : () -> f32\n    %3 = \"moved_op\"(%2) : (f32) -> f32\n    %4 = \"foo\"(%3) : (f32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (tensor<5xi1>, tensor<5xi1>), sym_name = \"scf_while\"}> ({\n  ^bb0(%arg0: tensor<5xi1>, %arg1: tensor<5xi1>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.any_op, !transform.param<i64>) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"pretty_printed_region_op\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"test.pretty_printed_region\"(%arg1, %arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{llvm.byval = !test.smpla}], function_type = (!test.smpla) -> !test.smpla, sym_name = \"byval\"}> ({\n  ^bb0(%arg0: !test.smpla):\n    \"func.return\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (i32)>, linkage = #llvm.linkage<external>, sym_name = \"fold_bitcast2\", unnamed_addr = 0 : i64, visibili..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"simple1\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i32, i32, i32) -> (), sym_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i1 (i32)>, linkage = #llvm.linkage<external>, sym_name = \"fold_icmp_eq\", unnamed_addr = 0 : i64, visibility..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_block_arg_1_to_n\"}> ({\n    \"test.block_arg_replace\"() ({\n    ^bb0(%arg0: i32, %arg1: i16):\n      \"test.return\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.size, sym_name = \"not_const\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.const_size\"() <{value = 3 : index}> : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"atan\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.atan\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"memref_conversions\"}> ({\n    \"gpu.func\"() <{function_type = (memref<8xf32>) -> ()}> ({\n    ^bb0(%arg0: memref<8xf32>):\n      \"gpu.return\"() : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"clamp_ulessthan\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    %0 = \"spirv.ULessThan\"(%arg0, %arg1) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_rsqrt\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.rsqrt\"(%arg0) <{fastmath = #arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32, i32, i32), sym_name = \"simple_arith.ceildivsi\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeeded_attr_traits\"}> ({\n    \"test.attr_with_trait\"() <{attr = #test.attr_with_trait}> : () -> ()\n    \"func.return\"() :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x16x16xf32>, index) -> (), sym_name = \"test_store_nontemporal\"}> ({\n  ^bb0(%arg1: memref<2x16x16xf32>, %arg2: index):\n    %1 = \"arith.c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i40 (i8)>, linkage = #llvm.linkage<external>, sym_name = \"exotic_target_memset\", unnamed_addr = 0 : i64, vi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"remap_input_to_self\"}> ({\n  ^bb0(%arg3: index):\n    \"work\"(%arg3) : (index) -> ()\n  }) : () -> ()\n  \"func.func\"() <{f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_smin_reduce\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformSMin\"(%arg0) <{execution_scope ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "linalg",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32xf32>, memref<32xf32>, memref<32xf32>) -> (), sym_name = \"map_already_flat\"}> ({\n  ^bb0(%arg1: memref<32xf32>, %arg2: memref<32xf32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"loop_unroll_and_jam_unsupported_loop_with_results\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> : () -> index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.reverse\"(%arg0) <{a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.SpecConstant\"() <{default_value = 42 : i32, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> (), sym_name = \"shape_of\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"shape.shape_of\"(%arg0) : (tensor<*xf32>) -> !shape.sha..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_sum_constant_aggressive\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1> : tensor<2x3xi32>}> : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, !llvm.ptr) -> (), sym_name = \"construct_unranked_memref_descriptor\"}> ({\n  ^bb0(%arg0: i64, %arg1: !llvm.ptr):\n    %0 = \"test.direct_repla..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xi32>, sym_name = \"cast_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.cast\"(%arg0) : (tensor<?x1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1x4xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "irdl"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"irdl.dialect\"() <{sym_name = \"testd\"}> ({\n    \"irdl.type\"() <{sym_name = \"self_referencing\"}> ({\n      %8 = \"irdl.any\"() : () -> !irdl.attribute\n      %9 = \"irdl.parametric\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> tensor<2xi8>, sym_name = \"rescaleUnnecessaryDoubleRound\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"do_not_move\"}> ({\n    %2 = \"moved_op\"() : () -> f32\n    %3 = \"foo\"() ({\n      \"yield\"(%2) : (f32) -> ()\n    }) : () -> f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"deduplicate_scalar_constant\"}> ({\n    %0 = \"spirv.Constant\"() <{value = 42 : i32}> : () -> i32\n    %1 = \"spirv.Con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (si32, si32, si32) -> (), sym_name = \"uclamp\"}> ({\n  ^bb0(%arg0: si32, %arg1: si32, %arg2: si32):\n    %0 = \"spirv.GL.UClamp\"(%arg0, %arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_abs\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.abs\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_mul_zero_lhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<0.000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_replace_with_new_op\"}> ({\n    %0 = \"test.replace_with_new_op\"() : () -> i32\n    %1 = \"test.dummy_user\"(%0) : (i32) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> (), sym_name = \"if_test_propagate\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tensor<i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_ceil\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_sqrt\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>, index) -> (), sym_name = \"memref_dim_all_positive\"}> ({\n  ^bb0(%arg0: memref<?xf32>, %arg1: index):\n    %0 = \"arith.constant\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x2x?xf32>) -> (), sym_name = \"memref_cast_ranked_to_unranked\"}> ({\n  ^bb0(%arg0: memref<42x2x?xf32>):\n    %0 = \"memref.cast\"(%arg0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_logical_left_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"clamp_nan_ignore\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0 = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>, tensor<5xf32>) -> tensor<5xi1>, sym_name = \"arith_cmpf_tensor\"}> ({\n  ^bb0(%arg0: tensor<5xf32>, %arg1: tensor<5xf32>):\n    %0 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "cf",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"func_with_assert\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %1 = \"arith.cmpi\"(%arg1, %arg2) <{predicate = 2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<*xi32>) -> tensor<13x26x3xf32>, sym_name = \"test_gather_unranked_indices\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{test.erase_this_arg}], function_type = (f32) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: f32):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x1xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6], [7, 8, 9]]> : tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"image_load\"}> ({\n    %0 = \"spirv.Variable\"() <{storage_class = #spirv.storage_class<Function>}> : () -> !spirv.ptr<!spirv...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_add\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i1>) -> (), sym_name = \"test_if_tensor_list_size\"}> ({\n  ^bb0(%arg0: tensor<i1>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, index) -> tensor<3xf32>, sym_name = \"no_conflict\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: index):\n    %0 = \"tensor.from_elements\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_mul_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "omp"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"omp_unroll_heuristic_raw\"}> ({\n  ^bb0(%arg5: i32):\n    %3 = \"omp.new_cli\"() : () -> !omp.cli\n    \"omp.canonical_loop\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"imul_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.IMul\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?x?xf32>, memref<4xi64>) -> memref<?x?x12x32xf32>, sym_name = \"memref.reshape.dynamic.dim\"}> ({\n  ^bb0(%arg0: memref<?x?x?xf32>, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32, i32, i32), sym_name = \"simple_arith.ceildivui\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"minimum_nan_propagate\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (i32, f32, i32, i8), sym_name = \"merge_fail_yielding_nested_if\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"test.op\"() : () -> i32\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.reverse\"(%arg0) <{a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"correct_int_types_success\"}> ({\n    %0:4 = \"test.int_types\"() : () -> (i16, si32, ui64, i8)\n    %1:4 = \"test.int_types\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<i32>, sym_name = \"test_argmax\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 0 : i32, nan_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, Workgroup>, i32, i32) -> i32, sym_name = \"atomic_compare_exchange_weak\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i32, Workgroup>, %arg1: i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xi32>) -> index, sym_name = \"dim_unranked\"}> ({\n  ^bb0(%arg0: memref<*xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\"}> ({..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"op_with_custom_printer\"}> ({\n    %0 = \"test.string_attr_pretty_name\"() <{names = [\"x\"]}> : () -> i32\n    \"func.return\"() :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"absi\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"math.absi\"(%arg0) : (i32) -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i32, i8) -> i32, sym_name = \"apply_scale_test_i64\"}> ({\n  ^bb0(%arg0: i64, %arg1: i32, %arg2: i8):\n    %0 = \"tosa.apply_scale\"(%arg0, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_integer_ops\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.addi\"(%arg0, %arg1) <{overflowFlags = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = false}, {bufferization.writable = true}, {}, {}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, index, index, index)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i3) -> (), sym_name = \"integer_extension_and_truncation\"}> ({\n  ^bb0(%arg0: i3):\n    %0 = \"arith.extsi\"(%arg0) : (i3) -> i6\n    %1 = \"arith.ext..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi1>, sym_name = \"reduce_any_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[true, true, true], [true, false, true]]> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_rsqrt\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.rsqrt\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10xf32>, index) -> (), sym_name = \"test_atomic_yield\"}> ({\n  ^bb0(%arg0: memref<10xf32>, %arg1: index):\n    %0 = \"memref.generic_atomic_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10x42xf32>, index, index) -> (), sym_name = \"static_load\"}> ({\n  ^bb0(%arg0: memref<10x42xf32>, %arg1: index, %arg2: index):\n    %0 = \"m..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2xf32>, f32) -> memref<2xf32>, sym_name = \"memref_realloc_dead\"}> ({\n  ^bb0(%arg0: memref<2xf32>, %arg1: f32):\n    %0 = \"memref.realloc\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"arith.ceildivui_by_one\"}> ({\n  ^bb0(%arg1: i32):\n    %2 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %3 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x2xf32>, tensor<2x2xf32>) -> (), sym_name = \"test_concat_dynamic_axis\"}> ({\n  ^bb0(%arg0: tensor<?x2xf32>, %arg1: tensor<2x2xf32>):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi8>, tensor<5x4xi8>) -> (), sym_name = \"reduce_min_nan_ignore_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi8>, %arg1: tensor<5x4xi8>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    \"test.noop\"() : () -> ()\n    \"test.no_result\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi1>, tensor<1xi1>) -> (), sym_name = \"test_binary_i1\"}> ({\n  ^bb0(%arg0: tensor<4xi1>, %arg1: tensor<1xi1>):\n    %0 = \"tosa.logical_an..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"add_poison\"}> ({\n    %0 = \"shape.const_size\"() <{value = 2 : index}> : () -> !shape.size\n    %1 = \"ub.poison\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testVarResultFail\"}> ({\n    %0:4 = \"testvar.var_result\"() : () -> (i16, i32, i64, i64)\n    \"func.return\"() : () -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_or\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xi8>) -> tensor<1x1xui8>, sym_name = \"test_rescale_output_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1x1xi8>):\n    %0 = \"tosa.const\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"solver_input\"}> ({\n  ^bb0(%arg0: i1):\n    \"smt.solver\"(%arg0) ({\n    ^bb0(%arg1: i1):\n      \"smt.yield\"() : () -> ()\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (f32, f32, f32, f32), sym_name = \"test_addf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i1, sym_name = \"arith_cast_fptosi_i1\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.fptosi\"(%arg0) : (f32) -> i1\n    \"func.return\"(%0) : (i1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"kernel\"}> ({\n    \"gpu.func\"() <{function_type = (memref<8xi32>) -> ()}> ({\n    ^bb0(%arg0: memref<8xi32>):\n      \"gpu.return\"() : () -> ()\n    }) {..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> (), sym_name = \"rank\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.rank\"(%arg0) : (!shape.shape) -> !shape.size\n    \"func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testSingleResultFail\"}> ({\n    \"testvar.single_result\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_false\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, i32) -> f32, sym_name = \"warp_propagate_cast\"}> ({\n  ^bb0(%arg0: index, %arg1: i32):\n    %0 = \"gpu.warp_execute_on_lane_0\"(%arg0) <{warp..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"test_7i32_to_29\"}> ({\n    %4 = \"arith.constant\"() <{value = 7 : i32}> : () -> i32\n    %5 = \"math.ctlz\"(%4) : (i32) -> i32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"test_always_speculatable_op\"}> ({\n  ^bb0(%arg23: index, %arg24: index, %arg25: index):\n    \"scf.for\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_shift_left\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.shli\"(%arg0, %arg1) <{overflowFlags = #arit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"fold_div_size\"}> ({\n    %0 = \"shape.const_size\"() <{value = 10 : index}> : () -> !shape.size\n    %1 = \"shape.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"index_to_size_to_index\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"shape.index_to_size\"(%arg0) : (index) -> !shape.size\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.self_referencing<!testd.self_referencing<i32>>) -> (), sym_name = \"one_reference\"}> ({\n  ^bb0(%arg0: !testd.self_referencing<!testd.self..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededDynBaseConstraint\"}> ({\n    %0 = \"testd.dyn_type_base\"() : () -> !testd.parametric<i32>\n    %1 = \"testd.dyn_type_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f16, sym_name = \"arith_truncf\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"arith.truncf\"(%arg0) : (f64) -> f32\n    %1 = \"arith.truncf\"(%0) : (f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_add\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {}, {}], function_type = (tensor<?xf32>, f32, index) -> tensor<?xf32>, sym_name = \"insert_op\"}> ({\n  ^bb0(%arg0: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.size) -> index, sym_name = \"nonfoldable_size_to_index\"}> ({\n  ^bb0(%arg0: !shape.size):\n    %0 = \"shape.size_to_index\"(%arg0) : (!shape...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"collapse_shape_rank0_identity_fold\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tensor.collapse_shape\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.SpecConstant\"() <{default_value = 42 : i32, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"unsupported_constant_i64_1\"}> ({\n    %0 = \"arith.constant\"() <{value = 4294967296 : i64}> : () -> i64\n    \"func.return\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<6xi16>, tensor<513xi16>) -> (), sym_name = \"table16\"}> ({\n  ^bb0(%arg0: tensor<6xi16>, %arg1: tensor<513xi16>):\n    %0 = \"tosa.table\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_reduce_max_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi32>) -> (), sym_name = \"reduce_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis = 0 : i32}> : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{arg_attrs =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.op_with_property_predicates\"() <{array = [], defaulted = 3 : i64, more_constrained = 4 : i64, non_empty_constrained = [6], non_empty_optional = [[7]], non_empty_unconstra..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1, d2) -> (d0 * 2, d1 + d2)>\n#map1 = affine_map<(d0, d1) -> (d0, d1)>\n#map2 = affine_map<(d0, d1) -> (d0 + 10, d1 + 10)>\n#map3 = affine_map<() -> (0, 0)>\n#map4 = affine_map<()[..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>, tensor<13x21x1xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi16>) -> tensor<4xi16>, sym_name = \"clamp_int16_is_noop\"}> ({\n  ^bb0(%arg0: tensor<4xi16>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_tan_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.tan\"(%arg0) <{fastmath = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi32>, tensor<1xui32>, tensor<1xui64>) -> (), sym_name = \"test_simple_i32\"}> ({\n  ^bb0(%arg0: tensor<1xi32>, %arg1: tensor<1xui32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> (), sym_name = \"rescale_i8_unsigned_output_implicit\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = dens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xi1>, tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_select\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xi1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x7x7xf32>) -> tensor<1x8x7x7xf32>, sym_name = \"nested_fold\"}> ({\n  ^bb0(%arg0: tensor<1x1x7x7xf32>):\n    %0 = \"tensor.empty\"() : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xf32>, sym_name = \"addf_dense_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<[1.500000e+00, 2.500000e+00, 3.500000e+00, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<1xbf16>, tensor<1xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_negate\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"private_symbol\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"foo.possibly_unknown_symbol_table\"() ({\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i1, i1, i1, i1, i1, i1, i1, i1, i1, i1), sym_name = \"cmpi\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : i32}> : () -> i32\n    %1 = \"ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"while_test\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.while_loop\"(%arg0) ({\n    ^bb0(%arg2: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x2x8xf32>) -> (), sym_name = \"test_static_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<5x2x8xf32>):\n    %0:2 = \"tosa.rfft2d\"(%arg0) : (tensor<5x2x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_true\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fast..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"empty_region\"}> ({\n    \"spirv.mlir.loop\"() <{loop_control = #spirv.loop_control<None>}> ({\n    }) : () -> ()\n    \"func.ret..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_abs\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.abs\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x?xf32>) -> (index, index), sym_name = \"fold_dim_of_tensor.cast\"}> ({\n  ^bb0(%arg0: tensor<4x?xf32>):\n    %0 = \"arith.constant\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi48>) -> tensor<1xi8>, sym_name = \"test_error_i48_input_unsigned_output\"}> ({\n  ^bb0(%arg0: tensor<1xi48>):\n    %0 = \"tosa.const\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<536870912x8x16xf32>) -> (tensor<536870912x8x9xf32>, tensor<536870912x8x9xf32>), sym_name = \"test_rfft2d_tensor_size_invalid\"}> ({\n  ^bb0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f64) -> (), sym_name = \"arith_float_to_int_cast_ops\"}> ({\n  ^bb0(%arg2: f32, %arg3: f64):\n    %3 = \"arith.fptosi\"(%arg2) : (f32) -> i32\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tuple<i1, i32>) -> tuple<i1, i32>, sym_name = \"identity\"}> ({\n  ^bb0(%arg0: tuple<i1, i32>):\n    \"func.return\"(%arg0) : (tuple<i1, i32>) -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8xf32>) -> tensor<16xf32>, sym_name = \"tensor.concat\"}> ({\n  ^bb0(%arg0: tensor<8xf32>):\n    %0 = \"tensor.concat\"(%arg0, %arg0) <{dim = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<13..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x1x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_greater_equal\"}> ({\n  ^bb0(%arg0: tensor<13x1x3xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi32>) -> tensor<2xf32>, sym_name = \"tensor_bitcast_chain_ok\"}> ({\n  ^bb0(%arg0: tensor<2xi32>):\n    %0 = \"tensor.bitcast\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (f32, i24), sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"bitcount\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.BitCount\"(%arg0) : (i32) -> i32\n    \"spirv.ReturnValue\"(%0) : (i32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<26x21x3xf32>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"main\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"math.ctlz\"(%arg0) : (i32) -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_smaller_float_type\", unnamed_addr = 0 : i64, v..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>, tensor<?xf32>) -> tensor<5xf32>, sym_name = \"test_add_1d_broadcast_dynamic_to_static\"}> ({\n  ^bb0(%arg0: tensor<5xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testOptResult\"}> ({\n    %0:2 = \"testvar.opt_result\"() : () -> (i16, i64)\n    %1:3 = \"testvar.opt_result\"() : () -> (i16, i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"positive_int_attr_pass\"}> ({\n    \"test.positive_int_attr\"() <{i32attr = 5 : i32, i64attr = 10 : i64}> : () -> ()\n    \"func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<f16>, sym_name = \"cast_float_to_float\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<4.200000e+01> : tensor<f32>}> : () -> tensor<f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<64xf32>, sym_name = \"map_arith_with_attr\"}> ({\n  ^bb0(%arg0: tensor<64xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi1>) -> (), sym_name = \"reduce_bool\"}> ({\n  ^bb0(%arg0: tensor<5x4xi1>):\n    %0 = \"tosa.reduce_all\"(%arg0) <{axis = 0 : i32}> : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"empty\"}> ({\n    \"memref.alloca_scope\"() ({\n      \"memref.alloca_scope.return\"() : () -> ()\n    }) : () -> ()\n    \"func.ret..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (index) -> index, sym_name = \"gpu_index_comp\"}> ({\n    ^bb0(%arg0: index):\n      %0 = \"arith...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"frem_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FRem\"(%arg0, %arg0) : (f32, f32) -> f32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.struct<simple, (f32)>) -> (), sym_name = \"id_struct_simple\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "unregistered"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "#extern = #ml_program.extern : i32\n\"builtin.module\"() ({\n  \"unregistered.attributes\"() {value = #extern} : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"goo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"check..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, StorageBuffer>, i32) -> (), sym_name = \"subgroup_block_write_intel\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i32, StorageBuffer>, %arg1: i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x?x?x8x2x?xf32>, tensor<4x?x?x8x2x?xf32>) -> tensor<4x?x?x8x2x?xi1>, sym_name = \"cmpf\"}> ({\n  ^bb0(%arg0: tensor<4x?x?x8x2x?xf32>, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"math_fpowi_scalar_zero\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0 : i64}> : () -> i64\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "unregistered"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"clone_unregistered_with_attrs\"}> ({\n    \"unregistered.foo\"() <{bar = 1 : i64, flag = true, name = \"test\", value = 3.140000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_log1p\"}> ({\n    ^bb0(%arg0: f16, %arg1: f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, index, memref<?xf32>, i8) -> (), sym_name = \"outline_if\"}> ({\n  ^bb0(%arg0: i1, %arg1: index, %arg2: memref<?xf32>, %arg3: i8):\n    \"scf.if..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module_1\"}> ({\n    \"func.func\"() <{function_type = (index) -> index, sym_name = \"test\"}> ({\n    ^bb0(%arg0: index):\n      %0 = \"test.increment..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "foo"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0 * 2)>\n\"builtin.module\"() ({\n  %0 = \"foo.op\"() : () -> memref<?xf32, #map>\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_unknown_dynamically_legal\"}> ({\n    \"foo.unknown_op\"() {test.dynamically_legal} : () -> ()\n    \"foo.unknown_op\"() : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"floordivi\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.floordivsi\"(%arg0, %arg1) : (i32, i32) -> i32\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00]> : tensor<3xf32>}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xi32>, sym_name = \"subi_splat_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<4> : tensor<4xi32>}> : () -> tensor<4xi32>\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"ceildivui_index\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.ceildivui\"(%arg0, %arg1) : (index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = -1 : index}> : () -> index\n    %1 = \"test.with_bounds\"() <{smax = 9223372..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 ()>, linkage = #llvm.linkage<external>, sym_name = \"zext_basic\", unnamed_addr = 0 : i64, visibility_ = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0, d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x6x32xf32>, index, index) -> f32, sym_name = \"fold_dynamic_size_collapse_shape_with_affine_load..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<1x21x3xf32>, sym_name = \"test_reduce_min\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reduce_min\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_non_uniform_fmin_reduce\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.GroupNonUniformFMin\"(%arg0) <{execution_scope ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x28x3xf32>, tensor<13x26xi32>, tensor<13x26x3xf32>) -> tensor<13x28x3xf32>, sym_name = \"test_scatter\"}> ({\n  ^bb0(%arg0: tensor<13x28x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>) -> tensor<13x21x1xi32>, sym_name = \"test_bitwise_not\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>):\n    %0 = \"tosa.bitwise_not\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"gpu.func\"() <{function_type = () -> ()}> ({\n      \"gpu.return\"() : () -> ()\n    }) {gpu.kernel, sym_name = \"kernel_func\", wo..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4x5x?xf32>, sym_name = \"empty_canonicalize\"}> ({\n    %0 = \"arith.constant\"() <{value = 6 : index}> : () -> index\n    %1 = \"tensor.e..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x1x1xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<42> : tensor<1x1x1xi32>}> : () -> tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x3x2xi32>, tensor<3x1xi32>) -> tensor<4x3x2xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<4x3x2xi32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_negate_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"test.with_bounds\"() <{smax = 92233720..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<32xf32>, sym_name = \"clone_and_cast\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (memre..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"bar\"}> ({\n  ^bb0(%arg1: i1):\n    \"another_op\"(%arg1) : (i1) -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xf32>, sym_name = \"mulf_splat_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<4.500000e+00> : tensor<4xf32>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>, tensor<1xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul\"}> ({\n  ^bb0(%arg0: tensor<1x14x19xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"match\"}> ({\n  ^bb0(%arg1: !transform.any_op):\n    \"tra..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi1>, tensor<1xi32>, tensor<4xi32>) -> (), sym_name = \"test_select_i32\"}> ({\n  ^bb0(%arg0: tensor<4xi1>, %arg1: tensor<1xi32>, %arg2: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"merge_nested_if\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    \"scf.if\"(%arg0) ({\n      \"scf.if\"(%arg1) ({\n        \"test.op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>, tensor<13x21x1xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x8x16384xf32>) -> (tensor<13x8x8193xf32>, tensor<13x8x8193xf32>), sym_name = \"test_rfft2d_input_w\"}> ({\n  ^bb0(%arg0: tensor<13x8x1638..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"TestAlwaysIllegalOperationPass1\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"remap_input_1_to_N_remaining_use\"}> ({\n  ^bb0(%arg1: f32):\n    \"work\"(%arg1) : (f32) -> ()\n  }) : () -> ()\n  \"func.func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xf32>) -> (tensor<?x?x?xf32>, tensor<?x?x?xf32>), sym_name = \"test_dynamic_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xf32>):\n    %0:2 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"int32_scalar\"}> ({\n  ^bb0(%arg2: i32, %arg3: i32):\n    %1 = \"arith.addi\"(%arg2, %arg3) <{overflowFlags = #arith.ov..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi1>, tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"select_same_value\"}> ({\n  ^bb0(%arg0: tensor<2x3xi1>, %arg1: tensor<2x3xi32>):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>, tensor<?x1xf32>, tensor<?x1xf32>) -> (), sym_name = \"concat_non_axis_dyn_mixed\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>, %arg1: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, index, index) -> (index, index, index, index), sym_name = \"replace_duplicate_iter_args\"}> ({\n  ^bb0(%arg0: index, %arg1: i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<f32, CrossWorkgroup>, i64) -> (), sym_name = \"inbounds_ptr_access_chain1\"}> ({\n  ^bb0(%arg0: !spirv.ptr<f32, CrossWorkgroup>, %arg1:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() <{sym_name = \"inner_mod1\"}> ({\n    \"func.func\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<5xf32>, sym_name = \"test_abs_1d_cast_dynamic_to_static\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"tosa.abs\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x5xi8>, tensor<256xi8>) -> (), sym_name = \"test_table_non_const\"}> ({\n  ^bb0(%arg0: tensor<4x5xi8>, %arg1: tensor<256xi8>):\n    %0 = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi8>, index) -> memref<?xi8>, sym_name = \"non_fold_view_same_source_res_types\"}> ({\n  ^bb0(%arg0: memref<?xi8>, %arg1: index):\n    %0 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"acosh\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.acosh\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.dataflow_match\"() ({\n    %1:2 = \"test.producer\"() : () -> (i32, i32)\n    \"test.consumer\"(%1#0, %1#1) : (i32, i32) -> ()\n  }) : () -> ()\n  \"test.dataflow_match\"() ({\n    %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"nested_tuple_multi_level_mixed_success\"}> ({\n    %0 = \"test.nested_tuple_32_bit\"() : () -> tuple<i32, tuple<f32, tuple<i32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"op_without_custom_printer\"}> ({\n    %0 = \"test.result_type_with_trait\"() : () -> !test.test_type_with_trait\n    \"func.retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"verify_success\"}> ({\n  ^bb0(%arg1: f64):\n    \"func.return\"(%arg1) : (f64) -> ()\n  }) : () -> ()\n  \"builtin.module\"() (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_input_zp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.type1<!testd.type2<!testd.type1<i32>>>) -> (), sym_name = \"type1_two_references\"}> ({\n  ^bb0(%arg0: !testd.type1<!testd.type2<!testd.typ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"while_unused_result\"}> ({\n    %0:2 = \"scf.while\"() ({\n      %1 = \"test.condition\"() : () -> i1\n      %2 = \"test.get_some_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    \"smt.yield\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"bifurcation\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1 = \"bu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, tensor<?x?xf32>) -> f32, sym_name = \"load_from_buffer_cast\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: tensor<?x?xf32>):\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> (tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>), sym_name = \"invariant_loop_args_in_same_order\"}> ({\n  ^bb0(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_tan\"}> ({\n    ^bb0(%arg0: f16, %arg1: f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, Workgroup>, i32, i32) -> i32, sym_name = \"atomic_compare_exchange\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i32, Workgroup>, %arg1: i32, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"fully_static_bounds\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_uge\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_mul_one_rhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<64> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"cond\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"body\", sym_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"acos\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.acos\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, memref<?xf64>, f64, index) -> (memref<?xf64>, index), sym_name = \"sparse_push_back_n\"}> ({\n  ^bb0(%arg0: index, %arg1: memref<?xf64>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 ()>, linkage = #llvm.linkage<external>, sym_name = \"zero_integer\", unnamed_addr = 0 : i64, visibility_ ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x2x2x1xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_undo_region_clone\"}> ({\n    \"test.region\"() ({\n    ^bb0(%arg0: i64):\n      \"test.invalid\"(%arg0) : (i64) -> ()\n    })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> tensor<3x2x2xf32>, sym_name = \"tensor.from_elements_3d\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 1.000000e+00 : f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> index, sym_name = \"test_tensor_dim_unranked\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f16) -> f16, sym_name = \"rsqrt16\"}> ({\n  ^bb0(%arg0: f16):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_clamp_ignore\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.clamp\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xi8>, tensor<1x19x28xi8>) -> tensor<1x14x28xi32>, sym_name = \"test_matmul\"}> ({\n  ^bb0(%arg0: tensor<1x14x19xi8>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> (), sym_name = \"test_valid_arg_materialization\"}> ({\n  ^bb0(%arg0: i64):\n    \"foo.return\"(%arg0) : (i64) -> ()\n  }) : () -> ()\n}) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"variable\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.Variable\"() <{storage_class = #spirv.storage_class<Function>}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "testd",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"successReuseConstraintBetweenRegionAndOperand\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : i32}> : () -> i32\n    \"test..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"consume\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i1, i32) -> (), sym_name =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"test_andi_not_fold_rhs\"}> ({\n  ^bb0(%arg1: index):\n    %3 = \"arith.constant\"() <{value = -1 : index}> : () -> inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?x?xf32>, tensor<6x6x?x?x?x?xf32>) -> tensor<6x6x?x?x?x?xf32>, sym_name = \"winograd_input_dyn\"}> ({\n  ^bb0(%arg0: tensor<?x?x?x?xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (ui32, ui32, ui32) -> (), sym_name = \"uclamp\"}> ({\n  ^bb0(%arg0: ui32, %arg1: ui32, %arg2: ui32):\n    %0 = \"spirv.GL.UClamp\"(%arg0, %arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "nvvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"fence_mbarrier_init\"}> ({\n    \"nvvm.fence.mbarrier.init\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf16>) -> (), sym_name = \"test_simple_f16\"}> ({\n  ^bb0(%arg0: tensor<1xf16>):\n    %0 = \"tosa.cast\"(%arg0) : (tensor<1xf16>) -> tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"iadd_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.IAdd\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i64) -> (), sym_name = \"ipowi\"}> ({\n  ^bb0(%arg0: i64, %arg1: i64):\n    %0 = \"math.ipowi\"(%arg0, %arg1) : (i64, i64) -> i64\n    \"func.retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<64xf32>, memref<64xf32>, memref<64xf32>) -> (), sym_name = \"map_binary_memref\"}> ({\n  ^bb0(%arg0: memref<64xf32>, %arg1: memref<64xf32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\"}> ({..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f1\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f2\"}> ({\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_exp_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.exp\"(%arg0) <{fastmath = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> (), sym_name = \"rescale_i8_unsigned_input_implicit\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = dense..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"fold_negate_negate\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.const\"() <{values = de..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"wrap_do_while_loop_in_zero_trip_check\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"correct_type_pass\"}> ({\n    \"test.float_elements_attr\"() <{scalar_f32_attr = dense<5.000000e+00> : tensor<2xf32>, tensor_f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x1xf32>, tensor<6x1xf32>) -> (), sym_name = \"concat\"}> ({\n  ^bb0(%arg0: tensor<5x1xf32>, %arg1: tensor<6x1xf32>):\n    %0 = \"tosa.concat..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedDynTypeBaseConstraint\"}> ({\n    %0 = \"testd.dyn_type_base\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{llvm.noalias}, {llvm.noalias}], function_type = (memref<2xf32>, memref<2xf32>) -> (), sym_name = \"check_noalias\"}> ({\n  ^bb0(%arg0: memref<2xf32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "emitc"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"emitc.file\"() <{id = \"file_one\"}> ({\n    \"emitc.func\"() <{function_type = (f32) -> (), sym_name = \"func_one\"}> ({\n    ^bb0(%arg1: f32):\n      \"emitc.return\"() : () -> ()\n    }..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_check_if_test..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"bitwise\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"emitc.bitwise_and\"(%arg0, %arg1) : (i32, i32) -> i32\n    %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (tensor<5xi1>, tensor<5xi1>), sym_name = \"scf_while_non_equiv_condition_and_body\"}> ({\n  ^bb0(%arg0: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<536870912xi32>) -> tensor<536870912xi32>, sym_name = \"test_custom_tensor_size_invalid\"}> ({\n  ^bb0(%arg0: tensor<536870912xi32>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"fold_legalization\"}> ({\n    %0 = \"test.op_in_place_self_fold\"() : () -> i32\n    \"test.return\"(%0) : (i32) -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f16 (f16, f16)>, linkage = #llvm.linkage<external>, sym_name = \"fdiv_fp16\", unnamed_addr = 0 : i64, visibil..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"erase_tracked_op\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.erase_op\"() {replace_with_new_op = \"test.foo\"} : () -> i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"clamp_twice_with_nan_propagate_is_single_clamp\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 = \"tosa.cla..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0, d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (index, index), sym_name = \"affine_min\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"while_duplicated_res\"}> ({\n    %0:2 = \"scf.while\"() ({\n      %1 = \"test.val\"() : () -> i32\n      %2 = \"test.condit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"set_default_device\"}> ({\n  ^bb0(%arg0: i32):\n    \"gpu.set_default_device\"(%arg0) : (i32) -> ()\n    \"func.return\"() : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"clamp_fordlessthanequal\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.FOrdLessThanEqual\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"test1\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"test.cast\"(%arg0, %arg1) : (i32, i32) -> i32\n    %1 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 (i64, i64, i64)>, linkage = #llvm.linkage<external>, sym_name = \"dialect_attr_translation_multi\", unnam..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (i32, i32), sym_name = \"simple_subi\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 4 : i32}> : () -> i32\n    %1 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedAnyOfConstraint\"}> ({\n    %0 = \"testd.anyof\"() : () -> i1\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_invariant_nested_loop\"}> ({\n    %0 = \"arith.constant\"() <{value = 5 : i32}> : () -> i32\n    \"test.graph_loop\"() ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"testSingleInvolution\"}> ({\n  ^bb0(%arg8: i32):\n    %16 = \"test.op_involution_trait_no_operation_fold\"(%arg8) : (i32) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replacement_op_not_found\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.foo\"() {replace_with_new_op = \"test.bar\"} : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, tensor<1xi32>) -> (tensor<1xf32>, tensor<1xi32>), sym_name = \"test_identity\"}> ({\n  ^bb0(%arg0: tensor<1xf32>, %arg1: tensor<1xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_exp2\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_clamp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.clamp\"(%arg0) <{ma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xi32>) -> index, sym_name = \"dim_of_unranked\"}> ({\n  ^bb0(%arg0: memref<*xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"by_type\"}> ({\n    %1 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %2 = \"arith.constant\"() <{value = 1.000000e+..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test\"}> ({\n    \"test.emit_error\"() {attr = \"emit_error\"} : () -> ()\n    \"test.do_not_emit_error\"() {attr = \"do_not_emit_er..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sin_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sin\"(%arg0) <{fastmath = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_une\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1xi1>, sym_name = \"reduce_any_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[true, true, true], [true, false, true]]> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10xi32>) -> tensor<10xi32>, sym_name = \"test_custom\"}> ({\n  ^bb0(%arg0: tensor<10xi32>):\n    %0 = \"tosa.custom\"(%arg0) <{domain_name = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x5xi32>) -> index, sym_name = \"dim_const\"}> ({\n  ^bb0(%arg0: tensor<3x5xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> f64, sym_name = \"uitofp_i16_ext_f64\"}> ({\n  ^bb0(%arg0: i16):\n    %0 = \"arith.extui\"(%arg0) : (i16) -> i64\n    %1 = \"arith.uitofp\"(%0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x6x32xf32>, index, index) -> f32, sym_name = \"extract_from_static_shape\"}> ({\n  ^bb0(%arg0: tensor<2x6x32xf32>, %arg1: index, %arg2: in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededConstraintVars2\"}> ({\n    %0:2 = \"testd.constraint_vars\"() : () -> (i64, i64)\n    \"func.return\"() : () -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"return_arg\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    \"func.return\"(%arg0) : (tensor<?xf32>) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"arith.constant\"() <{value = false}> : () -> i1\n    %1 = \"scf.if\"(%0) ({\n      \"scf.yield\"(%0) : (i1) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"empty_if2\"}> ({\n  ^bb0(%arg0: i1):\n    \"scf.if\"(%arg0) ({\n      \"scf.yield\"() : () -> ()\n    }, {\n      \"scf.yield\"() : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"typeFitsAttr\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.attr_in_type_out<i32>\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>, tensor<2x3xi32>, tensor<1xi8>) -> tensor<2x3xi32>, sym_name = \"mul_no_const_shift\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> index, sym_name = \"tensor_dim_of_iter_arg_no_canonicalize\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x2x3xi32>) -> tensor<4x2x3xi32>, sym_name = \"add_bcast_zero_int\"}> ({\n  ^bb0(%arg0: tensor<4x2x3xi32>):\n    %0 = \"tosa.const\"() <{value..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x42x?xf32>) -> (), sym_name = \"mixed_dealloc\"}> ({\n  ^bb0(%arg0: memref<?x42x?xf32>):\n    \"memref.dealloc\"(%arg0) : (memref<?x42x?xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reverse\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"basic_memset_inline_constant\", unnamed_addr = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"legal_params_for_loop\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    %0 = \"arith.constant\"() <{value ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (si32, si32, si32) -> si32, sym_name = \"clamp_slessthanequal\"}> ({\n  ^bb0(%arg0: si32, %arg1: si32, %arg2: si32):\n    %0 = \"spirv.SLessThanEqual..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>) -> tensor<4xf32>, sym_name = \"clamp_f32_not_noop\"}> ({\n  ^bb0(%arg0: tensor<4xf32>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 3...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_reverse_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"minui\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.minui\"(%arg0, %arg1) : (i32, i32) -> i32\n    \"func.re..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i1, sym_name = \"arith_trunci_to_i1\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.trunci\"(%arg0) <{overflowFlags = #arith.overflow<none>}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"external_def\", sym_visibility = \"private\"}> ({\n  }) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x1xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6], [7, 8, 9]]> : tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_log\"}> ({\n    ^bb0(%arg0: f16, %arg1: f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x5xi32>) -> index, sym_name = \"dim_dynamic\"}> ({\n  ^bb0(%arg0: memref<?x5xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> i1, sym_name = \"complex_eq\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex.eq\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"no_volatile_memset\", unnamed_addr = 0 : i64, visibi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"noramalized_loops_with_yielded_iter_args\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.op\"() : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> !shape.shape, sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n    %0 = \"shape.any\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!test.test_tensor<[42], f32>) -> (), sym_name = \"custom_tensor\"}> ({\n  ^bb0(%arg0: !test.test_tensor<[42], f32>):\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_expm1\"}> ({\n    ^bb0(%arg0: f16, %arg1: f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "linalg"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x16x?xf32>, tensor<2x?x?xf32>) -> (index, index, index), sym_name = \"dim_of_softmax_op\"}> ({\n  ^bb0(%arg0: tensor<?x16x?xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_arithmetic_right_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<4x4xf16>) -> (), sym_name = \"assume_alignment\"}> ({\n  ^bb0(%arg0: memref<4x4xf16>):\n    %0 = \"memref.assume_alignment\"(%arg0) <{alignmen..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.symbol\"() <{sym_name = \"foo\"}> : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x1x3xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_xor\"}> ({\n  ^bb0(%arg0: tensor<13x1x3xi1>, %arg1: tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"fold_index_cast_on_index\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"shape.size_to_index\"(%arg0) : (index) -> index\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"func_decl_with_subprogram\", unnamed_addr = 0 : i64,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"inner_func_2\"}> ({\n  ^bb0(%arg6: tensor<?xf32>):\n    %2 = \"arith.constant\"() <{value = 1.000000e+0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"replace_single_iteration_const_diff\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 1 : index}> : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_logical_not\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xi1>):\n    %0 = \"tosa.logical_not\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> f32, sym_name = \"test_ops_verify\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.constant\"() <{value = 5.300000e+00 : f32}> : () -> f32\n    %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> tensor<f32>, sym_name = \"inlined_if_fn\"}> ({\n  ^bb0(%arg4: tensor<f32>, %arg5: tensor<f32>, %arg6: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{arg_attrs = [{spirv.decoration = #spirv.decoration<AliasedPointer>}], function_control = #spirv.function_control<None>, function_type = (!spirv.ptr<!spirv.ptr<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_int_from_ptr\", unnamed_addr = 0 : i64, visibil..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x1x3xf32>, tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_greater_equal_rank_invalid\"}> ({\n  ^bb..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (memref<1xf32>, memref<2xf32>), sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_tan\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.tan\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, memref<?xf64>, f64) -> (memref<?xf64>, index), sym_name = \"sparse_push_back\"}> ({\n  ^bb0(%arg0: index, %arg1: memref<?xf64>, %arg2: f64)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"reduce_min_nan_ignore\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "ub",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> i32, sym_name = \"hoist_variant_scf_if_failure\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x?x?x13x?xf32>) -> (), sym_name = \"mixed_memref_dim\"}> ({\n  ^bb0(%arg0: memref<42x?x?x13x?xf32>):\n    %0 = \"arith.constant\"() <{value ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_transitive_use_materialization\"}> ({\n    %0 = \"test.another_type_producer\"() : () -> f32\n    \"foo.return\"(%0) : (f32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> tensor<*xf32>, sym_name = \"unranked_reduce\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis = 0 :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"verifyDirectPattern\"}> ({\n    %0 = \"test.illegal_op_a\"() : () -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (i32, i32), sym_name = \"public\"}> ({\n  ^bb0(%arg0: i32):\n    %2 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    \"func.return\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"arith.addi\"(%1, %2) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index\n  %1 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n  %2 = \"arith.consta..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_clamp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.clamp\"(%arg0) <{ma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"reduce_float_dyn_rank_1\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis = 0 : i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0 * 4)>\n#map1 = affine_map<()[s0, s1] -> (s0 * 4)>\n#map2 = affine_map<()[s0, s1] -> (s1)>\n#map3 = affine_map<()[s0, s1] -> (1024)>\n\"builtin.module\"() ({\n  \"func.func\"() <{f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1x6x1xi32>, tensor<7x1x5xi32>) -> tensor<?x7x6x5xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<?x1x6x1xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1), sym_name = \"cmpf_inf\"}> ({\n    %0 = \"arith.constant\"() <{value = 4.20000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> (), sym_name = \"no_block_function\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "omp"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi64>) -> (), sym_name = \"test_i64\"}> ({\n  ^bb0(%arg0: tensor<1xi64>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 9223372036854775807 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"split_handle\"}> ({\n  ^bb0(%arg1: index, %arg2: index, %arg3: index):\n    %4 = \"arith.muli\"(%arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi1>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_reduce_any_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_log2\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dummy",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (tensor<5xi1>, tensor<5xi1>), sym_name = \"scf_while_non_equiv_condition_and_body\"}> ({\n  ^bb0(%arg0: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"scf_for_result_infer\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{v..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<f32, CrossWorkgroup>, i64) -> (), sym_name = \"ptr_access_chain1\"}> ({\n  ^bb0(%arg0: !spirv.ptr<f32, CrossWorkgroup>, %arg1: i64):\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (), sym_name = \"isnan_double\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.isnan\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) -> i1\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"test.source\"() : () -> !shape.witness\n    %1 = \"shape.assuming\"(%0) ({\n      %2 = \"test.source\"() : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_ceil\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.ceil\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>) -> tensor<4xi32>, sym_name = \"tensor.cast_chain_regain\"}> ({\n  ^bb0(%arg0: tensor<4xi32>):\n    %0 = \"tensor.cast\"(%arg0) : (tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x4x?xf32>, tensor<2x4x?xf32>) -> tensor<?x4x?xf32>, sym_name = \"two_dynamic_one_direct_shape\"}> ({\n  ^bb0(%arg0: tensor<?x4x?xf32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0, s1, s2] -> (s0, s1, s2 * 2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"merge..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (i1, i1, i1), sym_name = \"different_attributes\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.cmpi\"(%arg0, %arg1) <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"fold_exp_log\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.log\"(%arg0) : (tensor<?x1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_with_control\"}> ({\n    \"spirv.mlir.loop\"() <{loop_control = #spirv.loop_control<Unroll>}> ({\n    }) : () -> ()\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f64) -> (f16, f64), sym_name = \"gpu_log\"}> ({\n    ^bb0(%arg0: f16, %arg1: f64):\n      %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{function_control = #spirv.function_control<None>, function_type = () -> (), sym_name = \"callee\"}> ({\n    \"spirv.Return\"() : () -> ()\n  }) : () -> ()\n  \"func.fu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"scf_for_result_infer_dynamic_init_big_step\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 0 : inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2xf32>, tensor<2x?xf32>) -> (), sym_name = \"test_concat_dynamic\"}> ({\n  ^bb0(%arg0: tensor<1x2xf32>, %arg1: tensor<2x?xf32>):\n    %0 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x21x1xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_max_rank_invalid\"}> ({\n  ^bb0(%arg0:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi16>, tensor<1xi16>, tensor<1xi16>) -> tensor<13x21x3xi16>, sym_name = \"test_negate\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi16>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"map1d\"}> ({\n  ^bb0(%arg4: index, %arg5: index, %arg6: index):\n    %2:2 = \"new_processor_id_and_range\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"minimumf\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.minimumf\"(%arg0, %arg1) <{fastmath = #arith.fastma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?x4x?x6x7xi32>) -> memref<?x?x42xi32>, sym_name = \"simplify_collapse\"}> ({\n  ^bb0(%arg0: memref<?x?x4x?x6x7xi32>):\n    %0 = \"memref.co..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"speculate_tensor_dim_known_rank_known_dim_inbounds\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> (), sym_name = \"use_of_replaced_bbarg\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"test.op_with_region_fold\"(%arg0) ({\n      \"foo.op_with_region..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!smt.bool) -> (), sym_name = \"arrayOperations\"}> ({\n  ^bb0(%arg0: !smt.bool):\n    %0 = \"smt.array.broadcast\"(%arg0) {smt.some_attr} : (!smt.boo..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<1x21x3xf32>, sym_name = \"test_reduce_product\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reduce_pro..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_div_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x4x8xf32>, tensor<?x4x8xf32>) -> (tensor<?x4x8xf32>, tensor<?x4x8xf32>), sym_name = \"test_dynamic_batch_fft2d\"}> ({\n  ^bb0(%arg0: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f64, sym_name = \"f_convert_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FConvert\"(%arg0) : (f32) -> f64\n    \"spirv.ReturnValue\"(%0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>, tensor<i32>) -> tensor<i32>, sym_name = \"broadcast_scalar_scalar_scalar\"}> ({\n  ^bb0(%arg0: tensor<i32>, %arg1: tensor<i32>):\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_cos\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.cos\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"group_non_uniform_any\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"spirv.GroupNonUniformAny\"(%arg0) <{execution_scope = #spirv.sco..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"simple_move\"}> ({\n    %2 = \"before\"() : () -> f32\n    %3 = \"moved_op\"() : () -> f32\n    %4 = \"foo\"(%3) : (f32) -> f32\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sin\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sin\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf64>) -> (), sym_name = \"test_const_f64\"}> ({\n  ^bb0(%arg0: tensor<1xf64>):\n    %0 = \"tosa.const\"() <{values = dense<0.000000e+00> : t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<3x4xf32>, tensor<3x4xf32>), sym_name = \"multiple_constants\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<7.000000e+00> : tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"clamp_ulessthanequal\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    %0 = \"spirv.ULessThanEqual\"(%arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_add\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.match_anchor_1\"() ({\n  ^bb0(%arg1: i32):\n    %3 = \"test.match_anchor_2\"() : () -> i32\n    \"test.region_terminator\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> (i8, i8, i8, i8), sym_name = \"test_maxui\"}> ({\n  ^bb0(%arg1: i8):\n    %7 = \"arith.constant\"() <{value = -1 : i8}> : () -> i8\n    %8 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi48>) -> (), sym_name = \"rescale_i48_unsigned_output_implicit\"}> ({\n  ^bb0(%arg0: tensor<2xi48>):\n    %0 = \"tosa.const\"() <{values = d..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"attrFitsAttr\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.attr_in_type_out<\"foo\">\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>, tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_logical_right_shift_rank_invalid\"}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_rsqrt_nnan_ninf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.rsqrt\"(%arg0) <{fastmat..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %0 = \"smt.int.constant\"() <{value = 0 : ui64}> : () -> !smt.int\n    %1 = \"smt.constant\"() <{value = true}> : () -> !smt.bool\n    %2 = \"smt.array.broadcast..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"no_remap_nested\"}> ({\n    \"foo.region\"() ({\n    ^bb0(%arg0: f64, %arg1: i16, %arg2: f64):\n      \"test.invalid\"(%arg0, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_max_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_max\"(%arg0) <{ax..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "irdl"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"irdl.dialect\"() <{sym_name = \"test_irdl_to_cpp\"}> ({\n    \"irdl.type\"() <{sym_name = \"test_derived\"}> ({\n      %0 = \"irdl.base\"() <{base_name = \"!builtin.integer\"}> : () -> !ir..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xf16>) -> memref<?x?x?xf16>, sym_name = \"no_interface_no_operands\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xf16>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"make_val\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (index, index, index) -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n      \"func.return\"() : () -> ()\n    }) : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x3xf32>, tensor<3x3xf32>) -> tensor<3x3xf32>, sym_name = \"copy_sign_tensor\"}> ({\n  ^bb0(%arg0: tensor<3x3xf32>, %arg1: tensor<3x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sub\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xf32>, %arg1: tensor<13x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_identity_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"correct_number_of_regions\"}> ({\n    \"test.two_region_op\"() ({\n      \"work\"() : () -> ()\n    }, {\n      \"work\"() : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.self_referencing<i32>) -> (), sym_name = \"no_references\"}> ({\n  ^bb0(%arg0: !testd.self_referencing<i32>):\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>) -> index, sym_name = \"tensor_dim_of_loop_result\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x11x11x3xf32>, sym_name = \"test_const_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<3.000000e+00> : tensor<3x11x11x3xf32>}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i1, sym_name = \"arith_cast_fptoui_i1\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.fptoui\"(%arg0) : (f32) -> i1\n    \"func.return\"(%0) : (i1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_half_words\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<half>}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    \"smt.check\"() ({\n      \"smt.yield\"() : () -> ()\n    }, {\n      \"smt.yield\"() : () -> ()\n    }, {\n      %0 = \"smt.constant\"() <{value = true}> : () -> !smt..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"nested_region\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    \"scf.for\"(%arg0, %arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>, tensor<i32>) -> tensor<4xi32>, sym_name = \"broadcast_tensor_scalar_tensor\"}> ({\n  ^bb0(%arg0: tensor<4xi32>, %arg1: tensor<i32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, tensor<3xf32>) -> tensor<3xf32>, sym_name = \"test_add_1d_broadcast_static_to_static\"}> ({\n  ^bb0(%arg0: tensor<1xf32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_abs\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.abs\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"update_tracked_op_mapping\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.foo\"() {replace_with_new_op = \"test.foo\"} : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"no_affine_maps\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi16>, sym_name = \"test_cast_i32_i16\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.cast\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x1x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_greater_equal\"}> ({\n  ^bb0(%arg0: tensor<13x1x3xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<f32>, sym_name = \"test_mul_scalar\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):\n    %0 = \"tosa.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "foo"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"foo.test\"() : () -> !test.test_type\n  %1 = \"foo.test\"() : () -> i32\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"real_number\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.re\"(%arg0) <{fastmath = #arith.fastmath<none..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>, tensor<*xi32>) -> tensor<2xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<*xi32>, %arg1: tensor<*xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "testd",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedReuseConstraintBetweenRegionAndOperand\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : i32}> : () -> i32\n    \"testd..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_sub\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xi32>, %arg1: tensor<13x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"test_const_rank_valid\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> !shape.shape, sym_name = \"no_fold\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 3 : index}> : () -> index\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (1000, d0 + 512, s0 + 1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"affine_max\"}> ({\n  ^bb0(%arg0: index, %arg1: in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_umin_reduce\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformUMin\"(%arg0) <{execution_scope ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"allowed_cases_pass\"}> ({\n    %0 = \"test.i64_enum_attr\"() <{attr = 5 : i64}> : () -> i32\n    %1 = \"test.i64_enum_attr\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"pair\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1 = \"builtin.u..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_add_zero_rhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<0.000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"side_effect\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"al..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"fold_trivial_memory_space_cast\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"memref.memory_space_c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_log\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.log\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"unsupported_constant_tensor_2xf64_0\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<0.000000e+00> : tensor<2xf64>}> : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_floor\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.floor\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1, d2) -> (d0, d1, d1, d0, d2)>\n#map1 = affine_map<(d0, d1, d2) -> (d0, d0, d1, d2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, index) -> (),..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_min_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_min\"(%arg0) <{ax..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"customOpParserPrinter\"}> ({\n    \"test.dynamic_custom_parser_printer\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> tensor<*xf32>, sym_name = \"unranked_rsqrt_op\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sigmoid\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sigmoid\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_true_if\"}> ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    \"scf.if\"(%0) ({\n      \"test.op\"() : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"while_cmp_rhs\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"scf.while\"() ({\n      %3 = \"test.val\"() : () -> i32\n      %4 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x2x5xf32>, sym_name = \"tensor.reshape\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<0.000000e+00> : tensor<2x10xf32>}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"add_lr\"}> ({\n  ^bb0(%arg8: f32, %arg9: f32):\n    %7 = \"arith.addf\"(%arg8, %arg9) <{fastmath = #arith.fastmath<non..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"compare_scf_for\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    \"scf.for\"(%arg0, %arg1, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"unary\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"emitc.unary_minus\"(%arg0) : (i32) -> i32\n    %1 = \"emitc.unary_plus\"(%arg0) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"default_value_printing\"}> ({\n  ^bb0(%arg0: i32):\n    \"test.default_value_print\"(%arg0) <{value_with_default = 0 : i32}>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, index) -> (), sym_name = \"extract\"}> ({\n  ^bb0(%arg6: tensor<1xf32>, %arg7: index):\n    %9 = \"tensor.extract\"(%arg6, %arg7) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x1xi1>, sym_name = \"reduce_all_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[true, false, false], [false, false, false..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "tensor",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> index, sym_name = \"successful_pass_application\"}> ({\n  ^bb0(%arg1: tensor<5xf32>):\n    %2 = \"arith.constant\"() <{value = 0 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>, tensor<13x21x3xi1>) -> tensor<26x21x3xi1>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>, %arg1: tensor<13..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?x?x?x?xf32>) -> memref<?x?xf32>, sym_name = \"compose_collapse_of_collapse\"}> ({\n  ^bb0(%arg0: memref<?x?x?x?x?xf32>):\n    %0 = \"memre..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sqrt_nnan_ninf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sqrt\"(%arg0) <{fastmath ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"fold_mul_index\"}> ({\n    %0 = \"arith.constant\"() <{value = 2 : index}> : () -> index\n    %1 = \"arith.constant\"() <{valu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_logical_left_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"basic_memset_constant\", unnamed_addr = 0 : i64, vis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (index, index), sym_name = \"slicing_test_multiple_return\"}> ({\n  ^bb0(%arg0: index):\n    %0:2 = \"slicing-test-op\"(%arg0, %arg0) : (in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_block_argument_not_converted\"}> ({\n    \"test.unsupported_block_arg_type\"() ({\n    ^bb0(%arg0: index):\n      \"test.ret..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"string_attr_custom_type_valid\"}> ({\n    \"test.string_attr_with_type\"() <{attr = \"string_data\" : i64}> : () -> ()\n    \"func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (tensor<?xf32>, f32), sym_name = \"inner_func\"}> ({\n  ^bb0(%arg1: tensor<?xf32>):\n    %1 = \"arith.constant\"() <{value = 1.0000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededDynamicTypeVerifier\"}> ({\n    %0 = \"unregistered_op\"() : () -> !test.dynamic_singleton\n    %1 = \"unregistered_op\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"module_a\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"nested\"}> ({\n    }) {sym.new_name = \"replaced_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> i64, sym_name = \"while_loop_before_typeconv\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"scf.while\"(%arg0) ({\n    ^bb0(%arg2: index):\n      ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<f32>, sym_name = \"correct_variadic_result\"}> ({\n    %0:5 = \"test.mixed_normal_variadic_result\"() : () -> (tensor<f32>, tensor<f32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xi1>, tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_select\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xi1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_single_round_rescale\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.const\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"arith_shrui_i1\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"arith.shrui\"(%arg0, %arg1) : (i1, i1) -> i1\n    \"func.r..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.SpecConstant\"() <{default_value = 1.000000e+..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<32x32x16384xf32>, tensor<32x32x16384xf32>) -> (tensor<32x32x16384xf32>, tensor<32x32x16384xf32>), sym_name = \"test_fft2d_imag_w\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_unroll_and_jam_op\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %3 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>, tensor<1xf32>) -> (), sym_name = \"test_binary_broadcast_f32\"}> ({\n  ^bb0(%arg0: tensor<4xf32>, %arg1: tensor<1xf32>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_add_test_exte..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f64) -> (), sym_name = \"fptoui\"}> ({\n  ^bb0(%arg0: f32, %arg1: f64):\n    %0 = \"arith.fptoui\"(%arg0) : (f32) -> i32\n    %1 = \"arith.fptoui\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"match\"}> ({\n  }) : () -> ()\n  \"transform.named_sequenc..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_reciprocal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reciprocal\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"rsqrt32\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global\"() <{addr_space = 0 : i32, global_type = !llvm.target<\"spirv.Image\", i32, 0>, linkage = #llvm.linkage<external>, sym_name = \"target_ext\", unnamed_addr = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> bf16, sym_name = \"convert_u32_to_bf16_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.ConvertUToF\"(%arg0) : (i32) -> bf16\n    \"spirv.R..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>, tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_bitwise_and_rank_invalid\"}> ({\n  ^bb..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> !transform.any_op, sym_name = \"eq_1\"}> ({\n  ^bb0(%arg7: !transform.any..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = -1 : index}> : () -> index\n    %1 = \"test.with_bounds\"() <{smax = 9223372..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x8x16xf32>) -> (tensor<13x8x9xf32>, tensor<13x8x9xf32>), sym_name = \"test_rfft2d_with_local_bound\"}> ({\n  ^bb0(%arg0: tensor<13x8x16xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f16) -> f16, sym_name = \"roundeven16\"}> ({\n  ^bb0(%arg0: f16):\n    %0 = \"math.roundeven\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f16) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"complex_abs\"}> ({\n  ^bb0(%arg4: complex<f32>):\n    %2 = \"complex.abs\"(%arg4) <{fastmath = #arith.fastmath<non..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> !shape.shape, sym_name = \"broadcast_on_duplicate_shapes\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1xi8>, sym_name = \"reduce_min_constant_no_overflow\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[-127, 120, -126]> : tensor<3xi8>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"unnormalized_loops\"}> ({\n    %0 = \"arith.constant\"() <{value = 2 : index}> : () -> index\n    %1 = \"arith.constant\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> tensor<i32>, sym_name = \"fold_collapse_shape_from_elements\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"tensor.from_elements\"(%arg0) : (i32) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_get_nth_parent\"}> ({\n    \"test.foo\"() ({\n      \"test.foo\"() ({\n        \"test.qux\"() ({\n          \"test.foo\"() ({\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededParent1OneOf\"}> ({\n    \"test.parent1\"() ({\n      \"test.child_with_parent_one_of\"() : () -> ()\n      \"test.finish\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> i64, sym_name = \"sparse_unary\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"sparse_tensor.unary\"(%arg0) ({\n    ^bb0(%arg1: f64):\n      %1 = \"arit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_div_zero_lhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replacement_op_not_found\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.foo\"() {replace_with_new_op = \"test.bar\"} : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x8x8xf32>, tensor<8x8x8xf32>) -> (tensor<8x8x8xf32>, tensor<8x8x8xf32>), sym_name = \"test_static_fft2d\"}> ({\n  ^bb0(%arg0: tensor<8x8x8..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"unreferenced_private_function\", sym_visibility = \"private\"}> ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"emitc_call_opaque\"}> ({\n    %2 = \"emitc.call_opaque\"() <{callee = \"func_a\"}> : () -> i32\n    %3 = \"emitc.call_opaque\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"two_bands\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value = 1 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, i1) -> tensor<f32>, sym_name = \"test_region_branch_result_in_different_result_1.c\"}> ({\n  ^bb0(%arg0: tensor<f32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (bf16) -> i32, sym_name = \"convert_bf16_to_u32_scalar\"}> ({\n  ^bb0(%arg0: bf16):\n    %0 = \"spirv.ConvertFToU\"(%arg0) : (bf16) -> i32\n    \"spirv...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3x3xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"circular_mapping\"}> ({\n    %0 = \"test.erase_op\"() ({\n      \"test.dummy_op_lvl_1\"() ({\n        \"test.dummy_op_lvl_2\"() : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"schedule_with_nondet_knobs\"}> ({\n  ^bb0(%arg1: !transf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<64xf32>, memref<64xf32>) -> (), sym_name = \"map_unary_memref\"}> ({\n  ^bb0(%arg0: memref<64xf32>, %arg1: memref<64xf32>):\n    \"linalg.map..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sub\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xf32>, %arg1: tensor<13x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_tanh\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (index, index, index, index), sym_name = \"merge_constants\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : index}> : () -> index\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xi1>, tensor<10xi1>), sym_name = \"fold_greater_eq_splat_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-10> : tensor<10xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> f32, sym_name = \"private_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{arg_attrs = [{bufferization..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<*xi32>, sym_name = \"while_dont_crash\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.add\"(%arg0, %arg0) : (tensor<i32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_product_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_product\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>, tensor<1xi32>) -> (), sym_name = \"test_binary_i32\"}> ({\n  ^bb0(%arg0: tensor<4xi32>, %arg1: tensor<1xi32>):\n    %0 = \"tosa.add\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"arith_negf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.negf\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"non_static_shape_ceil_op\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"math.ceil\"(%arg0) <{fastmat..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"inner_func_2\"}> ({\n  ^bb0(%arg6: tensor<?xf32>):\n    %2 = \"arith.constant\"() <{value = 1.000000e+0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_clamp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_v..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>, tensor<1xf32>) -> (), sym_name = \"test_binary_scalar_f32\"}> ({\n  ^bb0(%arg0: tensor<4xf32>, %arg1: tensor<1xf32>):\n    %0 = \"tos..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x2x2x1xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededParentOneOf\"}> ({\n    \"test.parent\"() ({\n      \"test.child_with_parent_one_of\"() : () -> ()\n      \"test.finish\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"parent1\"}> ({\n  ^bb0(%arg2: i32):\n    %9 = \"func.call\"(%arg2) <{callee = @child}> : (i32) -> i32\n    \"func.return\"(%9)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"shape.const_witness\"() <{passing = true}> : () -> !shape.witness\n    %1 = \"shape.const_witness\"() <{pass..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"no_spec\"}> ({\n    %0 = \"test.data_layout_query\"() : () -> !llvm.ptr\n    %1 = \"test.data_layout_query\"() : () -> !llvm.ptr<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x1xf32>, tensor<1x1x1x1x1x1x1xf32>, tensor<i1>) -> tensor<1x1x1x1x1x1x1xf32>, sym_name = \"test_cond_if_rank_valid\"}> ({\n  ^bb..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"clamp_fordlessthan\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.FOrdLessThan\"(%arg1, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"remove_op_with_inner_ops_pattern\"}> ({\n    \"test.op_with_region_pattern\"() ({\n      \"test.op_with_region_terminator\"() : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_cos\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.cos\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"dead_private_function\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_na..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x?xf32>) -> (), sym_name = \"memref_cast_mixed_to_dynamic\"}> ({\n  ^bb0(%arg0: memref<42x?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memre..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {bufferization.writable = true}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, i1) -> tensor<?xf32>, sym_nam..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"clamp_fordlessthanequal\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.FOrdLessThanEqual\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul\"}> ({\n  ^bb0(%arg0: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_olt\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3x3xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"mul_one_int\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>):\n    %0 = \"tosa.const\"() <{values = dense<0> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<*xf32>, sym_name = \"test_multiple\"}> ({\n  ^bb0(%arg0: tensor<4xf32>, %arg1: tensor<1xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedDynAttrBaseConstraintNotType\"}> ({\n    \"testd.dyn_attr_base\"() {attr1 = i32} : () -> ()\n    \"func.return\"() : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"isub_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.ISub\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1> : tensor<2x3xi32>}> : () -> tensor<2x3x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>) -> (), sym_name = \"dynamic_dims_are_maybe_equal_2\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>):\n    %0 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi16>) -> tensor<13x21x3xi16>, sym_name = \"test_clamp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi16>):\n    %0 = \"tosa.clamp\"(%arg0) <{ma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i80) -> (), sym_name = \"unsupported_integer_type\"}> ({\n  ^bb0(%arg0: i80):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, StorageBuffer>, i32) -> i32, sym_name = \"atomic_iadd\"}> ({\n  ^bb0(%arg16: !spirv.ptr<i32, StorageBuffer>, %arg17: i32):\n    %9 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_smax\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupSMax\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_equal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "some",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, f32) -> (i3, i2, i1), sym_name = \"wrapping_op\"}> ({\n  ^bb0(%arg0: i32, %arg1: f32):\n    %0:3 = \"test.wrapping_region\"() ({\n      %1:3 = \"s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_signature_conversion_no_converter\"}> ({\n    \"test.signature_conversion_no_converter\"() ({\n    ^bb0(%arg0: f32):\n     ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.SpecConstant\"() <{default_value = 5 : i32, sym_name = \"sc\"}> : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"reference_of\"}> ({\n    %0 = \"spirv.mlir.r..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> (), sym_name = \"test_simple_ui8\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.cast\"(%arg0) : (tensor<1xi8>) -> tensor<1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x4xf32>) -> !shape.shape, sym_name = \"test_non_tosa_consumer_shape\"}> ({\n  ^bb0(%arg0: tensor<4x4xf32>):\n    %0 = \"tosa.log\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testOptResultFail\"}> ({\n    %0:4 = \"testvar.opt_result\"() : () -> (i16, i32, i32, i64)\n    \"func.return\"() : () -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f16) -> f64, sym_name = \"arith_extf\"}> ({\n  ^bb0(%arg0: f16):\n    %0 = \"arith.extf\"(%arg0) : (f16) -> f32\n    %1 = \"arith.extf\"(%0) : (f32) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, index) -> f32, sym_name = \"tensor.extract\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: index):\n    %0 = \"tensor.extract\"(%arg0, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xf32>, index) -> index, sym_name = \"dim\"}> ({\n  ^bb0(%arg0: tensor<2x3xf32>, %arg1: index):\n    %0 = \"shape.dim\"(%arg0, %arg1) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> (), sym_name = \"rescale_i8\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = dense<19689> : tensor<1xi16>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2x?xf32>) -> !shape.size, sym_name = \"canonicalize_rank_size\"}> ({\n  ^bb0(%arg0: tensor<1x2x?xf32>):\n    %0 = \"shape.shape_of\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.test_transform_op\"() : () -> ()\n  %0 = \"transform.test_produce_self_handle_or_forward_operand\"() {foo = \"bar\"} : () -> !transform.any_op\n  \"transform.test_consume_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_max_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_max\"(%arg0) <{axis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"scf_for_result_infer_dynamic_init\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"func_declaration\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i32, i32) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x64xi16>, tensor<256xi16>) -> tensor<2x64xi32>, sym_name = \"test_i16_table_size\"}> ({\n  ^bb0(%arg0: tensor<2x64xi16>, %arg1: tensor<256..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_add\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> (), sym_name = \"test1\"}> ({\n  ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):\n    %6 = \"arith.addf\"(%arg2, %arg3) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> index, sym_name = \"test_tensor_dim_no_encoding\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (f32, f32, f32), sym_name = \"test_minimumf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_clamp_bf16\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.clamp\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"get_result_of_op_bbarg\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %3 = \"arith.addi\"(%arg1, %arg2) <{over..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"test.type_producer\"() : () -> !test.type_verification<i16>\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"sparse_select\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f64}> : () -> f64\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"remap_input_1_to_1\"}> ({\n  ^bb0(%arg0: i32):\n    %2 = \"test.one_variadic_out_one_variadic_in1\"(%arg0) : (i32) -> i32\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i48, i32, i8) -> i32, sym_name = \"apply_scale_test_i48\"}> ({\n  ^bb0(%arg0: i48, %arg1: i32, %arg2: i8):\n    %0 = \"tosa.apply_scale\"(%arg0, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"custom_region_names\"}> ({\n    \"test.polyfor\"() ({\n    ^bb0(%arg3: index, %arg4: index, %arg5: index):\n      \"foo\"() : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4x8xf32>) -> (tensor<5x4x5xf32>, tensor<5x4x5xf32>), sym_name = \"test_static_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<5x4x8xf32>):\n    %0:2 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"for_yields_4\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"symbol_bar\"}> ({\n    \"foo.possibly_unknown_symbol_table\"() ({\n    }) : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> tensor<f32>, sym_name = \"test_cond_if\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() {interrupt = true} : () -> f32\n    %1 = \"arith.addf\"(%0, %arg0) <{fast..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i32, i64) -> (), sym_name = \"testOptOperandFail\"}> ({\n  ^bb0(%arg0: i16, %arg1: i32, %arg2: i64):\n    \"testvar.opt_operand\"(%arg0, %arg1, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8, i8) -> i64, sym_name = \"andOfExtSI\"}> ({\n  ^bb0(%arg6: i8, %arg7: i8):\n    %9 = \"arith.extsi\"(%arg6) : (i8) -> i64\n    %10 = \"arith.extsi\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"hyperbolics\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.sinh\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<64xf32>) -> tensor<64xf32>, sym_name = \"map_no_inputs\"}> ({\n  ^bb0(%arg0: tensor<64xf32>):\n    %0 = \"linalg.map\"(%arg0) ({\n      %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xui8>) -> (), sym_name = \"rescale_i8_unsigned_input_explicit\"}> ({\n  ^bb0(%arg0: tensor<2xui8>):\n    %0 = \"tosa.const\"() <{values = den..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> (), sym_name = \"fclamp\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.GL.FClamp\"(%arg0, %arg1, %arg2) : (f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_bitwise_and\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformBitwiseAnd\"(%arg0) <{execution_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3x3xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"slicing_test_function_argument\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"slicing-test-op\"(%arg0, %arg0) : (index, inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i64, sym_name = \"u_convert_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.UConvert\"(%arg0) : (i32) -> i64\n    \"spirv.ReturnValue\"(%0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0, d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (index, index), sym_name = \"affine_min\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "cf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"cf.assert\"}> ({\n  ^bb0(%arg0: i1):\n    \"cf.assert\"(%arg0) <{msg = \"Computer says no\"}> : (i1) -> ()\n    \"func.return\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xf32>, sym_name = \"fold_add_splat_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1.000000e+00> : tensor<10xf32>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i8 ()>, linkage = #llvm.linkage<external>, sym_name = \"memset_one_byte_constant\", unnamed_addr = 0 : i64, v..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32), sym_name = \"simple_divi_unsigned\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"arith.consta..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0, s1] -> (d0)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"external_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"fu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_erf\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.erf\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"create_unregistered_op_in_pattern\"}> ({\n    %0 = \"test.illegal_op_g\"() : () -> i32\n    \"test.return\"(%0) : (i32) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>) -> (), sym_name = \"reduce_float\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis = 0 : i32}> : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f16, sym_name = \"bitcastConstantFPtoFP\"}> ({\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : bf16}> : () -> bf16\n    %1 = \"arith.bitc..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i32) -> i32, sym_name = \"test_scf_if_sink\"}> ({\n  ^bb0(%arg0: i1, %arg1: i32):\n    %0 = \"arith.addi\"(%arg1, %arg1) <{overflowFlags = #arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xi32>, tensor<3x6xi32>, tensor<?x?x?xi32>) -> (), sym_name = \"scatter_static_indices\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"scf_for_induction_var_upper_bound\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.co..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi8>, index) -> index, sym_name = \"out_of_bound_memref.dim\"}> ({\n  ^bb0(%arg0: memref<?xi8>, %arg1: index):\n    %0 = \"arith.constant\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.top_level_name_mismatch\"() : () -> ()\n  \"test.top_level_name_mismatch2\"() : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tuple<i1>) -> tuple<i1>, sym_name = \"identity_1_to_1_no_materializations\"}> ({\n  ^bb0(%arg0: tuple<i1>):\n    \"func.return\"(%arg0) : (tuple<i1>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> (), sym_name = \"self_copy\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    \"memref.copy\"(%arg0, %arg0) : (memref<?xf32>, memref<?xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x16x16xf32>, index) -> f32, sym_name = \"test_load_nontemporal\"}> ({\n  ^bb0(%arg1: memref<2x16x16xf32>, %arg2: index):\n    %1 = \"arith.c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (f32, f32), sym_name = \"static_loop_unroll_with_integer_iv\"}> ({\n    %0 = \"arith.constant\"() <{value = 7.000000e+00 : f32}> : () -> f32\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x5xi32>, index) -> index, sym_name = \"dim_any_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?x5xi32>, %arg1: index):\n    %0 = \"tensor.dim\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"one_const_op\"}> ({\n    %5 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, f32, f32) -> f32, sym_name = \"ite\"}> ({\n  ^bb0(%arg9: i1, %arg10: f32, %arg11: f32):\n    %5 = \"scf.if\"(%arg9) ({\n      \"scf.yield\"(%arg10) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {bufferization.writable = true}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, i1) -> (f32, tensor<?xf32>), ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"emit_mesh_tasks\"}> ({\n  ^bb0(%arg2: i32):\n    \"spirv.EXT.EmitMeshTasks\"(%arg2, %arg2, %arg2) : (i32, i32, i32) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {bufferization.writable = true}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, i1) -> (tensor<?xf32>, tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> (tensor<?x?xf32>, tensor<?x?xf32>), sym_name = \"no_cse_region_difference_simple\"}> ({\n  ^bb0(%arg0: tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_shift_right\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.shrui\"(%arg0, %arg1) : (i32, i32) -> i32\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> tensor<1xi16>, sym_name = \"test_error_input_output_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.const\"() <{value..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<f16>, sym_name = \"cast_int_to_float\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<4> : tensor<i32>}> : () -> tensor<i32>\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi1>, tensor<1x1x1x1x13x21x3xi1>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_logical_and_rank_invalid\"}> ({\n  ^bb0(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<23178x20000x19xf32>, tensor<23178x19x28xf32>) -> tensor<23178x20000x28xf32>, sym_name = \"test_matmul_tensor_size_invalid\"}> ({\n  ^bb0(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"const_size_to_index\"}> ({\n    %0 = \"shape.const_size\"() <{value = 123 : index}> : () -> !shape.size\n    %1 = \"shape.siz..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0 * 4)>\n#map1 = affine_map<()[s0, s1] -> (s0 * 8)>\n#map2 = affine_map<()[s0, s1] -> (s1 * 16)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"valid_pass_options\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_seque..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"remove_all_ops\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.illegal_op_a\"() : () -> i32\n    %1 = \"test.illegal_op_b\"() : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_smaller_int_type\", unnamed_addr = 0 : i64, vis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "memref",
        "affine",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0) -> (d0)>\n\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"kernels\"}> ({\n    \"gpu.func\"() <{function_type = (index, memref<?xf32>) -> f32}> ({\n    ^bb0(%arg0: index, %arg1: m..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<5x?x6xf32>, sym_name = \"empty\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"tensor.empty\"(%arg0) : (index) -> tensor<5x?x6xf32>\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.shape, sym_name = \"f\"}> ({\n    %0 = \"arith.constant\"() <{value = 3 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value = 5 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"move_region_dependencies\"}> ({\n    %2 = \"before\"() : () -> f32\n    %3 = \"moved_op_1\"() : () -> f32\n    %4 = \"moved_op_2\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"memory_barrier_1\"}> ({\n    \"spirv.MemoryBarrier\"() <{memory_scope = #spirv.scope<Workgroup>, memory_semantics = #spirv.mem..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"merge_yielding_nested_if_nv1\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"test.op\"() : () -> i32\n    %1 = \"test.op1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, index, memref<?xf32>, i8) -> (), sym_name = \"outline_empty_if_else\"}> ({\n  ^bb0(%arg0: i1, %arg1: index, %arg2: memref<?xf32>, %arg3: i8):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i2, sym_name = \"fold_trunci\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.extui\"(%arg0) : (i1) -> i8\n    %1 = \"arith.trunci\"(%0) <{overflowFl..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>) -> tensor<1xi64>, sym_name = \"test_cast_fp32_i64\"}> ({\n  ^bb0(%arg0: tensor<1xf32>):\n    %0 = \"tosa.cast\"(%arg0) : (tensor<1xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global_ctors\"() <{ctors = [], data = [], priorities = []}> : () -> ()\n  \"llvm.mlir.global_dtors\"() <{data = [], dtors = [], priorities = []}> : () -> ()\n}) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, f32) -> f32, sym_name = \"to_buffer_not_read_only\"}> ({\n  ^bb0(%arg0: index, %arg1: f32):\n    %0 = \"tensor.generate\"() ({\n    ^bb0(%arg2:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"partial_fold_map\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"get_consumer\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %2 = \"arith.muli\"(%arg1, %arg2) <{overflowFlags = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xf32>) -> tensor<*xf32>, sym_name = \"tensor.cast_to_unranked\"}> ({\n  ^bb0(%arg0: tensor<2xf32>):\n    %0 = \"tensor.cast\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<1x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_min\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "live"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"dead_function\", sym_visibility = \"private\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"transform\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.yield\"() : () -> ()\n  }) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"fold_and_merge\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %1 = \"arith.constant\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_sum_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{axis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x11x11x3xf16>, sym_name = \"test_const_f16\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<2.000000e+00> : tensor<3x11x11x3xf16>}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_reduce_min_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x4x8xf32>, tensor<1x4x8xf32>) -> (tensor<1x4x8xf32>, tensor<1x4x8xf32>), sym_name = \"test_static_fft2d\"}> ({\n  ^bb0(%arg0: tensor<1x4x8..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0:2 = \"test.some_returning_op\"() : () -> (i32, i64)\n  %1 = \"test.some_returning_op\"() : () -> index\n  %2:2 = \"test.some_other_returning_op\"() : () -> (f32, f64)\n  \"builtin.mod..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<13..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i16>, sym_name = \"cast_int_to_int_trunc\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-1> : tensor<i32>}> : () -> tensor<i32>\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"callee1\"}> ({\n  ^bb0(%arg1: i32):\n    %1 = \"arith.addi\"(%arg1, %arg1) <{overflowFlags = #arith.overflow<none>}> : (i32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"inner_func\"}> ({\n  ^bb0(%arg6: tensor<?xf32>):\n    \"func.return\"(%arg6) : (tensor<?xf32>) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (tensor<?xf32>, f32), sym_name = \"inner_func\"}> ({\n  ^bb0(%arg1: tensor<?xf32>):\n    %1 = \"arith.constant\"() <{value = 1.0000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> (i8, i8, i8, i8), sym_name = \"test_minsi\"}> ({\n  ^bb0(%arg1: i8):\n    %7 = \"arith.constant\"() <{value = 127 : i8}> : () -> i8\n    %8 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"gpu_sync\"}> ({\n      \"gpu.barrier\"() : () -> ()\n      \"func.return\"() :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i64) -> (), sym_name = \"sitofp\"}> ({\n  ^bb0(%arg0: i32, %arg1: i64):\n    %0 = \"arith.sitofp\"(%arg0) : (i32) -> f32\n    %1 = \"arith.sitofp\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"erase_barriers\"}> ({\n    \"gpu.barrier\"() : () -> ()\n    \"gpu.barrier\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"while_unused_arg2\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"scf.while\"(%arg0) ({\n    ^bb0(%arg2: i32):\n      %2 = \"test.val\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "bufferization",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> index, sym_name = \"dim_of_tensor_load\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x5x3xf32>, tensor<?x3x6xf32>) -> tensor<?x5x6xf32>, sym_name = \"matmul_dyn_batch\"}> ({\n  ^bb0(%arg0: tensor<?x5x3xf32>, %arg1: tensor<?..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i10 ()>, linkage = #llvm.linkage<external>, sym_name = \"only_byte_aligned_integers_memset\", unnamed_addr = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> (), sym_name = \"test_negate_quantized\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_umin\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupUMin\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, index, memref<?xf32>, i8) -> (), sym_name = \"if_no_else\"}> ({\n  ^bb0(%arg1: i1, %arg2: index, %arg3: memref<?xf32>, %arg4: i8):\n    \"scf.if..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi8>, tensor<5x4xi8>) -> (), sym_name = \"clamp_nan_ignore_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi8>, %arg1: tensor<5x4xi8>):\n    %0 = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>, index, index, index) -> (tensor<?xf32>, tensor<?xf32>), sym_name = \"scf_for\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_unroll_op\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %3 = \"arith.constant\"() <{value =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>, tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_logical_left_shift_rank_invalid\"}> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.type2<i64>) -> (), sym_name = \"wrong_parameter_type2\"}> ({\n  ^bb0(%arg0: !testd.type2<i64>):\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"cast_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.cast\"(%arg0) : (tensor<?x1xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"clamp_twice_with_nan_propagate_ignore_is_not_single_clamp\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_unroll_and_jam_op\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %3 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_double_words\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<double>}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10xf32>, memref<10xf32>) -> (), sym_name = \"memcpy_after_cast\"}> ({\n  ^bb0(%arg0: memref<10xf32>, %arg1: memref<10xf32>):\n    %0 = \"memr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8xf32>) -> tensor<8xf32>, sym_name = \"math_fpowi_pos_even_power\"}> ({\n  ^bb0(%arg0: tensor<8xf32>):\n    %0 = \"arith.constant\"() <{value ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"return_void\", sym_visibility = \"private\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_ty..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<10xf32>, sym_name = \"cast_to_static_dim\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg2: tensor<?xf32>):\n    %8 = \"tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"ub\"}> ({\n    %0 = \"ub.poison\"() <{value = #ub.poison}> : () -> index\n    \"func.return\"(%0) : (index) -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i1) -> i32, sym_name = \"clean_region_branch_op_erase_it\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg2: i32, %arg3: i1):\n    %1 = \"scf.whi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xi32>, tensor<3x6xi32>) -> (), sym_name = \"gather_dynamic_values\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xi32>, %arg1: tensor<3x6xi32>):\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i128, memref<4xi128, 1>) -> (), sym_name = \"store_i128\"}> ({\n  ^bb0(%arg0: i128, %arg1: memref<4xi128, 1>):\n    %0 = \"arith.constant\"() <{value..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testOptResultFail\"}> ({\n    %0 = \"testvar.opt_result\"() : () -> i16\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"recursively_legal_invalid_op\"}> ({\n    \"builtin.module\"() ({\n      %1 = \"test.illegal_op_f\"() : () -> i32\n    }) {test.rec..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_iadd\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupIAdd\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "math",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.some_op_with_region\"() ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.atan\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) -> f64\n    \"test.possible_terminator\"() : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<14x19xf32>) -> tensor<14xi32>, sym_name = \"test_argmax\"}> ({\n  ^bb0(%arg0: tensor<14x19xf32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"create_block\"}> ({\n    \"test.create_block\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_true_if_with_values\"}> ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 = \"scf.if\"(%0) ({\n      %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_all_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_all\"(%arg0) <{axis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f16) -> f16, sym_name = \"unsupported_f16_type\"}> ({\n  ^bb0(%arg0: f16):\n    %0 = \"math.absf\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f16..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "unregistered_dialect"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"unregistered_dialect.op\"() : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<32xf32>, sym_name = \"clone_after_cast\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref<?xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>, tensor<1xi8>) -> tensor<13x21x3xf32>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!test.optional_value_type, !test.optional_value_type<3>) -> (), sym_name = \"test\"}> ({\n  ^bb0(%arg0: !test.optional_value_type, %arg1: !test.op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<f32>, sym_name = \"test_add_rank_valid\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):\n    %0 = \"tosa...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_sigmoid_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_fmul\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.KHR.GroupFMul\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x7x7xf32>, tensor<1x1x7x7xf32>) -> tensor<1x4x7x7xf32>, sym_name = \"wide_fold\"}> ({\n  ^bb0(%arg0: tensor<1x1x7x7xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"badllvmlinkage\", sym_visibility = \"private\"}> ({\n  }) {llvm.linkage = 3 : i64} : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xi1>, tensor<10xi1>), sym_name = \"fold_greater_eq_splat_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<4.000000e+00> : tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>, index, index) -> (), sym_name = \"prefetch\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>, %arg1: index, %arg2: index):\n    \"memref.prefet..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<4x4x?xf32>) -> (), sym_name = \"rank\"}> ({\n  ^bb0(%arg0: memref<4x4x?xf32>):\n    %0 = \"memref.rank\"(%arg0) : (memref<4x4x?xf32>) -> index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32xf32>, memref<32xf32>) -> (), sym_name = \"load_store_nontemporal\"}> ({\n  ^bb0(%arg0: memref<32xf32>, %arg1: memref<32xf32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<6x6x?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32>, sym_name = \"winograd_output_dyn\"}> ({\n  ^bb0(%arg0: tensor<6x6x?x?x?x?xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>) -> (tensor<?xf32>, tensor<?xf32>), sym_name = \"recursive_function\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"arith_index_cast\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.index_cast\"(%arg0) : (i32) -> index\n    %1 = \"arith.index_c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{}, {test.erase_this_arg}, {}, {test.erase_this_arg}, {}], function_type = (tensor<1xf32>, f32, tensor<2xf32>, f32, tensor<3xf32>) -> (), sym_name ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<4xi32>, sym_name = \"test_const\"}> ({\n  ^bb0(%arg3: index):\n    %2 = \"tosa.const\"() <{values = dense<[3, 0, 1, 2]> : tensor<4xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> tensor<f32>, sym_name = \"test_cond_if\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (si32, si32, si32) -> si32, sym_name = \"clamp_slessthanequal\"}> ({\n  ^bb0(%arg0: si32, %arg1: si32, %arg2: si32):\n    %0 = \"spirv.SLessThanEqual..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<4x8xf32>, index, index) -> f32, sym_name = \"memref_load\"}> ({\n  ^bb0(%arg0: memref<4x8xf32>, %arg1: index, %arg2: index):\n    %0 = \"memr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (f32, f32), sym_name = \"out_of_place_bufferization\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xi1>, tensor<10xi1>), sym_name = \"fold_eq_splat_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-10> : tensor<10xi32>}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (f32, f32, f32, f32), sym_name = \"test_minnumf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x2x4xf32>) -> (), sym_name = \"test_dynamic_batch_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<?x2x4xf32>):\n    %0:2 = \"tosa.rfft2d\"(%arg0) : (tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "tensor",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> index, sym_name = \"not_isolated_from_above\"}> ({\n  ^bb0(%arg1: tensor<5xf32>):\n    %2 = \"arith.constant\"() <{value = 0 : inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i8, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i8}> : () -> i8\n    %1 = \"test.with_bounds\"() <{smax = 127 : i8, smin..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>, sym_name = \"test_add_1d_matching_no_broadcast\"}> ({\n  ^bb0(%arg0: tensor<1xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"ops\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"complex.constant\"() <{value = [1.000000e-01, -1.000000e+00]}> : () -> complex<f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i8>, tensor<i32>, tensor<f32>, tensor<1xi8>, tensor<1xi32>, tensor<1xf32>) -> (), sym_name = \"multi_tensor_rank_of_success\"}> ({\n  ^bb0(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"store_load_forward\", unnamed_addr = 0 : i64, visibi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i64, f32, i32), sym_name = \"test_align_args\"}> ({\n    %0 = \"test.test\"() : () -> f32\n    %1 = \"test.test\"() : () -> i32\n    %2 = \"test.te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, i32) -> f32, sym_name = \"group_non_uniform_rotate_khr\"}> ({\n  ^bb0(%arg0: f32, %arg1: i32):\n    %0 = \"spirv.GroupNonUniformRotateKHR\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"empty_tensor_dynamic_dim\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 2 : index}> : () -> ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"complex_angle_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.angle\"(%arg0) <{fastmath = #arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> (), sym_name = \"if_test_simple\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tensor<i1>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"uplift_while\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"scf.while\"(%arg0) ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0, s1] -> (s0 + 4, s1 + 7)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"do..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"maximum_nan_propagate\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "irdl"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"irdl.dialect\"() <{sym_name = \"dialect\"}> ({\n    \"irdl.type\"() <{sym_name = \"type\"}> ({\n      %0 = \"irdl.c_pred\"() <{pred = \"::llvm::isa<::mlir::IntegerAttr>($_self)\"}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x4x8xf32>, tensor<1x4x8xf32>) -> (tensor<1x4x8xf32>, tensor<1x4x8xf32>), sym_name = \"test_fft2d\"}> ({\n  ^bb0(%arg0: tensor<1x4x8xf32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>) -> (), sym_name = \"reduce_float_dyn_multiple\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>):\n    %0 = \"tosa.reduce_max\"(%arg0) <{axis = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (index, index), sym_name = \"swappingOperands\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0:2 = \"builtin.unrealized_conversi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"test_negf\"}> ({\n    %2 = \"arith.constant\"() <{value = 2.000000e+00 : f32}> : () -> f32\n    %3 = \"arith.negf\"(%2) <{fastma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_atan2\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"comple..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xf32>) -> (tensor<2x3xf32>, tensor<2x3xf32>), sym_name = \"mul_zero_broadcast\"}> ({\n  ^bb0(%arg0: tensor<2x3xf32>):\n    %0 = \"tosa.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"payload_for_schedule_with_selected_knobs\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"tr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"clone_before_dealloc\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "mpi"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<100xf32>) -> (), sym_name = \"mpi_test\"}> ({\n  ^bb0(%arg0: memref<100xf32>):\n    %0 = \"mpi.init\"() : () -> !mpi.retval\n    %1 = \"mpi.comm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> i32, sym_name = \"combineIfs3\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    %0 = \"scf.if\"(%arg0) ({\n      %2 = \"test.firstCodeTrue\"() : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_words\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<word>}> : () -> ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "affine",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0)>\n\"builtin.module\"() ({\n  %0 = \"test.foo\"() : () -> index\n  \"test.func\"() ({\n  ^bb0(%arg0: memref<?xf32>):\n    %1 = \"affine.load\"(%arg0, %0) <{map = #map}> : (memref<?xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"print_message\"}> ({\n  }) : () -> ()\n  \"transform.named..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    \"foo\"() : () -> ()\n    \"test.two_region_op\"() ({\n      \"work\"() : () -> ()\n    }, {\n      \"work\"() : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32), sym_name = \"extract_from_tensor.from_elements_3d\"}> ({\n    %0 = \"arith.const..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi8>, tensor<5x4xi8>) -> (), sym_name = \"argmax_nan_ignore_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi8>, %arg1: tensor<5x4xi8>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "unknown"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"callable\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg0: i32):\n    \"unknown.return\"(%arg0) : (i32) -> ()\n  }) : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg1: !transform.any_op):\n    %0 = \"transform.collect_match..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf16>) -> tensor<4xf16>, sym_name = \"clamp_f16_is_noop\"}> ({\n  ^bb0(%arg0: tensor<4xf16>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 0x7..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> f32, sym_name = \"convert_u_to_f_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.ConvertUToF\"(%arg0) : (i32) -> f32\n    \"spirv.ReturnVa..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, tensor<?xf32>) -> tensor<?xf32>, sym_name = \"test_add_1d_broadcast_static_to_dynamic\"}> ({\n  ^bb0(%arg0: tensor<1xf32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededAnyConstraint\"}> ({\n    %0 = \"testd.any\"() : () -> i32\n    %1 = \"testd.any\"() : () -> i64\n    \"func.return\"() : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x?x1x1x1xf32>) -> tensor<?xf32>, sym_name = \"fold_collapse_of_collapse_trailing_unit_dims_dynamic\"}> ({\n  ^bb0(%arg0: tensor<1x1x?x1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_atan\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.reverse\"(%arg0) <{a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i32, sym_name = \"convert_f_to_s_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.ConvertFToS\"(%arg0) : (f32) -> i32\n    \"spirv.ReturnVa..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_rsqrt\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.rsqrt\"(%arg0) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x7x7xf32>) -> tensor<2x2x7x7xf32>, sym_name = \"concat_different_axis\"}> ({\n  ^bb0(%arg0: tensor<1x1x7x7xf32>):\n    %0 = \"tosa.concat\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_floor_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i32, i64) -> (), sym_name = \"testVarOperand\"}> ({\n  ^bb0(%arg0: i16, %arg1: i32, %arg2: i64):\n    \"testvar.var_operand\"(%arg0, %arg2) : (i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "foo"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"foo.result_op\"() : () -> i32\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dummy",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (), sym_name = \"scf_while_iter_arg_result_mismatch\"}> ({\n  ^bb0(%arg0: tensor<5xi1>, %arg1: tensor<5xi1>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<5xf32>) -> memref<5xf32>, sym_name = \"foo\"}> ({\n  ^bb0(%arg2: memref<5xf32>):\n    %1 = \"tensor.empty\"() : () -> tensor<5xf32>\n    %2 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> (), sym_name = \"atan2\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"math.atan2\"(%arg0, %arg1) <{fastmath = #arith.fastmath<none>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i32>, sym_name = \"fold_mul_shift\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-23661> : tensor<i32>}> : () -> tensor<i32>\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> index, sym_name = \"extract_aligned_pointer_as_index\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"memref.extract_aligned_poin..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"private_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sy..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "omp",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"master_block_arg\"}> ({\n    \"omp.master\"() ({\n    ^bb0(%arg0: index, %arg1: index):\n      \"test.payload\"(%arg0, %arg1) : (i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "foo",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i1, i1), sym_name = \"main\"}> ({\n    %2 = \"arith.constant\"() <{value = true}> : () -> i1\n    %3 = \"arith.constant\"() <{value = true}> : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_add_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> f32, sym_name = \"private_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{arg_attrs = [{bufferization..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"pass_pipeline\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>, tensor<13x21x3xi1>) -> tensor<26x21x3xi1>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>, %arg1: tensor<13..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi8>, tensor<5x4xi8>) -> (), sym_name = \"reduce_max_nan_ignore_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi8>, %arg1: tensor<5x4xi8>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"cleanable_loop_iter_args_value\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"simple_store\"}> ({\n  ^bb0(%arg2: f32):\n    %2 = \"spirv.Variable\"() <{storage_class = #spirv.storage_class<Function>}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.size) -> !shape.size, sym_name = \"size_to_index_to_size\"}> ({\n  ^bb0(%arg0: !shape.size):\n    %0 = \"shape.size_to_index\"(%arg0) : (!shap..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"entry_point\"}> ({\n  ^bb0(%arg1: !transform.any_op):\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>, sym_name = \"spirv.sym\"}> ({\n    \"spirv.func\"() <{function_c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> i32, sym_name = \"merge_yielding_nested_if_nv2\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"test.op\"() : () -> i32\n    %1 = \"test.op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() ({\n      \"bar0\"() : () -> ()\n    }, {\n      \"bar1\"() : () -> ()\n    })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<bf16 ()>, linkage = #llvm.linkage<external>, sym_name = \"constant_bf16\", unnamed_addr = 0 : i64, visibility..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<1x2x?xf32>) -> memref<1x?xf32>, sym_name = \"collapse_shape_dynamic\"}> ({\n  ^bb0(%arg0: memref<1x2x?xf32>):\n    %0 = \"memref.collapse_sha..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    \"test.graph_region\"() ({\n      %0 = \"math.exp\"(%1) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n      %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    \"smt.check\"() ({\n      \"smt.yield\"() : () -> ()\n    }, {\n      %0 = \"smt.constant\"() <{value = true}> : () -> !smt.bool\n      \"smt.yield\"() : () -> ()\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10x42xf32>) -> (), sym_name = \"memref_cast_static_to_dynamic\"}> ({\n  ^bb0(%arg0: memref<10x42xf32>):\n    %0 = \"memref.cast\"(%arg0) : (me..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_fmod\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global\"() <{addr_space = 0 : i32, global_type = i32, linkage = #llvm.linkage<external>, sym_name = \"v1\", unnamed_addr = 0 : i64, value = 0 : i32, visibility_ = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"subgroup_operations\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"gpu_subgroup\"}> ({\n      %0 = \"gpu.subgroup_id\"() : () -> index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"test\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"arith.mulf\"(%arg0, %arg1) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0, s1] -> (s0, s1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"compare_affine_max\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"test\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"arith.mulf\"(%arg0, %arg1) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x4x5xi32>, tensor<3x6xi32>) -> (), sym_name = \"gather_static\"}> ({\n  ^bb0(%arg0: tensor<3x4x5xi32>, %arg1: tensor<3x6xi32>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (), sym_name = \"powf\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.powf\"(%arg0, %arg0) <{fastmath = #arith.fastmath<none>}> : (f64, f64) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"empty_if1\"}> ({\n  ^bb0(%arg0: i1):\n    \"scf.if\"(%arg0) ({\n      \"scf.yield\"() : () -> ()\n    }, {\n    }) : (i1) -> ()\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x5xi16>, tensor<513xi16>) -> (), sym_name = \"test_table_static\"}> ({\n  ^bb0(%arg0: tensor<4x5xi16>, %arg1: tensor<513xi16>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x8x5xi32>, tensor<3x6xi32>, tensor<3x6x5xi32>) -> (), sym_name = \"scatter_static\"}> ({\n  ^bb0(%arg0: tensor<3x8x5xi32>, %arg1: tensor<3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ole\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_custom_tensor_list_size\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xi32>}> : () -> tensor<1xi32>\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<26x21x3xf32>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<7x8xf32>) -> index, sym_name = \"dim_out_of_bounds\"}> ({\n  ^bb0(%arg0: memref<7x8xf32>):\n    %0 = \"arith.constant\"() <{value = 7 : index}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<() -> (4)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"compare_const_map\"}> ({\n    %0 = \"arith.constant\"() <{value = 5 : index}> : () -> index\n    \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> i1, sym_name = \"is_broadcastable_on_same_shape\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.is_broadcastable\"(%arg0, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"foo\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul\"}> ({\n  ^bb0(%arg0: tensor<1x14x19xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<100xf32>) -> (), sym_name = \"memref_type\"}> ({\n  ^bb0(%arg0: memref<100xf32>):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, i1) -> (), sym_name = \"index_castui\"}> ({\n  ^bb0(%arg0: index, %arg1: i1):\n    %0 = \"arith.index_castui\"(%arg0) : (index) -> i1\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i64) -> i64, sym_name = \"ceildivsi\"}> ({\n  ^bb0(%arg1: i64, %arg2: i64):\n    %1 = \"arith.ceildivsi\"(%arg1, %arg2) : (i64, i64) -> i64\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0, s1] -> (s0 + 4, s1 + 7)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"do..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_floor\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.floor\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i32, i32) -> i32, sym_name = \"clean_region_branch_op_dont_remove_first_2_results_but_remove_first_operand\"}> ({\n  ^bb0(%arg0: i1, %arg1: i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>) -> (), sym_name = \"test_unary_f32\"}> ({\n  ^bb0(%arg0: tensor<4xf32>):\n    %0 = \"tosa.abs\"(%arg0) : (tensor<4xf32>) -> tensor<*xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> (tensor<5xf32>, tensor<5xf32>), sym_name = \"callee\"}> ({\n  ^bb0(%arg1: tensor<5xf32>):\n    %4 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"declaration\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"arm_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededNamedBaseConstraint\"}> ({\n    %0 = \"testd.named_type_base\"() : () -> i32\n    %1 = \"testd.named_type_base\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xi64>, sym_name = \"parse_i64_tensor\"}> ({\n    %5 = \"arith.constant\"() <{value = dense<255> : tensor<4xi64>}> : () -> tensor<4xi64>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi32>, tensor<2xi32>) -> tensor<*xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<2xi32>, %arg1: tensor<2xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_smin\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupSMin\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_multiple_1_to_n_replacement\"}> ({\n    %0 = \"test.multiple_1_to_n_replacement\"() : () -> f16\n    \"test.invalid\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_bytes\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<byte>}> : () -> ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i8, sym_name = \"wraps\"}> ({\n    %0 = \"arith.constant\"() <{value = 64 : i8}> : () -> i8\n    %1 = \"test.with_bounds\"() <{smax = 65 : si8, sm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"arith_shift_right_index\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 42 : index}> : () -> index\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sin\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sin\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"invalid_pass_option\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, tensor<?xf32>, tensor<?xf32>) -> tensor<?xf32>, sym_name = \"if\"}> ({\n  ^bb0(%arg0: i1, %arg1: tensor<?xf32>, %arg2: tensor<?xf32>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "test",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"test_promote_if_one_iteration\"}> ({\n  ^bb0(%arg1: index):\n    %1 = \"arith.constant\"() <{value = 0 : index}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_double_round_rescale\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.const\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.self_referencing<i64>) -> (), sym_name = \"wrong_parameter\"}> ({\n  ^bb0(%arg0: !testd.self_referencing<i64>):\n    \"func.return\"() : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x3x5xi32>, index) -> index, sym_name = \"dim_some_omitting_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?x3x5xi32>, %arg1: index):\n    %0 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"make_i32\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (index, index, index) -> i32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"copy_memory_print_maa\"}> ({\n    %0 = \"spirv.Variable\"() <{storage_class = #spirv.storage_class<Function>}> : () -> !spirv...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "irdl"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"irdl.dialect\"() <{sym_name = \"test_irdl_to_cpp\"}> ({\n    \"irdl.operation\"() <{sym_name = \"test_op\"}> ({\n      \"irdl.regions\"() <{names = []}> : () -> ()\n    }) : () -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"test.match_anchor\"() : () -> i32\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = false}, {bufferization.writable = true}, {}, {}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, index, index, index)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> i1, sym_name = \"is_broadcastable_on_duplicate_shapes\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"log1p\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.log1p\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1024, i1024) -> i1024, sym_name = \"muli_scalar\"}> ({\n  ^bb0(%arg0: i1024, %arg1: i1024):\n    %0 = \"arith.muli\"(%arg0, %arg1) <{overflowFlags =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> i32, sym_name = \"fully_dynamic_bounds\"}> ({\n  ^bb0(%arg0: index, %arg1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>) -> tensor<*xi32>, sym_name = \"tensor_with_unknown_rank\"}> ({\n  ^bb0(%arg0: tensor<*xi32>):\n    %0 = \"tosa.abs\"(%arg0) : (tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> (!smt.bool, !smt.bool), sym_name = \"declare_const_cse\"}> ({\n  ^bb0(%arg0: i8):\n    %0 = \"smt.declare_fun\"() <{namePrefix = \"a\"}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.top_level_op_attr_mismatch\"() {foo = \"bar\"} : () -> ()\n  \"test.top_level_op_attr_mismatch\"() {foo = \"bar2\"} : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.struct<a4, (!spirv.ptr<!spirv.struct<a4>, Uniform>)>) -> (), sym_name = \"id_struct_self_recursive\", sym_visibility = \"private\"}> ({\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10x20xf32>, memref<?x?xf32>, memref<10x?xf32>) -> (), sym_name = \"check_arguments\"}> ({\n  ^bb0(%arg0: memref<10x20xf32>, %arg1: memref<?..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x26xi32>) -> tensor<13x26x3xf32>, sym_name = \"test_gather\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> (i1, i1, i1, i1, i1, i1, i1, i1, i1, i1), sym_name = \"cmpi_const_right\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_product_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_product\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"invalid_constant_FPtoUI\"}> ({\n    %0 = \"arith.constant\"() <{value = -2.000000e+00 : f32}> : () -> f32\n    %1 = \"arith.fpt..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"andand0\"}> ({\n  ^bb0(%arg6: i32, %arg7: i32):\n    %6 = \"arith.andi\"(%arg6, %arg7) : (i32, i32) -> i32\n    %7 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"snegate_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.SNegate\"(%arg0) : (i32) -> i32\n    \"func.return\"(%0) : (i32) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<1x21x3xbf16>, sym_name = \"test_reduce_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.reduce_max\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_different_type_smaller\", unnamed_addr = 0 : i6..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<128xf32>) -> memref<128xf32>, sym_name = \"fold_assume_alignment_chain\"}> ({\n  ^bb0(%arg0: memref<128xf32>):\n    %0 = \"memref.assume_alig..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2x3xf32>, tensor<1x3x4xf32>, tensor<1xf32>) -> tensor<1x2x4xf32>, sym_name = \"test_unranked_zero_points_matmul\"}> ({\n  ^bb0(%arg0: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (f64, f64), sym_name = \"test_divf\"}> ({\n  ^bb0(%arg2: f64):\n    %3 = \"arith.constant\"() <{value = 1.000000e+00 : f64}> : () -> f64\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x224x224x3xf32>) -> tensor<96xf32>, sym_name = \"testType\"}> ({\n  ^bb0(%arg0: tensor<1x224x224x3xf32>):\n    %0 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "nvvm",
        "llvm"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (f32)>, linkage = #llvm.linkage<external>, sym_name = \"convert_float_to_tf32_rna\", unnamed_addr = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, i32) -> (), sym_name = \"invariant_subgraph\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index, %arg3: i32):\n    \"scf.fo..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>) -> tensor<13x21x3xi1>, sym_name = \"test_greater\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (index, index), sym_name = \"to_select_same_val\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x12x32xf32>) -> tensor<?x32xf32>, sym_name = \"collapse_of_cast\"}> ({\n  ^bb0(%arg0: tensor<8x12x32xf32>):\n    %0 = \"tensor.cast\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_sum_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_sum\"(%arg0) <{ax..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<32x32x16384xf32>, tensor<32x32x16384xf32>) -> (tensor<32x32x16384xf32>, tensor<32x32x16384xf32>), sym_name = \"test_fft2d_real_w\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (index, index), sym_name = \"empty_tensor_static_dim\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_mul_zero_lhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1x4xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"uplift_while\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"scf.while\"(%arg0) ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xf32>, sym_name = \"foo\"}> ({\n    %2 = \"arith.constant\"() <{value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00]>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = (!standalone.custom<\"10\">) -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"xorxor\"}> ({\n  ^bb0(%arg4: i1):\n    %6 = \"arith.constant\"() <{value = true}> : () -> i1\n    %7 = \"arith.xori\"(%arg4, %6)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x32x15x13x27xf32>) -> index, sym_name = \"static_out_of_bound_memref_dim\"}> ({\n  ^bb0(%arg0: memref<42x32x15x13x27xf32>):\n    %0 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"complex_abs_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.abs\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_exp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.exp\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"test.with_bounds\"() <{smax = 92233720..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>) -> (), sym_name = \"memref_cast_dynamic_to_static\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {bufferization.writable = true}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, i1) -> (f32, f32, tensor<?xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedAttrsConstraint2\"}> ({\n    \"testd.attrs\"() {attr1 = i32, attr2 = i32} : () -> ()\n    \"func.return\"() : () -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    \"smt.check\"() ({\n      %0 = \"smt.constant\"() <{value = true}> : () -> !smt.bool\n      \"smt.yield\"() : () -> ()\n    }, {\n      \"smt.yield\"() : () -> ()\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>) -> tensor<*xf32>, sym_name = \"test_return\"}> ({\n  ^bb0(%arg0: tensor<4xf32>):\n    %0 = \"tosa.log\"(%arg0) : (tensor<4xf32>) -> te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x2x2x1xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"no_partial_memset_inline\", unnamed_addr = 0 : i64, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2x?xi32>) -> (tensor<1x2x3xi32>, tensor<1x2x?xi32>), sym_name = \"fold_concat\"}> ({\n  ^bb0(%arg0: tensor<1x2x?xi32>):\n    %0 = \"tensor...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_add_test_exte..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"gpu.func\"() <{function_type = () -> ()}> ({\n      \"gpu.printf\"() <{format = \"Hello, world\\0A\"}> : () -> ()\n      \"gpu.return..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> f32, sym_name = \"base_test\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.addi\"(%arg0, %arg0) : (i32, i32) -> i32\n    %1 = \"test.cast\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "xevm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!llvm.ptr<1>) -> (), sym_name = \"prefetch\"}> ({\n  ^bb0(%arg0: !llvm.ptr<1>):\n    \"xevm.prefetch\"(%arg0) <{cache_control = #xevm.load_cache_cont..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>) -> tensor<4xf32>, sym_name = \"unsupported_tensor_type\"}> ({\n  ^bb0(%arg0: tensor<4xf32>):\n    %0 = \"math.absf\"(%arg0) <{fastmath..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<ui8>, tensor<ui8>, tensor<i1>) -> tensor<ui8>, sym_name = \"test_regions\"}> ({\n  ^bb0(%arg0: tensor<ui8>, %arg1: tensor<ui8>, %arg2: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>, tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_bitwise_xor_rank_invalid\"}> ({\n  ^bb..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"test_with_multiple_block_arg_uses\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 45 : i32}> : () -> i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"loop_unroll_and_jam_unsupported_dynamic_trip_count\"}> ({\n  ^bb0(%arg1: index):\n    %2 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xf32>, tensor<3xf32>, tensor<i1>) -> (), sym_name = \"if_test_dynamic\"}> ({\n  ^bb0(%arg0: tensor<2xf32>, %arg1: tensor<3xf32>, %arg2: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ogt\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"op_with_passthrough_region_args\"}> ({\n    %0 = \"arith.constant\"() <{value = 10 : index}> : () -> index\n    \"test.one_regio..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_pow\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xi1>, tensor<13x21x3xi8>, tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_select\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xi1>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"remove_foldable_op\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.op_with_region_fold\"(%arg0) ({\n      \"foo.op_with_region_t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x1x3xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_xor\"}> ({\n  ^bb0(%arg0: tensor<13x1x3xi1>, %arg1: tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x1x3xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_or\"}> ({\n  ^bb0(%arg0: tensor<13x1x3xi1>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"xorxor2\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.xori\"(%arg0, %arg1) : (i32, i32) -> i32\n    %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi1>, tensor<1xi1>) -> (), sym_name = \"test_bool\"}> ({\n  ^bb0(%arg0: tensor<1xi1>, %arg1: tensor<1xi1>):\n    %0 = \"tosa.logical_and\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_sub_zero_rhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x2xi32>, tensor<*xi32>) -> tensor<4x3x2xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<3x2xi32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f16, f32) -> (), sym_name = \"fpext\"}> ({\n  ^bb0(%arg0: f16, %arg1: f32):\n    %0 = \"arith.extf\"(%arg0) : (f16) -> f32\n    %1 = \"arith.extf\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_abs\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.abs\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"dynamic_dims_are_maybe_equal_1\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> (), sym_name = \"alias_is_freed\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref<?xf32>) -> memref<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xf32>, sym_name = \"fold_sub_splat_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1.000000e+00> : tensor<10xf32>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<13x1x3xbf16>) -> tensor<13x21x3xi1>, sym_name = \"test_equal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() {interrupt = true} : () -> f32\n    %1 = \"arith.addf\"(%0, %arg0) <{fast..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<1x21x3xi32>, sym_name = \"test_reduce_sum\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.reduce_sum\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x4x8xf32>, tensor<1x4x8xf32>) -> (tensor<1x4x8xf32>, tensor<1x4x8xf32>), sym_name = \"test_fft2d_with_local_bound\"}> ({\n  ^bb0(%arg0: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"set_mesh_outputs\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    \"spirv.EXT.SetMeshOutputs\"(%arg0, %arg1) : (i32, i32) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_log1p_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.log1p\"(%arg0) <{fastmath..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi32>, index, i32) -> (), sym_name = \"nested_loop\"}> ({\n  ^bb0(%arg0: memref<?xi32>, %arg1: index, %arg2: i32):\n    %0 = \"arith.constan..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replace_single_iteration_loop_1\"}> ({\n    %0 = \"arith.constant\"() <{value = 42 : index}> : () -> index\n    %1 = \"arith.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"sparse_has_runtime\"}> ({\n    %0 = \"sparse_tensor.has_runtime_library\"() : () -> i1\n    \"func.return\"(%0) : (i1) -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"ignore_self_memcpy\", unnamed_addr = 0 : i64, visibi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_identity\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.identity\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<32x16384x32xf32>, tensor<32x16384x32xf32>) -> (tensor<32x16384x32xf32>, tensor<32x16384x32xf32>), sym_name = \"test_fft2d_imag_h\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x4xf32>, index) -> f32, sym_name = \"test_non_tosa_consumer_extract\"}> ({\n  ^bb0(%arg0: tensor<4x4xf32>, %arg1: index):\n    %0 = \"tosa.l..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"a\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"b\"}> ({\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.sampled_image<!spirv.image<f32, Dim1D, NoDepth, NonArrayed, SingleSampled, NoSampler, Unknown>>) -> (), sym_name = \"sampled_image_type\",..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> i32, sym_name = \"dynamic_upper_bound\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x8x8x8xi16>, tensor<1x8x8x8xi16>) -> tensor<1x8x8x8xi32>, sym_name = \"test_mul_non_zero_shift\"}> ({\n  ^bb0(%arg0: tensor<1x8x8x8xi16>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{arg_attrs = [{spirv.decoration = #spirv.decoration<Aliased>}], function_control = #spirv.function_control<None>, function_type = (!spirv.ptr<i32, PhysicalStora..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.exp\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"foo.has..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xui8>) -> (), sym_name = \"test_simple_ui8\"}> ({\n  ^bb0(%arg0: tensor<1xui8>):\n    %0 = \"tosa.cast\"(%arg0) : (tensor<1xui8>) -> tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_all_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_all\"(%arg0) <{ax..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"shape_assuming\"}> ({\n    %0 = \"shape.const_witness\"() <{passing = true}> : () -> !shape.witness\n    %1 = \"shape.assuming\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<1xi32>) -> tensor<?xf32>, sym_name = \"test_tensor_reshape_no_encoding\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x4xi32>, tensor<?x?x?xi32>) -> (), sym_name = \"test_dynamic_rhs_matmul\"}> ({\n  ^bb0(%arg0: tensor<2x3x4xi32>, %arg1: tensor<?x?x?xi32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_min_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_min\"(%arg0) <{axis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"kernel\"}> ({\n    \"gpu.func\"() <{arg_attrs = [{llvm.readonly}], function_type = (!llvm.ptr) -> ()}> ({\n    ^bb0(%arg0: !llvm.ptr):\n      \"gpu.return..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"binary_ops\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"shape.add\"(%arg0, %arg1) : (index, index) -> in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> tensor<2xf32>, sym_name = \"tensor.cast_from_unranked\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"tensor.cast\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"minsi\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.minsi\"(%arg0, %arg1) : (i32, i32) -> i32\n    \"func.re..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i64, i64) -> (), sym_name = \"testOptOperandFail\"}> ({\n  ^bb0(%arg0: i16, %arg1: i64, %arg2: i64):\n    \"testvar.opt_operand\"(%arg0, %arg1, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"group_non_uniform_all\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"spirv.GroupNonUniformAll\"(%arg0) <{execution_scope = #spirv.sco..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<160xi1>, sym_name = \"large_i1_tensor_roundtrip\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<\"0xFFF00000FF000000FF000000FF00000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, tensor<f32>) -> (), sym_name = \"test_unranked_equal\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %arg1: tensor<f32>):\n    %0 = \"tosa.equal..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "builtin",
        "live"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"public_module\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"dead_nested_function\", sym_visibility = \"nested\"}> ({\n    }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"bitcastPoisonFPtoI\"}> ({\n    %0 = \"ub.poison\"() <{value = #ub.poison}> : () -> f32\n    %1 = \"arith.bitcast\"(%0) : (f32) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> tensor<f32>, sym_name = \"if_test\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tensor<i1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64, f64, f64) -> f64, sym_name = \"fmaf_func\"}> ({\n  ^bb0(%arg0: f64, %arg1: f64, %arg2: f64):\n    %0 = \"math.fma\"(%arg0, %arg1, %arg2) <{fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x?xf32>, tensor<8x?xf32>) -> tensor<8x?xf32>, sym_name = \"tensor.concat_dynamic\"}> ({\n  ^bb0(%arg0: tensor<8x?xf32>, %arg1: tensor<8x?x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi8>) -> tensor<1x1x1x1x13x21x3xi8>, sym_name = \"test_rescale_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xi8>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0 = \"test.match_anchor\"() : () -> i32\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"fold_rank\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<[[[1, -2, 1, 36]], [[0, 2, -1, 64]]]> : tensor<2x1x4xi32>}>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1x?x1x1x?x?x1x1xf32>) -> tensor<?x?x?x?xf32>, sym_name = \"compose_collapse_of_collapse_unit_dims_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_tanh\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.tanh\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (f32, f32), sym_name = \"materialize_different_dialect\"}> ({\n    %0 = \"arith.constant\"() <{value = -1.000000e+00 : f32}> : () -> f32\n    %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x26xi32>) -> tensor<13x26x3xi32>, sym_name = \"test_gather\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"test\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"test.illegal_op_a\"() : () -> i32\n    \"foo.region\"() ({\n      \"test.invalid\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x5xi32>, index) -> index, sym_name = \"dim_any_static\"}> ({\n  ^bb0(%arg0: tensor<3x5xi32>, %arg1: index):\n    %0 = \"tensor.dim\"(%arg0, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> tensor<2x4xf32>, sym_name = \"collapse_shape_splat\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"tensor.splat\"(%arg0) : (f32) -> tensor<2x2x2xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x1x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_min_rank_invalid\"}> ({\n  ^bb0(%arg0: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> index, sym_name = \"if_condition_swap\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 = \"arith.xo..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"scf.if\"(%arg0) ({\n     ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"fail_to_convert_region\"}> ({\n    \"test.region\"() ({\n    ^bb0(%arg0: i64):\n      \"test.region_builder\"() : () -> ()\n      \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"fnegate_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FNegate\"(%arg0) : (f32) -> f32\n    \"func.return\"(%0) : (f32) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_cos_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_conj\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.conj\"(%arg0) <{fastmath = #arith.f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<(d0, d1)[s0] -> (s0, d0 - d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"two_iteration_example\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_different_type_same_size\", unnamed_addr = 0 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"simple_subf\"}> ({\n    %0 = \"arith.constant\"() <{value = 4.500000e+00 : f32}> : () -> f32\n    %1 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2x3xf32>) -> (), sym_name = \"shape_of_stat\"}> ({\n  ^bb0(%arg0: tensor<1x2x3xf32>):\n    %0 = \"shape.shape_of\"(%arg0) : (tensor<1x2x3xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"liveBifurcation\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i1, memref<1xf32>, i32), sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (),..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"print_message\"}> ({\n  ^bb0(%arg1: !transform.any_op):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_copy_pay..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"callable\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"testMatchingTypes\"}> ({\n  ^bb0(%arg4: i32):\n    %5 = \"scf.while\"(%arg4) ({\n    ^bb0(%arg6: i32):\n      %6 = \"arith.cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"fold_div_index_neg_rhs\"}> ({\n    %0 = \"arith.constant\"() <{value = 10 : index}> : () -> index\n    %1 = \"arith.constant\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> (), sym_name = \"combineIfs4\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    \"scf.if\"(%arg0) ({\n      \"test.firstCodeTrue\"() : () -> ()\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i64) -> (), sym_name = \"testMultOperandsWrongSegmentType\"}> ({\n  ^bb0(%arg0: i16, %arg1: i64):\n    \"testvar.var_and_opt_operand\"(%arg0, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_reduce_any\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.reduce_any\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"maximumf\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.maximumf\"(%arg0, %arg1) <{fastmath = #arith.fastma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedAllOfConstraint2\"}> ({\n    %0 = \"testd.all_of\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x16x16xf32>, index) -> (), sym_name = \"test_store\"}> ({\n  ^bb0(%arg1: memref<2x16x16xf32>, %arg2: index):\n    %1 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> tensor<f32>, sym_name = \"test_cond_if\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (bf16) -> bf16, sym_name = \"basic_expansion\"}> ({\n  ^bb0(%arg0: bf16):\n    %0 = \"arith.constant\"() <{value = 1.000000e+00 : bf16}> : () -> bf16\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"create_illegal_block\"}> ({\n    \"test.create_illegal_block\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededConstraintVars\"}> ({\n    %0:2 = \"testd.constraint_vars\"() : () -> (i32, i32)\n    \"func.return\"() : () -> ()\n  }) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"ceildivi_index\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.ceildivsi\"(%arg0, %arg1) : (index,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<3x5xi32>) -> index, sym_name = \"dim_const\"}> ({\n  ^bb0(%arg0: memref<3x5xi32>):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"loop_outline_op\"}> ({\n  ^bb0(%arg1: index, %arg2: index, %arg3: index):\n    \"scf.for\"(%arg1, %arg2, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.image<f32, Dim1D, NoDepth, NonArrayed, SingleSampled, NoSampler, Unknown>) -> (), sym_name = \"image_query_size\"}> ({\n  ^bb0(%arg0: !spir..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0] -> (s0 + 8, s0 * 4)>\n#map2 = affine_map<()[s0, s1, s2] -> (s0, s1 + 7, s2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_ty..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"no_alloca\"}> ({\n    %0 = \"arith.constant\"() <{value = 5 : i32}> : () -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_add_i1\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi1>, %arg1: tensor<13..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> !shape.size, sym_name = \"nonfoldable_index_to_size\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"shape.index_to_size\"(%arg0) : (index) -> !sh..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_transform_op\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (1000, d0 + 512, s0)>\n#map1 = affine_map<(d0, d1)[s0] -> (d0 - d1, s0 + 512)>\n#map2 = affine_map<()[s0, s1] -> (s0 - s1, 11)>\n#map3 = affine_map<() -> (77, 78, 79)>\n\"buil..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<1x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_min\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x11x11x3xi1>, sym_name = \"test_const_i1\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<false> : tensor<3x11x11x3xi1>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"test.test_effects_result\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"structured_cfg\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "live"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"dead_private_function\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_na..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (i32)>, linkage = #llvm.linkage<external>, sym_name = \"ignore_atomic\", unnamed_addr = 0 : i64, visibili..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"default_value\", unnamed_addr = 0 : i64, visibility_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xf32>) -> tensor<2x3xf32>, sym_name = \"mul_one_float\"}> ({\n  ^bb0(%arg0: tensor<2x3xf32>):\n    %0 = \"tosa.const\"() <{values = dense<0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.operand_num_mismatch\"() ({\n  ^bb0(%arg2: i32, %arg3: f32):\n    \"test.some_branching_op\"(%arg3, %arg2) : (f32, i32) -> ()\n  }) : () -> ()\n  \"test.operand_num_mismatch\"() (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>, tensor<13x21x1xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"fold_log_exp\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.exp\"(%arg0) : (tensor<?x1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"roundeven64\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.roundeven\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"no_expansion\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 1.000000e+00 : f32}> : () -> f32\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x16x32xf32>, tensor<2x16x32xf32>) -> tensor<2x16x32xf32>, sym_name = \"bufferize_softmax\"}> ({\n  ^bb0(%arg0: tensor<2x16x32xf32>, %arg1:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"move_region_dependencies\"}> ({\n    %2 = \"before\"() : () -> f32\n    %3 = \"moved_op\"() : () -> f32\n    %4 = \"foo\"() ({\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f64) -> (), sym_name = \"absf\"}> ({\n  ^bb0(%arg24: f32, %arg25: f64):\n    %20 = \"math.absf\"(%arg24) <{fastmath = #arith.fastmath<none>}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.const\"() <{values ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"f\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.addf\"(%arg0, %arg0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi32>, index, i32) -> (), sym_name = \"single_loop\"}> ({\n  ^bb0(%arg0: memref<?xi32>, %arg1: index, %arg2: i32):\n    %0 = \"arith.constan..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x3x?xi32>, tensor<?x?x5xi32>) -> (), sym_name = \"test_dynamic_mixed_matmul\"}> ({\n  ^bb0(%arg0: tensor<?x3x?xi32>, %arg1: tensor<?x?x5xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, index, index, index) -> tensor<?xf32>, sym_name = \"scf_for_yield_non_equivalent\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: index,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_tanh\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.tanh\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"return_i32\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg1: i32):\n    \"func.return\"(%arg1) : (i32) -> ()\n  }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<10xf32>, tensor<20x30xi16>, tensor<40x50x60xi16>, tensor<70x80x90x100xi16>) -> (), sym_name = \"nd_tensor_of_success\"}> ({\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"match\"}> ({\n  ^bb0(%arg1: !transform.any_op):\n    \"tes..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"invalid_ranked_memref_descriptor\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"test.direct_replacement\"(%arg0) : (i1) -> memref<5x4..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_input_zp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"patterns_apply_only_to_target_body\"}> ({\n    %1 = \"test.foo\"() {replace_with_new_op = \"test.bar\"} : () -> i32\n    \"func.re..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (i8)>, linkage = #llvm.linkage<external>, sym_name = \"basic_memset\", unnamed_addr = 0 : i64, visibility..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_rsqrt_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "irdl"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"irdl.dialect\"() <{sym_name = \"test_irdl_to_cpp\"}> ({\n    \"irdl.operation\"() <{sym_name = \"test_op\"}> ({\n      %0 = \"irdl.any\"() : () -> !irdl.attribute\n      \"irdl.attributes\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"reduce_max_nan_ignore\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>) -> tensor<2xi32>, sym_name = \"cast_values\"}> ({\n  ^bb0(%arg0: tensor<*xi32>):\n    %0 = \"tensor.cast\"(%arg0) : (tensor<*xi32>) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2xf32>) -> memref<2xf32>, sym_name = \"conversion_static\"}> ({\n  ^bb0(%arg0: memref<2xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (mem..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_erf\"}> ({\n    ^bb0(%arg0: f16, %arg1: f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3xf32>, tensor<3xf32>) -> tensor<3xf32>, sym_name = \"test_add_1d_matching_static\"}> ({\n  ^bb0(%arg0: tensor<3xf32>, %arg1: tensor<3xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    %0 = \"arith.constant\"() <{value = 4 : index}> : () -> index\n    %1 = \"tensor.empty\"() : () -> tensor<1xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_logical_left_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> tensor<*xf32>, sym_name = \"copy_of_unranked_tensor\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    \"func.call\"(%arg0) <{callee = @may..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"arith_divui_remui\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.divui\"(%arg0, %arg1) : (i32, i32) -> i32\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1x4xi32>, sym_name = \"reduce_min_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_reciprocal_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_erf_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xi1>, tensor<10xi1>), sym_name = \"fold_greater_splat_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<4.000000e+00> : tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.reverse\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"fold_div_mixed\"}> ({\n    %0 = \"shape.const_size\"() <{value = 12 : index}> : () -> !shape.size\n    %1 = \"arith.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"clamp_twice_with_nan_ignore_propagate_is_single_clamp\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.cstr_eq\"(%arg0, %arg0, %arg0) : (!shape.shape, !shape.sha..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<4xi32>, tensor<4xi32>, tensor<4xi32>), sym_name = \"divi_signed_splat_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<0> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<4x8xf32>, f32, index, index) -> (), sym_name = \"memref_store\"}> ({\n  ^bb0(%arg0: memref<4x8xf32>, %arg1: f32, %arg2: index, %arg3: index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"clamp_fordlessthan\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.FOrdLessThan\"(%arg0, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"log1p_fmf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.log1p\"(%arg0) <{fastmath = #arith.fastmath<fast>}> : (f32) -> f32\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> (tensor<?x?xf32>, tensor<?x?xf32>), sym_name = \"no_cse_varied_bbargs\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "vector"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"get_vector_scale\"}> ({\n    %0 = \"vector.vscale\"() : () -> index\n    \"func.return\"(%0) : (index) -> ()\n  }) : () -> ()\n}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8xf32>) -> tensor<8xf32>, sym_name = \"math_fpowi_pos_odd_power\"}> ({\n  ^bb0(%arg0: tensor<8xf32>):\n    %0 = \"arith.constant\"() <{value =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xf32>, sym_name = \"test_cast_i32_f32\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.cast\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"f\", sym_visibility = \"private\"}> ({\n    }) : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, tensor<f32>) -> tensor<f32>, sym_name = \"if_correct_recursive_legalization_behavior\"}> ({\n  ^bb0(%arg0: i1, %arg1: tensor<f32>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"srem_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.SRem\"(%arg0, %arg0) : (i32, i32) -> i32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (f32, f32, f32, f32), sym_name = \"test_maxnumf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi8>, sym_name = \"test_inexact_round_rescale\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.const..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32xf32>, memref<32xf32>) -> (), sym_name = \"store_non_temporal\"}> ({\n  ^bb0(%arg0: memref<32xf32>, %arg1: memref<32xf32>):\n    %0 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, i1) -> (), sym_name = \"for_if_for\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index, %arg3: i1):\n    %0 = \"arith.const..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x2xf32>, tensor<2x3xi32>) -> (), sym_name = \"gather_float\"}> ({\n  ^bb0(%arg0: tensor<2x3x2xf32>, %arg1: tensor<2x3xi32>):\n    %0 = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> (tensor<?x?xf32>, tensor<4x?xf32>), sym_name = \"different_results\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"tensor.cast\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_atan2_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1x4xi1>, sym_name = \"reduce_any_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[true, false, false, true], [false, fal..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_cast_i8_i32\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8>):\n    %0 = \"tosa.cast\"(%arg0) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_words\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<word>}> : () -> ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.shape, sym_name = \"fold_const_size\"}> ({\n    %0 = \"shape.const_size\"() <{value = 3 : index}> : () -> !shape.size\n    %1 = \"shape.co..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"arith_shrsi_i1\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"arith.shrsi\"(%arg0, %arg1) : (i1, i1) -> i1\n    \"func.r..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xf32>, sym_name = \"fold_mul_splat_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<3.000000e+00> : tensor<10xf32>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_signature_conversion_undo\"}> ({\n    \"test.signature_conversion_undo\"() ({\n    ^bb0(%arg0: f32):\n      \"test.type_cons..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_signature_conversion_no_converter\"}> ({\n    \"test.signature_conversion_no_converter\"() ({\n    ^bb0(%arg0: f32):\n     ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> tensor<1xi16>, sym_name = \"test_error_double_round_without_scale32\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.const\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x2xi32>, tensor<2x3xi32>) -> (), sym_name = \"gather_int\"}> ({\n  ^bb0(%arg0: tensor<2x3x2xi32>, %arg1: tensor<2x3xi32>):\n    %0 = \"tos..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> (), sym_name = \"rescale_i8_unsigned_output_explicit\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = dens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "index"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4x5x?xf32>, sym_name = \"invalid_empty_negative_size\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : index}> : () -> index\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_xor\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> memref<1xf32>, sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>) -> tensor<f32>, sym_name = \"test_cond_if_simplified_form\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0:2 = \"test.some_returning_op\"() : () -> (i32, i64)\n  %1 = \"test.some_returning_op\"() : () -> index\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x8xi8>) -> (i8, i8), sym_name = \"extract_from_collapse_shape\"}> ({\n  ^bb0(%arg0: tensor<1x1x8xi8>):\n    %0 = \"arith.constant\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"TestCreateInvalidCallInPass\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>, tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"select_false_value\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>, %arg1: tensor<2x3xi32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"inner_mod1\"}> ({\n    \"test.symbol\"() <{sym_name = \"foo\"}> : () -> ()\n    \"func.func\"() <{function_type = () -> (), sym_name = \"bar\", sym_visibi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedSingletonVerifier\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.singleton<i32>\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_sub_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xbf16>, tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_sub\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xbf16>, %arg1: tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_erase\"}> ({\n    %0 = \"test.arg0\"() : () -> i32\n    %1 = \"test.arg1\"() : () -> i32\n    %2 = \"test.erase_op\"(%0, %1) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"copy_sign_scalar\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"math.copysign\"(%arg0, %arg1) <{fastmath = #arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"consume\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i1, i32) -> (), sym_name =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>) -> index, sym_name = \"extract_aligned_pointer_as_index_unranked\"}> ({\n  ^bb0(%arg0: memref<*xf32>):\n    %0 = \"memref.extract_ali..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"cstr_require_no_fold\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"shape.cstr_require\"(%arg0) <{msg = \"msg\"}> : (i1) -> !shape.witn..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i64) -> (), sym_name = \"ops_supporting_overflow\"}> ({\n  ^bb0(%arg0: i64, %arg1: i64):\n    %0 = \"arith.addi\"(%arg0, %arg1) <{overflowFlags ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>) -> (), sym_name = \"some_external_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "tensor",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, memref<5xf32>, index) -> (), sym_name = \"apply_dce\"}> ({\n  ^bb0(%arg1: f32, %arg2: memref<5xf32>, %arg3: index):\n    %3 = \"tensor.empty\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_log1p\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.log1p\"(%arg0) <{fastmath = #arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"emitc_literal\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"emitc.literal\"() <{value = \"M_PI\"}> : () -> f32\n    %1 = \"emitc.add\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"mixedOperations\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"arith.addf\"(%arg0, %arg1) <{fast..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape, !shape.shape) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape, %arg2: !shape.shape):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (memref<1xf32>, memref<2xf32>), sym_name = \"multiple_results\"}> ({\n    %0:2 = \"test.source\"() : () -> (memref<1xf32>, memref<2xf32>)\n    \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!llvm.struct<\"_Converted.foo\", (f32)>) -> (), sym_name = \"clashing_struct_name\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i8) -> i32, sym_name = \"apply_scale_test_i32\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i8):\n    %0 = \"tosa.apply_scale\"(%arg0, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"clamp_twice_is_single_clamp\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"some_use\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{arg_attrs = [{bufferization.writ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"tan\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.tan\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_unroll_and_jam_unsupported_trip_count_not_multiple_of_factor\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<13x21x3xbf16>) -> tensor<26x21x3xbf16>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"tensor_load_of_buffer_cast\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"bufferization.to_buffer\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x4x8xf32>, tensor<1x4x8xf32>) -> (tensor<1x4x8xf32>, tensor<1x4x8xf32>), sym_name = \"test_fft2d\"}> ({\n  ^bb0(%arg0: tensor<1x4x8xf32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, tensor<1xi32>) -> tensor<?xf32>, sym_name = \"test_tensor_reshape_unranked\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %arg1: tensor<1xi32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> tensor<2xi16>, sym_name = \"test_rescale_i16_zp32768\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = dens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"fold_divui_of_muli_0\"}> ({\n  ^bb0(%arg10: index, %arg11: index):\n    %10 = \"arith.muli\"(%arg10, %arg11) <{o..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x?xf32>, tensor<6x?xf32>) -> (), sym_name = \"concat_non_axis_dyn\"}> ({\n  ^bb0(%arg0: tensor<5x?xf32>, %arg1: tensor<6x?xf32>):\n    %0 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"arith.ceildivsi_by_one\"}> ({\n  ^bb0(%arg1: i32):\n    %2 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %3 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n    ^bb0(%arg2: !transform.any_op):\n     ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, tensor<8xi32>, tensor<8xi32>) -> (), sym_name = \"arith_select\"}> ({\n  ^bb0(%arg0: i1, %arg1: tensor<8xi32>, %arg2: tensor<8xi32>):\n    %0 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testSingleOperandFail\"}> ({\n    \"testvar.single_operand\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_default_init\"}> ({\n    \"test.foo\"() {tag = \"a\"} : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"ceildivui\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.ceildivui\"(%arg0, %arg1) : (i32, i32) -> i32\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x5xi16>, tensor<513xi16>) -> (), sym_name = \"test_table\"}> ({\n  ^bb0(%arg0: tensor<4x5xi16>, %arg1: tensor<513xi16>):\n    %0 = \"tosa.ta..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<3xf32>, tensor<i1>) -> (), sym_name = \"if_test_unranked\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<3xf32>, %arg2: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_uno\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testOptResultFail\"}> ({\n    %0:3 = \"testvar.opt_result\"() : () -> (i16, i64, i64)\n    \"func.return\"() : () -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, i32) -> (), sym_name = \"ldexp\"}> ({\n  ^bb0(%arg0: f32, %arg1: i32):\n    %0 = \"spirv.GL.Ldexp\"(%arg0, %arg1) : (f32, i32) -> f32\n    \"func...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global\"() <{addr_space = 0 : i32, global_type = i32, linkage = #llvm.linkage<external>, sym_name = \"v1\", unnamed_addr = 0 : i64, value = 0 : i32, visibility_ = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i32, sym_name = \"convert_f_to_u_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.ConvertFToU\"(%arg0) : (f32) -> i32\n    \"spirv.ReturnVa..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<128xi8>) -> memref<128xi8>, sym_name = \"fold_view_same_source_result_types\"}> ({\n  ^bb0(%arg0: memref<128xi8>):\n    %0 = \"arith.constant..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi2>) -> (), sym_name = \"test_const_i2\"}> ({\n  ^bb0(%arg0: tensor<1xi2>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xi2>}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"simple_addi\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %1 = \"arith.constant\"() <{value = 5 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_ceil\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.ceil\"(%arg0) : (ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"unsupported_constant_f64_0\"}> ({\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f64}> : () -> f64\n    \"func.return\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reverse\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<42x?xf32>) -> (), sym_name = \"memref_cast_mixed_to_mixed\"}> ({\n  ^bb0(%arg0: memref<42x?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<100xf32>) -> tensor<100xf32>, sym_name = \"nop\"}> ({\n  ^bb0(%arg0: tensor<100xf32>):\n    \"func.return\"(%arg0) : (tensor<100xf32>) -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}], function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"non_tensor_for_arg\"}> ({\n  ^bb0(%arg0: tensor<?xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"testSingleOperand\"}> ({\n  ^bb0(%arg0: i32):\n    \"testvar.single_operand\"(%arg0) : (i32) -> ()\n    \"func.return\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "cf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    %0 = \"arith.constant\"() <{value = false}> : () -> i1\n    \"cf.assert\"(%0) <{msg = \"assertion foo\"}> : (i1) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> (), sym_name = \"unranked_tensor\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "scf",
        "affine",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "#map = affine_map<()[s0, s1] -> (1024, s0 - s1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>) -> (), sym_name = \"for\"}> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"assume_true\"}> ({\n  ^bb0(%arg0: i1):\n    \"spirv.KHR.AssumeTrue\"(%arg0) : (i1) -> ()\n    \"spirv.Return\"() : () -> ()\n  })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x?xf32>, tensor<?x5xf32>) -> (index, index, index, index, index), sym_name = \"result_shape_per_dim\"}> ({\n  ^bb0(%arg0: tensor<2x3x?xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> (), sym_name = \"fma\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.GL.Fma\"(%arg0, %arg1, %arg2) : (f32, f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"empty_region\"}> ({\n    \"spirv.mlir.selection\"() <{selection_control = #spirv.selection_control<None>}> ({\n    }) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>, tensor<1xi32>) -> (), sym_name = \"while_test\"}> ({\n  ^bb0(%arg0: tensor<i32>, %arg1: tensor<1xi32>):\n    %0:2 = \"tosa.while_loop\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"disjoint_clamp_twice_is_not_single_clamp\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 = \"tosa.clamp\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dialect"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_vk_specific_memory_spaces\"}> ({\n    %0 = \"dialect.memref_producer\"() : () -> memref<4xi32, 8>\n    %1 = \"dialect.memre..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_reduce_all\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.reduce_all\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_float_from_int\", unnamed_addr = 0 : i64, visib..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testVarResult\"}> ({\n    %0:2 = \"testvar.var_result\"() : () -> (i16, i64)\n    %1:3 = \"testvar.var_result\"() : () -> (i16, i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_i32_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8xf32>, tensor<8xi32>) -> tensor<8xf32>, sym_name = \"math_fpowi_to_powf_tensor\"}> ({\n  ^bb0(%arg0: tensor<8xf32>, %arg1: tensor<8xi32>):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10xi32>, i32, memref<10xf32>, f32, index) -> (), sym_name = \"atomic_rmw\"}> ({\n  ^bb0(%arg0: memref<10xi32>, %arg1: i32, %arg2: memref<10..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10x1xi32>) -> (tensor<10x1xi32>, tensor<10x1xi32>), sym_name = \"reverse_length_one\"}> ({\n  ^bb0(%arg0: tensor<10x1xi32>):\n    %0 = \"tosa..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x4x8xf32>, tensor<1x4x8xf32>) -> (tensor<1x4x8xf32>, tensor<1x4x8xf32>), sym_name = \"test_fft2d\"}> ({\n  ^bb0(%arg0: tensor<1x4x8xf32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "xevm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!llvm.ptr<1>, i32, i32, i32, i32, i32) -> (), sym_name = \"blockprefetch2d\"}> ({\n  ^bb0(%arg0: !llvm.ptr<1>, %arg1: i32, %arg2: i32, %arg3: i32,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"some_use\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (index) -> (), sy..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> i32, sym_name = \"convert_f64_to_s32_scalar\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"spirv.ConvertFToS\"(%arg0) : (f64) -> i32\n    \"spirv.Retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"function\"}> ({\n    %1 = \"foo\"() : () -> i32\n    \"func.return\"(%1) : (i32) -> ()\n  }) : () -> ()\n  \"func.func\"() <{functio..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_exp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.exp\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !quant.any<i8>, sym_name = \"parseOnlyStorageType\"}> ({\n    %0 = \"foo\"() : () -> !quant.any<i8>\n    \"func.return\"(%0) : (!quant.any<i8>) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i1>) -> (), sym_name = \"test_if_tensor_list_size_outputs\"}> ({\n  ^bb0(%arg0: tensor<i1>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"maxui\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.maxui\"(%arg0, %arg1) : (i32, i32) -> i32\n    \"func.re..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i8, i16, i32), sym_name = \"simple_arith.ceildivsi_overflow\"}> ({\n    %0 = \"arith.constant\"() <{value = 7 : i8}> : () -> i8\n    %1 = \"arit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "cf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    %0 = \"arith.constant\"() <{value = false}> : () -> i1\n    %1 = \"arith.constant\"() <{value = true}> : () -> i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>) -> (), sym_name = \"rectangular\"}> ({\n  ^bb0(%arg3: memref<?x?xf32>):\n    %4 = \"arith.constant\"() <{value = 2 : index}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i1, sym_name = \"arith_cmpi_eq\"}> ({\n  ^bb0(%arg6: i32, %arg7: i32):\n    %15 = \"arith.cmpi\"(%arg6, %arg7) <{predicate = 0 : i64}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"memref_conversions\"}> ({\n    \"gpu.func\"() <{function_type = (memref<8xf32>) -> ()}> ({\n    ^bb0(%arg0: memref<8xf32>):\n      \"gpu.return\"() : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_or\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"fmod_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FMod\"(%arg0, %arg0) : (f32, f32) -> f32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i32, i32) -> i32, sym_name = \"select\"}> ({\n  ^bb0(%arg3: i1, %arg4: i32, %arg5: i32):\n    %1 = \"arith.select\"(%arg3, %arg4, %arg5) : (i1, i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"complex_abs\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.abs\"(%arg0) <{fastmath = #arith.fastmath<non..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.size, !shape.size) -> (), sym_name = \"binary_ops_on_size\"}> ({\n  ^bb0(%arg0: !shape.size, %arg1: !shape.size):\n    %0 = \"shape.add\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0, d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?x?xf32>, index, index) -> f32, sym_name = \"fold_fully_dynamic_size_collapse_shape_with_affine..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sin\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sin\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"argmax_nan_ignore\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xi32>, sym_name = \"reverse_splat\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<42> : tensor<10xi32>}> : () -> tensor<10xi32>\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<1x3x4x1x5xf32>) -> memref<3x4x5xf32>, sym_name = \"collapse_shape_static\"}> ({\n  ^bb0(%arg0: memref<1x3x4x1x5xf32>):\n    %0 = \"memref.col..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xi8>) -> tensor<2xi8>, sym_name = \"rescaleDoubleRound\"}> ({\n  ^bb0(%arg0: tensor<2xi8>):\n    %0 = \"tosa.const\"() <{values = dense<19689..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x4x?xf32>) -> (), sym_name = \"rank\"}> ({\n  ^bb0(%arg0: tensor<4x4x?xf32>):\n    %0 = \"tensor.rank\"(%arg0) : (tensor<4x4x?xf32>) -> index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x21x3xi1>) -> tensor<1x1x1x1x1x21x3xi1>, sym_name = \"test_logical_not_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x1x21x3xi1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "tensor",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> index, sym_name = \"canonicalization\"}> ({\n  ^bb0(%arg1: tensor<5xf32>):\n    %2 = \"arith.constant\"() <{value = 0 : index}> : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_rsqrt\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.rsqrt\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n    ^..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i32) -> (i1, i32), sym_name = \"simple_and\"}> ({\n  ^bb0(%arg0: i1, %arg1: i32):\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xui16>) -> tensor<1x1xi8>, sym_name = \"test_rescale_input_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1x1xui16>):\n    %0 = \"tosa.const\"() <{v..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"no_partial_memset\", unnamed_addr = 0 : i64, visibil..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_clamp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.clamp\"(%arg0) <{ma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_clz_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xi32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"shape.const_witness\"() <{passing = true}> : () -> !shape.witness\n    %1 = \"test.source\"() : () -> !shape..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x2xf32>, tensor<2x2xf32>) -> (tensor<2x2xf32>, tensor<2x2xf32>), sym_name = \"test_tensor_no_linearize\"}> ({\n  ^bb0(%arg0: tensor<2x2xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>) -> (), sym_name = \"test_static_argmax\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 0 : i32, na..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_output_zp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"foo\"}> ({\n    \"gpu.func\"() <{arg_attrs = [{gpu.test_promote_workgroup}], function_type = (memref<8x7x6x5x4xf32>) -> ()}> ({\n    ^bb0(%arg0: memref<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_logical_not\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xi1>):\n    %0 = \"tosa.logical_not\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10xf32>, tensor<20xf32>) -> (), sym_name = \"testReifyFunctions\"}> ({\n  ^bb0(%arg0: tensor<10xf32>, %arg1: tensor<20xf32>):\n    %0 = \"tes..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (bf16) -> f32, sym_name = \"f_convert_bf16_to_f32_scalar\"}> ({\n  ^bb0(%arg0: bf16):\n    %0 = \"spirv.FConvert\"(%arg0) : (bf16) -> f32\n    \"spirv.R..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i40 (i8)>, linkage = #llvm.linkage<external>, sym_name = \"exotic_target_memset_inline\", unnamed_addr = 0 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_reverse\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reverse\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_floor\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.floor\"(%arg0) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_cos\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.cos\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_fadd\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.GroupFAdd\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"identity\"}> ({\n  ^bb0(%arg3: tensor<f32>):\n    \"func.return\"(%arg3) : (tensor<f32>) -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0, s1] -> (s0, s1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"compare_affine_min\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op, %arg1: !transfo..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"complex_angle\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.angle\"(%arg0) <{fastmath = #arith.fastmath..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testVarResultFail\"}> ({\n    %0:3 = \"testvar.var_result\"() : () -> (i16, i64, i64)\n    \"func.return\"() : () -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, tensor<?xi32>) -> index, sym_name = \"dim_of_reshape_i32\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %arg1: tensor<?xi32>):\n    %0 = \"arit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xi32>) -> (), sym_name = \"reverse_dyn\"}> ({\n  ^bb0(%arg0: tensor<?xi32>):\n    %0 = \"tosa.reverse\"(%arg0) <{axis = 0 : i32}> : (tensor<?..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0, s1] -> (s0, 192, s1)>\n#map1 = affine_map<()[s0, s1] -> (s0, 32, s1)>\n#map2 = affine_map<()[s0, s1] -> (s0, 256, s1)>\n#map3 = affine_map<()[s0, s1, s2] -> (s0, s1, s2)>\n\"builti..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (si32, si32, si32) -> (), sym_name = \"sclamp\"}> ({\n  ^bb0(%arg0: si32, %arg1: si32, %arg2: si32):\n    %0 = \"spirv.GL.SClamp\"(%arg0, %arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"valid_pass_option\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequen..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededTypeVerifier\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.singleton\n    %1 = \"testd.any\"() : () -> !testd.parametr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"allowed_cases_pass\"}> ({\n    %0 = \"test.i32_enum_attr\"() <{attr = 5 : i32}> : () -> i32\n    %1 = \"test.i32_enum_attr\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_clz\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.clz\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<4xi32>, sym_name = \"test_const\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"tosa.const\"() <{values = dense<[3, 0, 1, 2]> : tensor<4xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"map1d\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0:2 = \"new_processor_id_and_range\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeeded_type_traits\"}> ({\n    %0 = \"test.result_type_with_trait\"() : () -> !test.test_type_with_trait\n    \"func.return\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"bitcastPoisonItoFP\"}> ({\n    %0 = \"ub.poison\"() <{value = #ub.poison}> : () -> i32\n    %1 = \"arith.bitcast\"(%0) : (i32) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x1x?x1xi32>, tensor<7x1x5xi32>) -> tensor<8x7x?x5xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<8x1x?x1xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x12xi32>, tensor<?x12xi32>) -> tensor<?x?xi32>, sym_name = \"infer_concat_return_type\"}> ({\n  ^bb0(%arg0: tensor<5x12xi32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"split_handle\"}> ({\n  ^bb0(%arg1: index, %arg2: index, %arg3: index):\n    %5 = \"arith.muli\"(%arg1, %arg2..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 ()>, linkage = #llvm.linkage<external>, res_attrs = [{llvm.range = #llvm.constant_range<i64, 0, 4097>}]..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dummy",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (tensor<5xi1>, tensor<5xi1>), sym_name = \"scf_while_non_equiv_condition\"}> ({\n  ^bb0(%arg0: tensor<5xi1>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "index"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"trivial_ops\"}> ({\n  ^bb0(%arg9: index, %arg10: index):\n    %16 = \"index.add\"(%arg9, %arg10) : (index, index) -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8, i8) -> (), sym_name = \"ipowi\"}> ({\n  ^bb0(%arg0: i8, %arg1: i8):\n    %0 = \"math.ipowi\"(%arg0, %arg1) : (i8, i8) -> i8\n    \"func.return\"() :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0)>\n#map1 = affine_map<()[s0, s1, s2, s3] -> (s0 + s1 + s2 + s3)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, index) -> index, sym_name = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: f32):\n    \"test.region\"() ({\n      %0 = \"arith.addf\"(%arg0, %arg0) <{fastmath = #arith.fastmath<n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"blackhole\"}> ({\n    %0 = \"test.blackhole_producer\"() : () -> i32\n    \"test.blackhole\"(%0) : (i32) -> ()\n    \"func.return\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x?xi1>, tensor<2x?xf32>, tensor<2x?xf32>) -> tensor<2x?xf32>, sym_name = \"test_select_2d_one_dynamic\"}> ({\n  ^bb0(%arg0: tensor<2x?xi1>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, res_attrs = [{test.erase_this_result}], sym_name = \"f\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> index, sym_name = \"to_select1\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"fadd_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.FAdd\"(%arg0, %arg0) : (f32, f32) -> f32\n    \"func.return\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x?x?x32xi32>) -> (), sym_name = \"rescale_dyn\"}> ({\n  ^bb0(%arg0: tensor<1x?x?x32xi32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x8xf32>) -> tensor<5x8xf32>, sym_name = \"rsqrt_tns\"}> ({\n  ^bb0(%arg0: tensor<5x8xf32>):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_smax_reduce\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformSMax\"(%arg0) <{execution_scope ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_rsqrt\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.rsqrt\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> index, sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n    %0 = \"shape.cstr_broadcastable\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_log\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.log\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_reduce_any\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1>):\n    %0 = \"tosa.reduce_any\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"entry\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : i64}> : () -> i64\n    %3 = \"func.call\"(%2) <{callee = @emulate_me_pl..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0, d1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x6x32xf32>, index, index) -> f32, sym_name = \"fold_static_stride_subview_with_affine_load_store..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"reduce_max_nan_propagate\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_logical_left_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<*xi32>, sym_name = \"while_test\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.add\"(%arg0, %arg0) : (tensor<i32>, tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %0 = \"smt.constant\"() <{value = true}> : () -> !smt.bool\n    %1 = \"smt.check\"() ({\n      \"smt.yield\"(%0) : (!smt.bool) -> ()\n    }, {\n      \"smt.yield\"(%0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_ceil_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi32>, index, index) -> (), sym_name = \"fold_one_loop\"}> ({\n  ^bb0(%arg14: memref<?xi32>, %arg15: index, %arg16: index):\n    %24 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i16) -> i32, sym_name = \"shift_left_logical\"}> ({\n  ^bb0(%arg0: i32, %arg1: i16):\n    %0 = \"spirv.ShiftLeftLogical\"(%arg0, %arg1) : (i32, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_pow\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"muli\"}> ({\n    %0 = \"arith.constant\"() <{value = 4 : i32}> : () -> i32\n    %1 = \"arith.constant\"() <{value = 2 : i32}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (index, index), sym_name = \"empty_tensor_dynamic_dim2\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.constant\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ugt\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, index, index, index, index) -> (), sym_name = \"speculate_tensor_dim_unknown_rank_unknown_dim\"}> ({\n  ^bb0(%arg18: tensor<*xf32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x10xf32>) -> tensor<2x2x5xf32>, sym_name = \"tensor.reshape\"}> ({\n  ^bb0(%arg0: tensor<?x10xf32>):\n    %0 = \"arith.constant\"() <{value =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"roundeven32\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.roundeven\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x8xi32>) -> tensor<8x4xi32>, sym_name = \"tensor.cast_chain_invalid\"}> ({\n  ^bb0(%arg0: tensor<4x8xi32>):\n    %0 = \"tensor.cast\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"two_const_ops\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %3 = \"arith.constant\"() <{value = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"non_static_shape\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, index) -> index, sym_name = \"dim\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %arg1: index):\n    %0 = \"tensor.dim\"(%arg0, %arg1) : (tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"inverse_trigonometrics\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.asin\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x4xf32>, sym_name = \"basic\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<7.000000e+00> : tensor<3x4xf32>}> : () -> tensor<3x4x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (i32, i32, i32), sym_name = \"simple_arith.remui\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 5 : i32}> : () -> i32\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<4xi32>, sym_name = \"test_const\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"tosa.const\"() <{values = dense<[3, 0, 1, 2]> : tensor<4xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "omp",
        "llvm"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"atomic_update\"}> ({\n    %1 = \"llvm.mlir.addressof\"() <{global_name = @_QFsEc}> : () -> !llvm.ptr\n    \"omp.atomic.update\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.collect_match..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tuple<i1, i32>) -> tuple<i1, i32>, sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (tupl..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>, tensor<1xf32>) -> tensor<1xf32>, sym_name = \"test_negate_non_const_input1_zp\"}> ({\n  ^bb0(%arg0: tensor<1xf32>, %arg1: tensor<1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.type1<!testd.type2<i32>>) -> (), sym_name = \"type1_one_references\"}> ({\n  ^bb0(%arg0: !testd.type1<!testd.type2<i32>>):\n    \"func.return..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xi32>, sym_name = \"fold_mul_splat_i8\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<17> : tensor<10xi8>}> : () -> tensor<10xi8>\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module_1\"}> ({\n    \"func.func\"() <{function_type = (index) -> index, sym_name = \"test\"}> ({\n    ^bb0(%arg0: index):\n      %0 = \"test.increment..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (f32, tensor<?xf32>, f32), sym_name = \"execute_region_test\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"arith.constant\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x26xi32>) -> tensor<13x26x3xf32>, sym_name = \"test_gather\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"arith_extui_i1_to_i32\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.extui\"(%arg0) : (i1) -> i32\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x11x11x3xi48>, sym_name = \"test_const_i48\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<3x11x11x3xi48>}> : () -> tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> (), sym_name = \"main\"}> ({\n  ^bb0(%arg0: i8):\n    %0 = \"math.ctlz\"(%arg0) : (i8) -> i8\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n})..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_mul_zero_rhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<0.000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (bf16) -> i32, sym_name = \"convert_bf16_to_s32_scalar\"}> ({\n  ^bb0(%arg0: bf16):\n    %0 = \"spirv.ConvertFToS\"(%arg0) : (bf16) -> i32\n    \"spirv...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"clone_before_dealloc\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_sub\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"fold_div_index\"}> ({\n    %0 = \"arith.constant\"() <{value = 10 : index}> : () -> index\n    %1 = \"arith.constant\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.using_int_property_with_worse_bytecode\"() <{value = 3 : i64}> : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (tensor<5xf32>, tensor<6xf32>), sym_name = \"ext_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (f32, f32, f32), sym_name = \"test_maximumf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"simple_addf\"}> ({\n    %0 = \"arith.constant\"() <{value = 4.500000e+00 : f32}> : () -> f32\n    %1 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_sigmoid\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.sigmoid\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_umax\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupUMax\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"int_attrs_pass\"}> ({\n    \"test.in_range_attrs\"() {attr_00 = -128 : i8, attr_01 = 127 : i8, attr_02 = -128 : si8, attr_03 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"group_non_uniform_logical_and\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"spirv.GroupNonUniformLogicalAnd\"(%arg0) <{execution_sco..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xf32>, sym_name = \"test_cast1\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.cast\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, index) -> tensor<f32>, sym_name = \"for_correct_recursive_legalization_behavior\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: index):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"buffer_cast_of_tensor_load\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.to_tensor\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10xf32>, f32, index) -> (), sym_name = \"atomic_rmw\"}> ({\n  ^bb0(%arg4: memref<10xf32>, %arg5: f32, %arg6: index):\n    %3 = \"memref.atomi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x?x?xi1>) -> (), sym_name = \"test_reduce_binary\"}> ({\n  ^bb0(%arg0: tensor<2x3x?x?xi1>):\n    %0 = \"tosa.reduce_all\"(%arg0) <{axis = 0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x52x3xf32>, tensor<2x12x3xf32>) -> tensor<2x52x3xf32>, sym_name = \"test_scatter_duplicate_indices\"}> ({\n  ^bb0(%arg0: tensor<2x52x3xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul_non_const_a_zp\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_exp\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.exp\"(%arg0) <{fastmath = #arith.fas..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x512x1x?xf32>) -> memref<?x?xf32>, sym_name = \"collapse_after_memref_cast\"}> ({\n  ^bb0(%arg0: memref<?x512x1x?xf32>):\n    %0 = \"memref...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<f32>, sym_name = \"different_before_after_args\"}> ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    %1 = \"arith.constan..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_add_i32\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"no_extra_semicolon\"}> ({\n  ^bb0(%arg0: i1):\n    \"emitc.if\"(%arg0) ({\n      \"emitc.include\"() <{include = \"myheader.h\"}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>, memref<?xi32>) -> index, sym_name = \"dim_of_memref_reshape_i32\"}> ({\n  ^bb0(%arg0: memref<*xf32>, %arg1: memref<?xi32>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_exp\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.exp\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"expm1\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.expm1\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> f32, sym_name = \"imaginary_number\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.im\"(%arg0) <{fastmath = #arith.fastmath..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"xorxor3\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.xori\"(%arg1, %arg0) : (i32, i32) -> i32\n    %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"erase_tracked_op_in_named_sequence\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.erase_op\"() {replace_with_new_op = \"te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf16>) -> tensor<1x21x3xf16>, sym_name = \"test_reduce_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf16>):\n    %0 = \"tosa.reduce_max\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testMultResultsWrongSegmentType\"}> ({\n    %0:3 = \"testvar.var_and_opt_result\"() {result_segment_sizes = i32} : () -> (i16,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0] -> (s0 + 8, s0 * 4)>\n#map2 = affine_map<()[s0, s1, s2] -> (s0, s1 + 7, s2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_ty..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"do_not_move_slice\"}> ({\n    %2 = \"before\"() : () -> f32\n    %3 = \"moved_op\"() ({\n      \"yield\"(%2) : (f32) -> ()\n    }) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x?xi32>) -> (), sym_name = \"test_dynamic_argmax\"}> ({\n  ^bb0(%arg0: tensor<2x?xi32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 0 : i32, n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x8x8x8xi32>, tensor<1x8x8x8xi32>) -> tensor<1x8x8x8xi32>, sym_name = \"test_mul_too_big_shift\"}> ({\n  ^bb0(%arg0: tensor<1x8x8x8xi32>, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<6xi8>, tensor<?xi8>) -> (), sym_name = \"table8_dyn_table\"}> ({\n  ^bb0(%arg0: tensor<6xi8>, %arg1: tensor<?xi8>):\n    %0 = \"tosa.table\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.dataflow_mismatch\"() ({\n    %1:2 = \"test.producer\"() : () -> (i32, i32)\n    \"test.consumer\"(%1#0, %1#1) : (i32, i32) -> ()\n  }) : () -> ()\n  \"test.dataflow_mismatch\"() ({..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\"}> ({\n    %4 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"fu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x64xi16>, tensor<513xi16>) -> tensor<1x1x1x1x1x1x64xi32>, sym_name = \"test_table_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> memref<?xf32>, sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"constant_iter_arg\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.constant\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, memref<?xf64>, f64, index) -> (memref<?xf64>, index), sym_name = \"sparse_push_back_n\"}> ({\n  ^bb0(%arg0: index, %arg1: memref<?xf64>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f32, sym_name = \"arith_truncf\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"arith.truncf\"(%arg0) <{roundingmode = 4 : i32}> : (f64) -> f32\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x11x11x3xi32>, sym_name = \"test_const_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<3x11x11x3xi32>}> : () -> tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tuple<i1, tuple<i32>>) -> tuple<i1, tuple<i32>>, sym_name = \"nested_unconverted_op_result\"}> ({\n  ^bb0(%arg0: tuple<i1, tuple<i32>>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x29x29x4xf32>) -> tensor<1x1x1x1x29x4xi32>, sym_name = \"test_argmax_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x29x29x4xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.size, sym_name = \"nonfoldable_num_elements\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.num_elements\"(%arg0) : (!..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i8, UniformConstant>, i32, i32) -> i32, sym_name = \"printf\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i8, UniformConstant>, %arg1: i32, %arg2: i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"arith_index_castui\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.index_castui\"(%arg0) : (i32) -> index\n    %1 = \"arith.ind..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"unusedCast\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    \"func.ret..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"TestAlwaysIllegalOperationPass1\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type = () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (index, index), sym_name = \"to_select2\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10xi32>) -> tensor<10xi32>, sym_name = \"test_custom\"}> ({\n  ^bb0(%arg0: tensor<10xi32>):\n    %0 = \"tosa.custom\"(%arg0) <{domain_name = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xf32>) -> tensor<2x3xf32>, sym_name = \"mul_bcast_one_float\"}> ({\n  ^bb0(%arg0: tensor<2x3xf32>):\n    %0 = \"tosa.const\"() <{values = d..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> f32, sym_name = \"convert_s_to_f_scalar\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.ConvertSToF\"(%arg0) : (i32) -> f32\n    \"spirv.ReturnVa..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>, tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"select_true_value\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>, %arg1: tensor<2x3xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_multiplier\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x600x1200xi32>, sym_name = \"do_not_fold_reciprocal_int\", sym_visibility = \"nested\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedAttrsMissingAttr\"}> ({\n    \"testd.attrs\"() {attr1 = i32} : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_concat_tensor_list_size\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xi32>}> : () -> tensor<1xi32>\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!test.test_tensor<[32, 64], f64>) -> !test.test_tensor<[32, 128], f64>, sym_name = \"custom_op\"}> ({\n  ^bb0(%arg0: !test.test_tensor<[32, 64], f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"concat_fold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.concat\"(%arg0) <{axis = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xf32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_arithmetic_right_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xf3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_fmin\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.GroupFMin\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"multi_use\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value = 1 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x2xi8>) -> (), sym_name = \"rescale_i8_dyn_batch\"}> ({\n  ^bb0(%arg0: tensor<?x2xi8>):\n    %0 = \"tosa.const\"() <{values = dense<19689> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"ctlz_index\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"math.ctlz\"(%arg0) : (index) -> index\n    \"func.return\"() : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"maxsi\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.maxsi\"(%arg0, %arg1) : (i32, i32) -> i32\n    \"func.re..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"arith_shift_left_index\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 42 : index}> : () -> index\n    %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"arith_signed_integer_div_rem\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.divsi\"(%arg0, %arg1) : (i32, i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2x3x4xi32>) -> (), sym_name = \"operand_rank_equals_result_size_success\"}> ({\n  ^bb0(%arg0: tensor<1x2x3x4xi32>):\n    %0 = \"test.operan..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.value_shape, !shape.value_shape) -> !shape.shape, sym_name = \"func1\"}> ({\n  ^bb0(%arg2: !shape.value_shape, %arg3: !shape.value_shape):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!testd.type1<i64>) -> (), sym_name = \"wrong_parameter_type1\"}> ({\n  ^bb0(%arg0: !testd.type1<i64>):\n    \"func.return\"() : () -> ()\n  }) : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module_54\"}> ({\n    \"func.func\"() <{function_type = (f32, f32, f64, f64) -> (f32, f32, f64, f64), sym_name = \"gpu_fminmax\"}> ({\n    ^bb0(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"test_abs_1d_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"tosa.abs\"(%arg0) : (tensor<?xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"argmax_nan_propagate\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_fmax\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.GroupFMax\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>, gr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x1xf32>, tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_greater_rank_invalid\"}> ({\n  ^bb0(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.one_region_op\"() ({\n    \"builtin.module\"() ({\n      \"func.func\"() <{function_type = () -> (), sym_name = \"nested\", sym_visibility = \"nested\"}> ({\n        \"func.return\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"invalid_pass_name\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequen..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"move_in_topological_sort_order\"}> ({\n    %2 = \"before\"() : () -> f32\n    %3 = \"moved_op_1\"() : () -> f32\n    %4 = \"moved_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin",
        "llvm"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"llvm_unreachable\"}> ({\n    \"func.func\"() <{function_type = (tensor<4x4xf32>) -> tensor<4x4xi1>, sym_name = \"fn_with_llvm_unreachable\", sym_visi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"bool\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"arith.addi\"(%arg0, %arg1) <{overflowFlags = #arith.overflow<none>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_mul_one_lhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<64> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2xi32>) -> memref<2xi32>, sym_name = \"test_side_effects\"}> ({\n  ^bb0(%arg0: memref<2xi32>):\n    %0 = \"bufferization.clone\"(%arg0) : (mem..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"correct_type_array_attr_pass\"}> ({\n    \"test.type_array_attr\"() <{attr = [i32, f32]}> : () -> ()\n    \"func.return\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> (), sym_name = \"mix\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"spirv.CL.mix\"(%arg0, %arg1, %arg2) : (f32, f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"noramalized_loops_with_shuffled_yielded_iter_args\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"baz\", sym_vi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, index, index) -> tensor<?x3x?xf32>, sym_name = \"tensor.splat_dynamic\"}> ({\n  ^bb0(%arg0: f32, %arg1: index, %arg2: index):\n    %0 = \"tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x?xi32>) -> (), sym_name = \"argmax_dyn_non_axis\"}> ({\n  ^bb0(%arg0: tensor<3x?xi32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 0 : i32, n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"no_overflowing_memset_inline\", unnamed_addr = 0 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xi1>, tensor<13x21x3xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_select\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xi1>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32) -> f32, sym_name = \"test\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: f32):\n    %0 = \"arith.mulf\"(%arg0, %arg1) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?xf32>, index) -> (), sym_name = \"extract\"}> ({\n  ^bb0(%arg0: tensor<?x?x?xf32>, %arg1: index):\n    %0 = \"tensor.extract\"(%arg0, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"variadic_func\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"() : () -> ()\n  }) {func.varargs = true, llvm.emit_c_interface..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi8>) -> tensor<4xi8>, sym_name = \"clamp_twice_with_nan_ignore_is_single_clamp\"}> ({\n  ^bb0(%arg0: tensor<4xi8>):\n    %0 = \"tosa.clamp\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, tensor<f32>, tensor<f32>) -> tensor<f32>, sym_name = \"select\"}> ({\n  ^bb0(%arg0: i1, %arg1: tensor<f32>, %arg2: tensor<f32>):\n    %0 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n    ^..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.symbol\"() <{sym_name = \"foo\"}> : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xi32>, sym_name = \"fold_add_splat_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1> : tensor<10xi32>}> : () -> tensor<10xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.size, sym_name = \"dont_fold_rank\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.rank\"(%arg0) : (!shape.shape) -> !s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xf32>) -> (tensor<1x1x1xf32>, tensor<1x1x1xf32>), sym_name = \"test_rfft2d_width1\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xf32>):\n    %0:2 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<(d0)[s0] -> (s0 + 4, d0 + 7)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"dont..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<3x4xf32>, tensor<3x4xf32>), sym_name = \"duplicate_constants\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<7.000000e+00> : tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi32>) -> (), sym_name = \"reverse\"}> ({\n  ^bb0(%arg0: tensor<5x4xi32>):\n    %0 = \"tosa.reverse\"(%arg0) <{axis = 0 : i32}> : (tensor<5..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>, tensor<*xf32>) -> (), sym_name = \"same_types\"}> ({\n  ^bb0(%arg0: tensor<*xi32>, %arg1: tensor<*xf32>):\n    \"test.operands_have_s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i32, sym_name = \"xorxor1\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"arith.xori\"(%arg1, %arg0) : (i32, i32) -> i32\n    %1 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> f32, sym_name = \"base_test\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"test.addi\"(%arg0, %arg0) : (i32, i32) -> i32\n    %1 = \"test.cast\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "xevm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"memfence\"}> ({\n    \"xevm.memfence\"() <{addrspace = #xevm.addr_space<global>, scope = #xevm.mem_scope<workgroup>}> : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"divi_signed_by_one\"}> ({\n  ^bb0(%arg3: i32):\n    %6 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %7 = \"ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "simple"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"trivial\"}> ({\n    \"simple.terminator\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xbf16>, sym_name = \"test_cast_f32_bf16\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.cast\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x16x32xf32>) -> tensor<2x16x32xf32>, sym_name = \"softmax\"}> ({\n  ^bb0(%arg0: tensor<2x16x32xf32>):\n    %0 = \"tensor.empty\"() : () -> te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i64) -> (i32, i64), sym_name = \"replace_if_with_cond3\"}> ({\n  ^bb0(%arg0: i1, %arg1: i64):\n    %0:2 = \"scf.if\"(%arg0) ({\n      %2 = \"test.g..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global\"() <{addr_space = 0 : i32, global_type = i32, linkage = #llvm.linkage<weak_odr>, sym_name = \"zed\", unnamed_addr = 0 : i64, value = 42 : i32, visibility_ = 0 :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x12xi32>, tensor<?x?xi32>) -> tensor<?x12xi32>, sym_name = \"infer_concat_operand_types\"}> ({\n  ^bb0(%arg0: tensor<?x12xi32>, %arg1: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dummy",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi1>, index) -> (i1, i1), sym_name = \"scf_while_non_equiv_condition\"}> ({\n  ^bb0(%arg0: tensor<5xi1>, %arg1: tensor<5xi1>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"verify_nested_isolated_above\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    \"test.verifiers\"(%0) ({..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"no_volatile_memset_inline\", unnamed_addr = 0 : i64,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"convert_bitcast_roundtip\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"spirv.Bitcast\"(%arg0) : (i64) -> f64\n    %1 = \"spirv.Bitc..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global\"() <{addr_space = 0 : i32, global_type = !llvm.ptr, linkage = #llvm.linkage<linkonce>, sym_name = \"forward_use_of_address\", unnamed_addr = 0 : i64, visibility..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"remove_zero_iteration_loop_vals\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 2 : index}> : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_sign\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.sign\"(%arg0) <{fastmath = #arith.f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xi32>, sym_name = \"test_cast_bf16_i32\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.cast\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"hoist_scf_for_with_unknown_trip_count_unknown_step\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<5xf32>) -> (), sym_name = \"elementwiseMappable_dynamic_shapes\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: tensor<5xf32>):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f64) -> (), sym_name = \"fptrunc\"}> ({\n  ^bb0(%arg0: f32, %arg1: f64):\n    %0 = \"arith.truncf\"(%arg0) : (f32) -> f16\n    %1 = \"arith.truncf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x8x16xf32>) -> (tensor<13x8x9xf32>, tensor<13x8x9xf32>), sym_name = \"test_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<13x8x16xf32>):\n    %0:2 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"b0\"}> ({\n    \"func.call\"() <{callee = @b0}> : () -> ()\n    \"func.call\"() <{callee = @b1}> : () -> ()\n    \"func.call\"() <{c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, i32) -> f32, sym_name = \"group_non_uniform_rotate_khr\"}> ({\n  ^bb0(%arg0: f32, %arg1: i32):\n    %0 = \"spirv.Constant\"() <{value = 4 : i32}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testMultResultsMissingSegment\"}> ({\n    %0:3 = \"testvar.var_and_opt_result\"() : () -> (i16, i16, i64)\n    \"func.return\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testVarResultFail\"}> ({\n    \"testvar.var_result\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (i1, i1, i1, i1), sym_name = \"test_cmpf\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"arith.constant\"() <{value = 0x7FFFFFFF : f32}> : () -> f32\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<32x16384x32xf32>, tensor<32x16384x32xf32>) -> (tensor<32x16384x32xf32>, tensor<32x16384x32xf32>), sym_name = \"test_fft2d_real_h\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "foo",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"nested_isolated\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    \"builtin.module\"() ({\n      \"func.f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2x4xf32>) -> (), sym_name = \"memref_op\"}> ({\n  ^bb0(%arg0: memref<2x4xf32>):\n    \"memref.copy\"(%arg0, %arg0) : (memref<2x4xf32>, memref<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !test.test_tensor<[42], f64>, sym_name = \"custom_origin_op\"}> ({\n    %0 = \"test.create_tensor_op\"() : () -> !test.test_tensor<[21], f64>\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"test\"}> ({\n    %0 = \"arith.constant\"() <{value = -1 : index}> : () -> index\n    %1 = \"test.with_bounds\"() <{smax = 9223372..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"ctlz\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"math.ctlz\"(%arg0) : (i32) -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "linalg",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32x7xf32>, memref<32x7xf32>, memref<32x7xf32>) -> (), sym_name = \"map\"}> ({\n  ^bb0(%arg1: memref<32x7xf32>, %arg2: memref<32x7xf32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0, d1) -> (d0 + d1 + 1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"affine.apply\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"affine.apply\"(%arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>) -> index, sym_name = \"fold_rank_memref\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>):\n    %0 = \"memref.rank\"(%arg0) : (memref<?x?xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tuple<tuple<tuple<i1>>>) -> tuple<tuple<tuple<i1>>>, sym_name = \"recursive_decomposition\"}> ({\n  ^bb0(%arg0: tuple<tuple<tuple<i1>>>):\n    \"fun..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (), sym_name = \"rsqrt_double_fmf\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #arith.fastmath<fast>}> : (f64) ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"private_helper\"}> ({\n  ^bb0(%arg0: !transform.any_op):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test_irdl_to_cpp"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test\"}> ({\n    %0 = \"test_irdl_to_cpp.bar\"() : () -> i32\n    %1 = \"test_irdl_to_cpp.beef\"(%0, %0) : (i32, i32) -> i32\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>, f32, i1) -> (tensor<?x?xf32>, tensor<?x?xf32>), sym_name = \"no_cse_single_block_ops_different_bodies\"}> ({\n  ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"side_effect\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i1, i1) -> index, sym_nam..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, StorageBuffer>) -> i32, sym_name = \"subgroup_block_read_intel\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i32, StorageBuffer>):\n    %0 = \"sp..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, tensor<1xi32>, tensor<2xi32>, tensor<?xi32>) -> tensor<*xf32>, sym_name = \"tensor_reshape\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"nested_region4\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_insert_same_op\"}> ({\n    %0 = \"test.insert_same_op\"() : () -> i32\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "vector"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_vscale_constant_names\"}> ({\n    %0 = \"vector.vscale\"() : () -> index\n    %1 = \"arith.constant\"() <{value = 8 : index}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> index, sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n    %0 = \"shape.cstr_broadcastable\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"remove_direct_duplicated_read_op\"}> ({\n    %0 = \"test.op_with_memread\"() : () -> i32\n    %1 = \"test.op_with_memread\"() : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, index) -> tensor<2x?xf32>, sym_name = \"collapse_shape_splat_dynamic_no_fold\"}> ({\n  ^bb0(%arg0: f32, %arg1: index):\n    %0 = \"tensor.splat..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_invariant_backedge\"}> ({\n    \"test.graph_loop\"() ({\n      %0 = \"arith.addi\"(%2, %1) <{overflowFlags = #arith.overflow..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"llvm_constant\", unnamed_addr = 0 : i64, visibility_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"valid_pass_options_as_list\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.nam..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64, i32) -> (), sym_name = \"fpowi\"}> ({\n  ^bb0(%arg0: f64, %arg1: i32):\n    %0 = \"math.fpowi\"(%arg0, %arg1) <{fastmath = #arith.fastmath<none>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "index",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"forward\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value = 32 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i32>, sym_name = \"const_test\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<3> : tensor<i32>}> : () -> tensor<i32>\n    \"func.return..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i16>, sym_name = \"cast_float_to_int\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-4.000000e+00> : tensor<f32>}> : () -> tensor<f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"bitcastBackAndForth\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.bitcast\"(%arg0) : (i32) -> f32\n    %1 = \"arith.bitcast\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xi8>) -> tensor<?x1xi8>, sym_name = \"no_fold_negate_negate_non_zero_zp\"}> ({\n  ^bb0(%arg0: tensor<?x1xi8>):\n    %0 = \"tosa.const\"() <..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.block_type_mismatch\"() ({\n  ^bb0(%arg2: f32, %arg3: f32):\n    \"test.some_branching_op\"() : () -> ()\n  }) : () -> ()\n  \"test.block_type_mismatch\"() ({\n  ^bb0(%arg0: i32, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_non_uniform_bitwise_or\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.GroupNonUniformBitwiseOr\"(%arg0) <{execution_sc..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"emitc_call_operand\"}> ({\n    %2 = \"emitc.literal\"() <{value = \"M_PI\"}> : () -> f32\n    %3 = \"emitc.call_opaque\"(%2) <{call..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1x6x1xi32>, tensor<7x1x5xi32>) -> tensor<?x7x6x5xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<?x1x6x1xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xf32>, sym_name = \"addf_splat_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<4.500000e+00> : tensor<4xf32>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"test_reorder_constants_and_match\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 43 : i32}> : () -> i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10x10xf32>, tensor<1xf32>, tensor<*xf32>, tensor<?xf32>) -> (), sym_name = \"succeededSameOperandAndResultShape\"}> ({\n  ^bb0(%arg0: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> i16, sym_name = \"direct_forward\"}> ({\n  ^bb0(%arg0: i16):\n    %0 = \"test.type_changer\"(%arg0) : (i16) -> i16\n    \"func.return\"(%0) : (i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<*xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_mul_unranked_b\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> (), sym_name = \"testOptOperandFail\"}> ({\n  ^bb0(%arg0: i16):\n    \"testvar.opt_operand\"(%arg0) : (i16) -> ()\n    \"func.return\"() : () ->..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3xi32>) -> tensor<2x3xi32>, sym_name = \"add_zero_int\"}> ({\n  ^bb0(%arg0: tensor<2x3xi32>):\n    %0 = \"tosa.const\"() <{values = dense<0>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> (i8, i8, i8, i8), sym_name = \"test_minui\"}> ({\n  ^bb0(%arg1: i8):\n    %7 = \"arith.constant\"() <{value = -1 : i8}> : () -> i8\n    %8 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_reciprocal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reciprocal\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_pow\"}> ({\n    ^bb0(%arg0: f16, %arg1: f32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_clz\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.clz\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"fold_mul_one_rhs_f32\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"tosa.const\"() <{values = dense<1.0000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi1>, sym_name = \"reduce_all_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[true, true, true], [true, false, true]]> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.structured.ma..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "ub",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> i32, sym_name = \"hoist_invariant_scf_if_success\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"test_5_type_2\"}> ({\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> {tag = \"zero\"} : () -> f32\n    \"func.retur..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"convert_detached_signature\"}> ({\n    \"test.detached_signature_conversion\"() ({\n    ^bb0(%arg0: i64):\n      \"test.return\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_abs\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.abs\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x4xf32>, tensor<8x5xf32>) -> tensor<8x9xf32>, sym_name = \"tensor.concat_different_shapes\"}> ({\n  ^bb0(%arg0: tensor<8x4xf32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, f32) -> (), sym_name = \"base_test\"}> ({\n  ^bb0(%arg0: i32, %arg1: f32):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0)>\n#map1 = affine_map<()[s0, s1, s2, s3] -> (s0 + s1 + s2 + s3)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, index) -> index, sym_name = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (i32, f32), sym_name = \"uplift_while\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_greater\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.struct<a9, (!spirv.ptr<!spirv.struct<b9, (!spirv.ptr<!spirv.struct<a9>, Uniform>)>, Uniform>)>) -> (), sym_name = \"id_struct_recursive\",..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xi32>) -> tensor<4xi32>, sym_name = \"clamp_i32_not_noop\"}> ({\n  ^bb0(%arg0: tensor<4xi32>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 4 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2xf32>, tensor<2x2xf32>) -> (), sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<1x2xf32>, %arg1: tensor<2x2xf32>):\n    %0 = \"tosa.c..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_re_enter_regi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<4xf32>, sym_name = \"addf_dense_and_splat_tensors\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<[1.500000e+00, 2.500000e+00, 3.5..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xf32>, sym_name = \"test_cast1\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.cast\"(%arg0) : (te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>) -> tensor<f32>, sym_name = \"exp\"}> ({\n  ^bb0(%arg0: tensor<f32>):\n    %0 = \"math.exp\"(%arg0) <{fastmath = #arith.fastmath<none>}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<()[s0, s1, s2] -> (s0, s1 + 1, s2 * 2)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"m..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i8, sym_name = \"non_const_rhs\"}> ({\n    %0 = \"arith.constant\"() <{value = 64 : i8}> : () -> i8\n    %1 = \"test.with_bounds\"() <{smax = 2 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x3x3x?xf32>, tensor<6x6x?x?xf32>) -> tensor<6x6x?x?xf32>, sym_name = \"winograd_filter_dyn\"}> ({\n  ^bb0(%arg0: tensor<?x3x3x?xf32>, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"reduce_min_nan_propagate\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"floordivi_index\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"arith.floordivsi\"(%arg0, %arg1) : (inde..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<1x21x3xf32>, sym_name = \"test_reduce_max\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reduce_max\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"many\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.addf\"(%arg0, %arg1) <{fastmath = #arith.fastmath<none>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"nested\", sym_visibility = \"nested\"}> ({\n  ^bb0(%arg0: i32):\n    \"func.return\"(%arg0) : (i32) -> ()\n  }) : () -> ()\n  \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"func\"}> ({\n  ^bb0(%arg1: i32):\n    \"llvm.return\"(%arg1) : (i32) -> ()\n  }) : () -> ()\n  \"func.func\"() <{function_type ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.any_op, !transform.any_value) -> (), sym_name = \"__transform_main\"}> ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>, memref<?xf32>) -> (), sym_name = \"loop_pipeline_op\"}> ({\n  ^bb0(%arg1: memref<?xf32>, %arg2: memref<?xf32>):\n    %3 = \"arith.con..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i32>, sym_name = \"cast_int_to_int_sign\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-1> : tensor<i16>}> : () -> tensor<i16>\n    %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> index, sym_name = \"cond_prop\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"scf.if\"(%arg0) ({\n      %4 = \"scf.if\"(%arg0) ({\n        %6 = \"test.get_s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x?xi32>) -> (), sym_name = \"argmax_dyn_axis\"}> ({\n  ^bb0(%arg0: tensor<3x?xi32>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 1 : i32, nan_m..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<123456x8192x8192xf32>, tensor<123456x8192x8192xf32>) -> (tensor<123456x8192x8192xf32>, tensor<123456x8192x8192xf32>), sym_name = \"test_f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i1, sym_name = \"test1\"}> ({\n  ^bb0(%arg6: i32):\n    %18 = \"arith.constant\"() <{value = 0.000000e+00 : f64}> : () -> f64\n    %19 = \"arit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul\"}> ({\n  ^bb0(%arg0: tensor<1x14x19xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>, tensor<i1>, tensor<i1>) -> tensor<f32>, sym_name = \"test_cond_if_max_nested_depth\"}> ({\n  ^bb0(%arg0: tensor<f32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i1, sym_name = \"group_non_uniform_logical_or\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"spirv.GroupNonUniformLogicalOr\"(%arg0) <{execution_scope..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<1x3x4x1x5xf32>) -> memref<3x4x5xf32>, sym_name = \"collapse_shape_static\"}> ({\n  ^bb0(%arg0: memref<1x3x4x1x5xf32>):\n    %0 = \"memref.col..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>, index, index, index) -> (tensor<?xf32>, tensor<?xf32>), sym_name = \"scf_for_swapping_yields\"}> ({\n  ^bb0(%arg0: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1xi8>) -> tensor<1x1xui8>, sym_name = \"test_rescale_output_unsigned\"}> ({\n  ^bb0(%arg0: tensor<1x1xi8>):\n    %0 = \"tosa.const\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x1xf32>, tensor<1x1xf32>) -> tensor<2x1xf32>, sym_name = \"test_add_2d_broadcast\"}> ({\n  ^bb0(%arg0: tensor<2x1xf32>, %arg1: tensor<1x1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_shift\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (1000, d0 + 512, s0 + 1)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"affine_min\"}> ({\n  ^bb0(%arg0: index, %arg1: in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i32>, sym_name = \"fold_div_splat_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<10> : tensor<i32>}> : () -> tensor<i32>\n    %1 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{llvm.byref = !test.smpla}], function_type = (!test.smpla) -> !test.smpla, sym_name = \"byref\"}> ({\n  ^bb0(%arg0: !test.smpla):\n    \"func.return\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<128x256xf32>, memref<128x256xf32>) -> memref<128x256xf32>, sym_name = \"return_arg\"}> ({\n  ^bb0(%arg0: memref<128x256xf32>, %arg1: memref..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i64) -> i64, sym_name = \"test_addi\"}> ({\n  ^bb0(%arg0: i64, %arg1: i64):\n    %0 = \"arith.addi\"(%arg0, %arg1) <{overflowFlags = #arith.over..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<3x5xi32>, index) -> index, sym_name = \"dim_any_static\"}> ({\n  ^bb0(%arg0: memref<3x5xi32>, %arg1: index):\n    %0 = \"memref.dim\"(%arg0, %..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>, i32, memref<2x3xi32>) -> (), sym_name = \"same_element_types_success\"}> ({\n  ^bb0(%arg0: tensor<*xi32>, %arg1: i32, %arg2: memref..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x1x3xi32>) -> tensor<13x21x3xi1>, sym_name = \"test_equal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>, tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi32>, sym_name = \"test_intdiv_rank_invalid\"}> ({\n  ^bb0(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<*xi32>, tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_scatter_unranked_indices\"}> ({\n  ^bb0(%arg0: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"replacement_op_for_dead_handle_not_found\"}> ({\n    \"test.container\"() ({\n      %2 = \"test.foo\"() {replace_with_new_op = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_mul\"}> ({\n  ^bb0(%arg0: complex<f32>, %arg1: complex<f32>):\n    %0 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"simple_mulf\"}> ({\n    %0 = \"arith.constant\"() <{value = 4.500000e+00 : f32}> : () -> f32\n    %1 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.any_op, !transform.param<i32>) -> (), sym_name = \"infer\"}> ({\n  ^bb0(%arg0: !transform.any_op, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"gpu.func\"() <{function_type = (i32) -> ()}> ({\n    ^bb0(%arg0: i32):\n      \"gpu.printf\"(%arg0) <{format = \"Hello: %d\\0A\"}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> f32, sym_name = \"convert_s64_to_f32_scalar\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"spirv.ConvertSToF\"(%arg0) : (i64) -> f32\n    \"spirv.Retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"ceilf_func\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.ceil\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) -> f64\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, i32) -> (), sym_name = \"ops_supporting_fastmath\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: i32):\n    %0 = \"arith.addf\"(%arg0, %arg1)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<4xi32>, tensor<4xi32>, tensor<4xi32>), sym_name = \"divi_unsigned_splat_tensor\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<0>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_log_with_fmf\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.log\"(%arg0) <{fastmath = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"get_parent_for_op_no_loop\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %2 = \"arith.muli\"(%arg1, %arg2) <{over..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xi32>, sym_name = \"unsupported_signature\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"callee\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequence..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi8>) -> tensor<*xi8>, sym_name = \"tensor_with_unknown_rank\"}> ({\n  ^bb0(%arg0: tensor<*xi8>):\n    %0 = \"tosa.abs\"(%arg0) : (tensor<*xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_identity\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.identity\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i64) -> (), sym_name = \"dropped_input_in_use\"}> ({\n  ^bb0(%arg0: i16, %arg1: i64):\n    \"work\"(%arg0) : (i16) -> ()\n  }) : () -> ()\n}) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"succeededDynamicOpVerifier\"}> ({\n  ^bb0(%arg0: f32):\n    \"test.dynamic_generic\"() : () -> ()\n    %0 = \"test.dynamic_gen..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0, s1] -> (s0 + s1, s1 + 16, 32)>\n#map1 = affine_map<()[s0, s1] -> (s0 + s1, 32, s1 + 16)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (index, index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %0 = \"smt.int.constant\"() <{value = 5 : ui4}> : () -> !smt.int\n    %1 = \"smt.int2bv\"(%0) : (!smt.int) -> !smt.bv<4>\n    \"smt.yield\"() : () -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, i1) -> (), sym_name = \"arith_shli_i1\"}> ({\n  ^bb0(%arg0: i1, %arg1: i1):\n    %0 = \"arith.shli\"(%arg0, %arg1) <{overflowFlags = #arith.overf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "scf",
        "test",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"default_insertion_position\"}> ({\n  ^bb0(%arg0: i1):\n    \"scf.if\"(%arg0) ({\n      %2 = \"arith.constant\"() <{value = 1 : i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"bitcastConstantFPtoI\"}> ({\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 : f32}> : () -> f32\n    %1 = \"arith.bitcast..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"group_imul\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.KHR.GroupIMul\"(%arg0) <{execution_scope = #spirv.scope<Workgroup>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_reduce_prod_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"group_non_uniform_broadcast_scalar\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.Constant\"() <{value = 1 : i32}> : () -> i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<?xf32>, sym_name = \"clone_multiple_dealloc_of_clone\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x2x?xf32>) -> (), sym_name = \"test_dynamic_width_rfft2d\"}> ({\n  ^bb0(%arg0: tensor<5x2x?xf32>):\n    %0:2 = \"tosa.rfft2d\"(%arg0) : (tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (i32, f32), sym_name = \"uplift_while\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> i32, sym_name = \"convert_f64_to_u32_scalar\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"spirv.ConvertFToU\"(%arg0) : (f64) -> i32\n    \"spirv.Retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.size, sym_name = \"num_elements_to_reduce\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.num_elements\"(%arg0) : (!sh..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<13x21x1xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_pow\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8x1x6x1xi32>, tensor<7x1x5xi32>) -> tensor<8x7x6x5xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<8x1x6x1xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index, index, index, index) -> (), sym_name = \"parametric\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index, %arg3: index, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> index, sym_name = \"min.oneval\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"affine.min\"(%arg0) <{map = #map..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x2xi1>, f32, tensor<2xi1>) -> (tensor<2xi1>, tensor<2xi1>), sym_name = \"failing_issue_59135\"}> ({\n  ^bb0(%arg0: tensor<2x2xi1>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32) -> (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32), sym_name = \"extrac..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_add_to_p..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"get_parent_for_op_no_loop\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %2 = \"arith.muli\"(%arg1, %arg2) <{over..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_div\"}> ({\n  ^bb0(%arg3: complex<f32>, %arg4: complex<f32>):\n    %2 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i32, i64) -> (), sym_name = \"testOptOperand\"}> ({\n  ^bb0(%arg0: i16, %arg1: i32, %arg2: i64):\n    \"testvar.opt_operand\"(%arg0, %arg2) : (i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!emitc.lvalue<i8>) -> (), sym_name = \"lvalue_as_argument\"}> ({\n  ^bb0(%arg0: !emitc.lvalue<i8>):\n    \"func.return\"() : () -> ()\n  }) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"arith_extsi_i1_to_i32\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.extsi\"(%arg0) : (i1) -> i32\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"test_small_pattern_1\"}> ({\n  ^bb0(%arg3: i32):\n    %27 = \"arith.constant\"() <{value = 45 : i32}> : () -> i32\n    %28 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x5xi8>, tensor<256xi8>) -> (), sym_name = \"test_table_non_const\"}> ({\n  ^bb0(%arg0: tensor<4x5xi8>, %arg1: tensor<256xi8>):\n    %0 = \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> index, sym_name = \"rank\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"tensor.rank\"(%arg0) : (tensor<*xf32>) -> index\n    \"fun..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "smt"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"integer_operations\"}> ({\n    %0 = \"smt.int.constant\"() <{value = 3973 : ui12}> {smt.some_attr} : () -> !smt.int\n    %1 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10x42xf32>, index, index, f32) -> (), sym_name = \"static_store\"}> ({\n  ^bb0(%arg0: memref<10x42xf32>, %arg1: index, %arg2: index, %arg3:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xi1>, tensor<10xi1>), sym_name = \"fold_eq_splat_f32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<4.000000e+00> : tensor<10xf32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"arith_extui\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.extui\"(%arg0) : (i32) -> i64\n    \"func.return\"() : () -> ()\n  }) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"minnumf\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.minnumf\"(%arg0, %arg1) <{fastmath = #arith.fastmath..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"arith.floordivsi_by_one\"}> ({\n  ^bb0(%arg1: i32):\n    %5 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %6 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xi32>, tensor<*xf32>) -> (), sym_name = \"same_element_types_success\"}> ({\n  ^bb0(%arg0: tensor<*xi32>, %arg1: tensor<*xf32>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<8xf32>) -> tensor<8xf32>, sym_name = \"math_fpowi_neg_odd_power\"}> ({\n  ^bb0(%arg0: tensor<8xf32>):\n    %0 = \"arith.constant\"() <{value =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"rsqrt64\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.rsqrt\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) -> f64\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>) -> (), sym_name = \"no_crash\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>):\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_pow\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi48>) -> tensor<1xi8>, sym_name = \"test_error_i48_input_unsigned_output\"}> ({\n  ^bb0(%arg0: tensor<1xi48>):\n    %0 = \"tosa.const\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"tuple_mixed_success\"}> ({\n    %0 = \"test.tuple_32_bit\"() : () -> tuple<i32, f32>\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xi8>) -> memref<*xi8>, sym_name = \"hoo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (memref<*xi8..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "test",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"test_mixed_loop_extension_scf_transform\"}> ({\n  ^bb0(%arg1: tensor<?xf32>):\n    %1 = \"test.foo\"() ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, index) -> f32, sym_name = \"read_of_undef_is_not_a_conflict\"}> ({\n  ^bb0(%arg0: f32, %arg1: index):\n    %0 = \"tensor.empty\"() : () -> tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"cosh\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.cosh\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf16>) -> tensor<13x21x3xf16>, sym_name = \"test_clamp_f16\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf16>):\n    %0 = \"tosa.clamp\"(%arg0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failedEqConstraint\"}> ({\n    %0 = \"testd.eq\"() : () -> i64\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"tan\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.tan\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "omp",
        "llvm"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (), sym_name = \"omp_canonloop_raw\"}> ({\n  ^bb0(%arg16: i32):\n    \"omp.canonical_loop\"(%arg16) ({\n    ^bb0(%arg17: i32):\n      %14 = \"ll..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!test.test_memref<[42], f32>) -> (), sym_name = \"custom_memref\"}> ({\n  ^bb0(%arg0: !test.test_memref<[42], f32>):\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, f64) -> i32, sym_name = \"while_unused_arg1\"}> ({\n  ^bb0(%arg0: i32, %arg1: f64):\n    %0 = \"scf.while\"(%arg0, %arg1) ({\n    ^bb0(%arg3: i32..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>) -> (), sym_name = \"ext_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_mul_zero_rhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"collapse_shape\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{valu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_reduce_sum_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<4xf32>, sym_name = \"fold_insert\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = dense<4.000000e+00> : tensor..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "async"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!async.token) -> (), sym_name = \"reference_counting\"}> ({\n  ^bb0(%arg0: !async.token):\n    \"async.runtime.add_ref\"(%arg0) <{count = 2 : i64}> :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_negate\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>) -> memref<*xf32>, sym_name = \"builtin_unranked\"}> ({\n  ^bb0(%arg0: tensor<*xf32>):\n    %0 = \"bufferization.to_buffer\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_two_join\"}> ({\n    \"test.foo\"() {tag = \"a\"} : () -> ()\n    \"test.foo\"() {foo = 1 : ui64, tag = \"b\"} : () -> ()\n    \"t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10x10xf32>, tensor<1xf32>, tensor<*xf32>, tensor<?xf32>, i32) -> (), sym_name = \"succeededSameOperandAndResultType\"}> ({\n  ^bb0(%arg0: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ord\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"attrDoesntFitType\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.parametric<\"foo\">\n    \"func.return\"() : () -> ()\n  }) : () -..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i64, tensor<f32>) -> (i64, tensor<f32>), sym_name = \"bufferize_while\"}> ({\n  ^bb0(%arg0: i64, %arg1: i64, %arg2: tensor<f32>):\n    %0 = \"a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<13x21x1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_bitwise_and\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "consume"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> (), sym_name = \"f\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n    %0 = \"shape.cstr_eq\"(%arg0, %arg1)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"fail_to_convert_illegal_op_in_region\"}> ({\n    \"test.region_builder\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape",
        "math",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10x20xf32>) -> tensor<10x20xf32>, sym_name = \"tanh\"}> ({\n  ^bb0(%arg1: tensor<10x20xf32>):\n    %1 = \"math.tanh\"(%arg1) <{fastmath = #ari..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xi32>, tensor<?xi32>) -> tensor<2xi32>, sym_name = \"broadcast_tensor_tensor_tensor\"}> ({\n  ^bb0(%arg0: tensor<?xi32>, %arg1: tensor<?xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"barriers\"}> ({\n    \"func.func\"() <{function_type = () -> (), sym_name = \"gpu_barrier\"}> ({\n      \"gpu.barrier\"() : () -> ()\n      \"func.return\"() :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<10xi32>, sym_name = \"fold_sub_splat_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1> : tensor<10xi32>}> : () -> tensor<10xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<1x12xf32>, sym_name = \"fold_empty_tensor_with_cast\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"tensor.empty\"(%arg0) : (index) -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<2xi32>) -> (), sym_name = \"consumer\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = () -> (i32, i32)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "linalg"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<1x8x8x8xf32>) -> (), sym_name = \"generalize_linalg_map\"}> ({\n  ^bb0(%arg0: memref<1x8x8x8xf32>):\n    %0 = \"arith.constant\"() <{value = 0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_log10\"}> ({\n    ^bb0(%arg0: f16, %arg1: f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"simple_std_for_loop\"}> ({\n  ^bb0(%arg28: index, %arg29: index, %arg30: index):\n    \"scf.for\"(%arg28, %a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<64xf32>, sym_name = \"map_binary\"}> ({\n  ^bb0(%arg0: tensor<64xf32>, %arg1: tensor<64x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_log\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.log\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_floor\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.floor\"(%arg0) : (t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"ipowi_index\"}> ({\n  ^bb0(%arg0: index, %arg1: index):\n    %0 = \"math.ipowi\"(%arg0, %arg1) : (index, index) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.mlir.global_ctors\"() <{ctors = [], data = [], priorities = []}> : () -> ()\n  \"llvm.mlir.global_dtors\"() <{data = [], dtors = [], priorities = []}> : () -> ()\n}) : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>, tensor<13x1x3xbf16>, tensor<1xi8>) -> tensor<13x21x3xbf16>, sym_name = \"test_mul\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<3x600x1200xf32>, sym_name = \"fold_reciprocal\", sym_visibility = \"nested\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<1.160000e+02..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x26x3xbf16>, tensor<13x26xi32>, tensor<13x26x3xbf16>) -> tensor<13x26x3xbf16>, sym_name = \"test_scatter\"}> ({\n  ^bb0(%arg0: tensor<13x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {bufferization.writable = true}, {}], function_type = (tensor<?xf32>, tensor<?xf32>, i1) -> (f32, tensor<?xf32>), ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x64xi8>, tensor<513xi8>) -> tensor<2x64xi8>, sym_name = \"test_i8_table_size\"}> ({\n  ^bb0(%arg0: tensor<2x64xi8>, %arg1: tensor<513xi8>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (), sym_name = \"isfinite_double\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"math.isfinite\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f64) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> index, sym_name = \"to_select_with_body\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x1x3xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_logical_or\"}> ({\n  ^bb0(%arg0: tensor<13x1x3xi1>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1xi32>, sym_name = \"reduce_prod_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"consume_in_foreach\"}> ({\n    %1 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %2 = \"arith.constant\"() <{val..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi16>, tensor<13x1x3xi16>) -> tensor<13x21x3xi16>, sym_name = \"test_mul_relaxed_result_type\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "scf",
        "llvm"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i64 (i64, i64)>, linkage = #llvm.linkage<external>, sym_name = \"subregion_block_promotion\", unnamed_addr = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> (), sym_name = \"ext_func\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (tensor<5xf32>) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>, tensor<13x1x3xi8>, tensor<1xi8>) -> tensor<13x21x3xi32>, sym_name = \"test_mul_non_const\"}> ({\n  ^bb0(%arg0: tensor<13x21x3x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i10 ()>, linkage = #llvm.linkage<external>, sym_name = \"only_byte_aligned_integers_memset_inline\", unnamed_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> i1, sym_name = \"arith_cmpf_ule\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.cmpf\"(%arg0, %arg1) <{fastmath = #arith.fastm..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"test.symbol_scope\"() ({\n      \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_sin\"}> ({\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"bitreverse\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.BitReverse\"(%arg0) : (i32) -> i32\n    \"spirv.ReturnValue\"(%0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>) -> memref<*xf32>, sym_name = \"conversion_unknown\"}> ({\n  ^bb0(%arg0: memref<*xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (me..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_produce_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi8>, tensor<13x1x3xi8>, tensor<1xi8>) -> tensor<13x21x3xi16>, sym_name = \"test_mul_out_i16\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi8..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>) -> tensor<?xf32>, sym_name = \"materialize_in_func_bbarg\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: tensor<?xf32>):..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tuple<i1, i32>, sym_name = \"unconverted_op_result\"}> ({\n    %0 = \"test.source\"() : () -> tuple<i1, i32>\n    \"func.return\"(%0) : (tuple<i1,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x1x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_mul_rank_invalid\"}> ({\n  ^bb0(%arg0: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"bar\"}> ({\n    \"another_op\"() : () -> ()\n  }) : () -> ()\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{arg_att..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?x?x7x?xf32>) -> index, sym_name = \"dim_of_collapse_shape\"}> ({\n  ^bb0(%arg0: tensor<?x?x?x7x?xf32>):\n    %0 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> f32, sym_name = \"convert_u64_to_f32_scalar\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"spirv.ConvertUToF\"(%arg0) : (i64) -> f32\n    \"spirv.Retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testVarOperandFail\"}> ({\n    \"testvar.var_operand\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_annotation\"}> ({\n    %4 = \"test.annotate_me\"() : () -> i1\n    %5 = \"test.annotate_me\"() {existing_attr = \"test\"} : ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{}, {bufferization.writable = false}, {bufferization.writable = false}], function_type = (i1, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>, sym_n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"wrap_while_loop_with_minimal_before_block\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (d0 + s0 * 42 - 1)>\n#map1 = affine_map<(d0) -> (d0 + 7)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> index, sym_name = \"mix_dims_and_symbols..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>) -> tensor<?xf32>, sym_name = \"addf_rank1\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: tensor<?xf32>):\n    %0 = \"arit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1xi1>, tensor<13x21x3xi1>, tensor<13x21x3xi1>) -> tensor<13x21x3xi1>, sym_name = \"test_select\"}> ({\n  ^bb0(%arg0: tensor<1x1x1xi1>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2x3x4xi32>, tensor<2x4x5xi32>) -> (), sym_name = \"test_static_matmul\"}> ({\n  ^bb0(%arg0: tensor<2x3x4xi32>, %arg1: tensor<2x4x5xi32>):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_sin_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"kernels\"}> ({\n    \"gpu.func\"() <{function_type = () -> ()}> ({\n      \"gpu.return\"() : () -> ()\n    }) {gpu.kernel, sym_name = \"foo\", workgroup_attr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>) -> tensor<13x21x1xi32>, sym_name = \"test_bitwise_not\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>):\n    %0 = \"tosa.bitwise_not\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"testmod\"}> ({\n    \"gpu.func\"() <{function_type = (complex<f64>) -> complex<f64>}> ({\n    ^bb0(%arg0: complex<f64>):\n      \"gpu.return\"(%arg0) : (co..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"typeFitsType\"}> ({\n    %0 = \"testd.any\"() : () -> !testd.parametric<i32>\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n})..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (index, index), sym_name = \"make_two_results\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i1) -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16, i64, i64) -> (), sym_name = \"testVarOperandFail\"}> ({\n  ^bb0(%arg0: i16, %arg1: i64, %arg2: i64):\n    \"testvar.var_operand\"(%arg0, %arg1, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x6x16x32xi8>) -> memref<?x?x16x32xi8>, sym_name = \"tensor_cast_to_buffer\"}> ({\n  ^bb0(%arg0: tensor<4x6x16x32xi8>):\n    %0 = \"tensor.ca..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> i1, sym_name = \"iequal_scalar\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"spirv.IEqual\"(%arg0, %arg1) : (i32, i32) -> i1\n    \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n    ^..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x2xi32>, tensor<6xf32>) -> (), sym_name = \"argmax\"}> ({\n  ^bb0(%arg0: tensor<3x2xi32>, %arg1: tensor<6xf32>):\n    %0 = \"tosa.argmax\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (i8)>, linkage = #llvm.linkage<external>, sym_name = \"basic_memset_inline\", unnamed_addr = 0 : i64, vis..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi32>) -> tensor<1x1x1x1x13x21x3xi16>, sym_name = \"test_cast_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xi32>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test\"}> ({\n    \"test.op_crash\"() : () -> ()\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"TestSingleConversion\"}> ({\n    %1 = \"test.cast\"() : () -> i64\n    \"test.return\"(%1) : (i64) -> ()\n  }) : () -> ()\n  \"func...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "builtin",
        "transform"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"map_forall_to_blocks_not_gpu_launch\"}> ({\n    %2 = \"tensor.empty\"() : () -> tensor<4xf32>\n    \"func.return\"() : () -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.test_copy_pay..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3x4x5xi32>, tensor<?x?xi32>, tensor<?x?x?xi32>) -> (), sym_name = \"scatter_static_values\"}> ({\n  ^bb0(%arg0: tensor<3x4x5xi32>, %arg1: t..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>, tensor<1xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_rescale_non_const_multiplier\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i64, sym_name = \"foldShl\"}> ({\n    %39 = \"arith.constant\"() <{value = 1 : i64}> : () -> i64\n    %40 = \"arith.constant\"() <{value = 32 : i6..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!llvm.struct<\"_Converted.foo\", (i64)>) -> (), sym_name = \"clashing_struct_name\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xi8>, tensor<5x4xi8>) -> (), sym_name = \"minimum_nan_ignore_int\"}> ({\n  ^bb0(%arg0: tensor<5x4xi8>, %arg1: tensor<5x4xi8>):\n    %0 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"asinh\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.asinh\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "dialect"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"non_memref_types\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"dialect.op\"(%arg0) {attr = 16 : i64} : (f32) -> f32\n    \"func.ret..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"remove_false_if\"}> ({\n    %0 = \"arith.constant\"() <{value = false}> : () -> i1\n    \"scf.if\"(%0) ({\n      \"test.op\"() : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "omp"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!llvm.ptr) -> (), sym_name = \"threadprivate\"}> ({\n  ^bb0(%arg0: !llvm.ptr):\n    %0 = \"omp.threadprivate\"(%arg0) : (!llvm.ptr) -> !llvm.ptr\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"inner_func\"}> ({\n  ^bb0(%arg6: tensor<?xf32>):\n    %2 = \"arith.constant\"() <{value = 1.000000e+00 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.module\"() <{addressing_model = #spirv.addressing_model<Logical>, memory_model = #spirv.memory_model<GLSL450>}> ({\n    \"spirv.func\"() <{function_control = #spirv.function..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"arith_constants\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %1 = \"arith.constant\"() <{value ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<536870912xi32>, tensor<i32>) -> (), sym_name = \"test_while_loop_tensor_size_invalid\"}> ({\n  ^bb0(%arg0: tensor<536870912xi32>, %arg1: te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"private_helper\", sym_visibility = \"private\"}> ({\n  ^bb..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i64, i64) -> i64, sym_name = \"uplift_while\"}> ({\n  ^bb0(%arg0: i64, %arg1: i64, %arg2: i64):\n    %0 = \"scf.while\"(%arg0) ({\n    ^bb0(%arg4..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "ub"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"merge_poison\"}> ({\n    %0 = \"ub.poison\"() <{value = #ub.poison}> : () -> i32\n    %1 = \"ub.poison\"() <{value = #ub...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x?x4xf32>) -> (), sym_name = \"reduce_float_dyn_nonzero_batch\"}> ({\n  ^bb0(%arg0: tensor<5x?x4xf32>):\n    %0 = \"tosa.reduce_product\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "spirv"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"spirv.func\"() <{function_control = #spirv.function_control<None>, function_type = (i32) -> i32, sym_name = \"non_uniform_iadd\"}> ({\n  ^bb0(%arg17: i32):\n    %21 = \"spirv.GroupN..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi32>) -> tensor<1xi8>, sym_name = \"test_error_i32_input_unsigned_output\"}> ({\n  ^bb0(%arg0: tensor<1xi32>):\n    %0 = \"tosa.const\"() <{..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"pretty_printed_region_op\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"test.pretty_printed_region\"(%arg1, %arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"verifyDerivedAttributes\"}> ({\n    %0 = \"test.derived_type_attr\"() : () -> tensor<10xf32>\n    %1 = \"test.derived_type_attr\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x5xi32>, index) -> index, sym_name = \"dim_any_dynamic\"}> ({\n  ^bb0(%arg0: memref<?x5xi32>, %arg1: index):\n    %0 = \"memref.dim\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<9xf32>) -> f32, sym_name = \"extract_from_tensor.cast\"}> ({\n  ^bb0(%arg0: tensor<9xf32>):\n    %0 = \"arith.constant\"() <{value = 0 : index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"test_invariant_cycle_not_hoisted\"}> ({\n    \"test.graph_loop\"() ({\n      %0 = \"test.a\"(%1) : (i32) -> i32\n      %1 = \"test...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"const_size\"}> ({\n    %0 = \"shape.const_size\"() <{value = 42 : index}> : () -> !shape.size\n    %1 = \"shape.size_to_index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"return_42\"}> ({\n    %1 = \"arith.constant\"() <{value = 21 : i32}> : () -> i32\n    %2 = \"arith.constant\"() <{value = 2 : i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.versionedC\"() <{attribute = dense<[42, 24]> : tensor<2xi32>}> : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_negate\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "unknown"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"callable\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg1: i32):\n    \"unknown.return\"(%arg1) : (i32) -> ()\n  }) : () -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x4x?xi32>, tensor<3x?xi32>, tensor<?x?x5xi32>) -> (), sym_name = \"scatter_minimum_static\"}> ({\n  ^bb0(%arg0: tensor<?x4x?xi32>, %arg1: ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xf32>, tensor<?x?xf32>) -> tensor<?x?xf32>, sym_name = \"tensor.concat_dynamic_nonconcat_dim\"}> ({\n  ^bb0(%arg0: tensor<?x?xf32>, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>, tensor<1x1x1x1x13x21x1xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_pow_rank_invalid\"}> ({\n  ^bb0(%arg0:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xi1>, tensor<5xi32>, tensor<5xi32>) -> tensor<5xi32>, sym_name = \"elementwise_select\"}> ({\n  ^bb0(%arg0: tensor<5xi1>, %arg1: tensor<5x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"emptyCast\"}> ({\n    %0 = \"builtin.unrealized_conversion_cast\"() : () -> index\n    \"func.return\"(%0) : (index) -> ()\n  }..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x2xi32>) -> (), sym_name = \"elements_attr_i32\"}> ({\n  ^bb0(%arg0: tensor<1x2xi32>):\n    \"test.i32ElementsAttr\"() <{attr = dense<[1, 2]>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xui32>) -> (), sym_name = \"test_const_ui32\"}> ({\n  ^bb0(%arg0: tensor<1xui32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>) -> (), sym_name = \"memref_cast_unranked_to_ranked\"}> ({\n  ^bb0(%arg0: memref<*xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref<*x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<10x8xf32>) -> (), sym_name = \"static_dealloc\"}> ({\n  ^bb0(%arg0: memref<10x8xf32>):\n    \"memref.dealloc\"(%arg0) : (memref<10x8xf32>) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xi32>) -> (), sym_name = \"rank_of_unranked\"}> ({\n  ^bb0(%arg0: memref<*xi32>):\n    %0 = \"memref.rank\"(%arg0) : (memref<*xi32>) -> index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<64xf32>, tensor<64xf32>) -> tensor<64xf32>, sym_name = \"map_unary\"}> ({\n  ^bb0(%arg0: tensor<64xf32>, %arg1: tensor<64xf32>):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>, complex<f32>) -> complex<f32>, sym_name = \"complex_div\"}> ({\n  ^bb0(%arg2: complex<f32>, %arg3: complex<f32>):\n    %1 = \"complex...."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"unusedBifurcation\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x8x8x8xi32>, tensor<1x8x8x8xi32>) -> tensor<1x8x8x8xi32>, sym_name = \"test_mul_negative_shift\"}> ({\n  ^bb0(%arg0: tensor<1x8x8x8xi32>, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> (), sym_name = \"test_invalid_arg_materialization\"}> ({\n  ^bb0(%arg0: i16):\n    \"foo.return\"(%arg0) : (i16) -> ()\n  }) : () -> ()\n}) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x8xf32>, tensor<1x8x1xf32>) -> tensor<?x1x1xf32>, sym_name = \"matmul_dyn_output\"}> ({\n  ^bb0(%arg0: tensor<1x1x8xf32>, %arg1: tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"sameTypes\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i64\n    \"func.retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}], function_type = (tensor<?xf32>) -> (f32, tensor<?xf32>, f32), sym_name = \"execute_region_with_conflict\"}> ({\n  ^b..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() ({\n      \"bar0\"() : () -> ()\n    }, {\n      \"bar1\"() : () -> ()\n    })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"f\"}> ({\n    %0 = \"arith.constant\"() <{value = false}> : () -> i1\n    %1 = \"scf.if\"(%0) ({\n      \"scf.yield\"(%0) : (i1) -> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"correct_type_pass\"}> ({\n    \"test.ranked_int_elements_attr\"() <{matrix_i64_attr = dense<6> : tensor<4x8xi64>, vector_i32_a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() ({\n      \"bar0\"() : () -> ()\n    }, {\n      \"bar1\"() : () -> ()\n    })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x14x19xf32>, tensor<1x19x28xf32>, tensor<1xf32>) -> tensor<1x14x28xf32>, sym_name = \"test_matmul_non_const_b_zp\"}> ({\n  ^bb0(%arg0: ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<()[s0] -> (s0 + 16, s0 * 8)>\n#map1 = affine_map<(d0)[s0] -> (s0 + 4, d0 + 7)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> index, sym_name = \"dont..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4x5xi8>, tensor<513xi8>) -> (), sym_name = \"test_table\"}> ({\n  ^bb0(%arg0: tensor<4x5xi8>, %arg1: tensor<513xi8>):\n    %0 = \"tosa.table\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_rsqrt\"}> ({\n    ^bb0(%arg0: f16, %arg1: f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> (i8, i8, i8, i8), sym_name = \"test_maxsi\"}> ({\n  ^bb0(%arg1: i8):\n    %7 = \"arith.constant\"() <{value = 127 : i8}> : () -> i8\n    %8 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.access = \"read\"}], function_type = (tensor<*xf32>) -> (), sym_name = \"print_buffer\", sym_visibility = \"private\"}> ({\n  }) : () -> ()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<1x1x1x?xi64>) -> memref<?x?xi64>, sym_name = \"collapse_after_memref_cast_type_change_dynamic\"}> ({\n  ^bb0(%arg0: memref<1x1x1x?xi64>):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x1x4xi32>, sym_name = \"reduce_max_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> (), sym_name = \"nested_region2\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    \"scf.for\"(%arg0, %arg1, %arg..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>, index, index) -> (), sym_name = \"dynamic_load\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>, %arg1: index, %arg2: index):\n    %0 = \"memr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x27x3xi32>, tensor<13x26xi32>, tensor<13x26x3xi32>) -> tensor<13x27x3xi32>, sym_name = \"test_scatter\"}> ({\n  ^bb0(%arg0: tensor<13x27x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> f32, sym_name = \"main\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"foo\"() ({\n      \"bar0\"() : () -> ()\n    }, {\n      \"bar1\"() : () -> ()\n    })..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"foo\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n}) : () -> ()\n\n"
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.param<i64>, !transform.param<i64>) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"clean_func_op_dont_remove_return_values\", sym_visibility = \"private\"}> ({\n    %2 = \"arith.constant\"() <{value = 0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5x4xf32>, tensor<5x4xf32>) -> (), sym_name = \"clamp_nan_propagate\"}> ({\n  ^bb0(%arg0: tensor<5x4xf32>, %arg1: tensor<5x4xf32>):\n    %0 =..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> i16, sym_name = \"bitcastOfBitcast\"}> ({\n  ^bb0(%arg0: i16):\n    %0 = \"arith.bitcast\"(%arg0) : (i16) -> f16\n    %1 = \"arith.bitcast\"(%0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> i32, sym_name = \"tensor_extract_constant\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.consta..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x1x1x10xi32>) -> tensor<1x1x1x1x1x1x10xi32>, sym_name = \"test_custom_rank_valid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x1x1x10xi32>):\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<4xf32>, memref<4xf32>) -> (), sym_name = \"test_pass\"}> ({\n  ^bb0(%arg0: memref<4xf32>, %arg1: memref<4xf32>):\n    %0 = \"arith.constant\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    %0 = \"transform.get_parent_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_cos\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.cos\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> (), sym_name = \"test_while_loop_max_nested_depth\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"string_attr_custom_mixed_type\"}> ({\n    \"test.string_attr_with_mixed_type\"() <{attr = \"string_data\" : i64}> : () -> ()\n   ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> tensor<4x?xf32>, sym_name = \"splat_dynamic_no_fold\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 1.000000e+00 : f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "nvvm",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i1 ()>, linkage = #llvm.linkage<external>, sym_name = \"test_nvvm_elect_sync\", unnamed_addr = 0 : i64, visib..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "complex"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (complex<f32>) -> complex<f32>, sym_name = \"complex_tanh\"}> ({\n  ^bb0(%arg0: complex<f32>):\n    %0 = \"complex.tanh\"(%arg0) <{fastmath = #arith.f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"test_identity_rank_valid\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.identity\"(%arg0) : (tensor<i..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_cbrt\"}> ({\n    ^bb0(%arg0: f16, %arg1: f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, i64) -> f32, sym_name = \"math_fpowi_to_powf_scalar\"}> ({\n  ^bb0(%arg0: f32, %arg1: i64):\n    %0 = \"math.fpowi\"(%arg0, %arg1) <{fastmath = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.graph_region\"() ({\n    %0 = \"op1\"(%0, %2) : (i32, i32) -> i32\n    %1 = \"test.ssacfg_region\"() ({\n      %4 = \"op2\"(%0, %1, %2, %3) : (i32, i32, i32, i32) -> i32\n    }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>, index, index, index, index) -> (), sym_name = \"speculate_memref_dim_unknown_rank_unknown_dim\"}> ({\n  ^bb0(%arg18: memref<*xf32>,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<1x21x3xf32>, sym_name = \"test_reduce_sum\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reduce_sum\"(%a..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> !shape.size, sym_name = \"const_index_to_size\"}> ({\n    %0 = \"arith.constant\"() <{value = 123 : index}> : () -> index\n    %1 = \"shape.index..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x1xf32>) -> tensor<?x1xf32>, sym_name = \"reduce_any_nofold\"}> ({\n  ^bb0(%arg0: tensor<?x1xf32>):\n    %0 = \"tosa.reduce_any\"(%arg0) <{ax..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> i32, sym_name = \"clean_region_branch_op_remove_last_2_results_last_2_arguments_and_last_operand\"}> ({\n  ^bb0(%arg1: i1):\n    %0 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi32>) -> (), sym_name = \"rank_of_ranked\"}> ({\n  ^bb0(%arg0: memref<?xi32>):\n    %0 = \"memref.rank\"(%arg0) : (memref<?xi32>) -> index\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "gpu"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index) -> (), sym_name = \"warp_scf_for_swap_no_yield\"}> ({\n  ^bb0(%arg0: index):\n    %0 = \"arith.constant\"() <{value = 128 : index}> : () -> in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 ()>, linkage = #llvm.linkage<external>, sym_name = \"double_memcpy\", unnamed_addr = 0 : i64, visibility_..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i16) -> f16, sym_name = \"bitcastChain\"}> ({\n  ^bb0(%arg0: i16):\n    %0 = \"arith.bitcast\"(%arg0) : (i16) -> bf16\n    %1 = \"arith.bitcast\"(%0) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module\"}> ({\n    \"func.func\"() <{function_type = (f16, f32, f64) -> (f16, f32, f64), sym_name = \"gpu_floor\"}> ({\n    ^bb0(%arg0: f16, %arg1: f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo"
      ],
      "complexity_class": "simple",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"failed_repl\", sym_visibility = \"private\"}> ({\n  }) {sym.new_name = \"replaced_name\"} : () -> ()\n  \"foo.possibly_unknown_sym..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i32, sym_name = \"verifyLargerBenefit\"}> ({\n    %0 = \"test.illegal_op_c\"() : () -> i32\n    \"func.return\"(%0) : (i32) -> ()\n  }) : () -> ()\n..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{arg_attrs = [{transform.readonly}], function_type = (!transform.any_op) -> (), sym_name = \"external_def\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<*xf32>, memref<3xi32>) -> memref<?x?x8xf32>, sym_name = \"memref_reshape\"}> ({\n  ^bb0(%arg0: memref<*xf32>, %arg1: memref<3xi32>):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"remap_cloned_region_args\"}> ({\n    \"test.region\"() ({\n    ^bb0(%arg4: i64, %arg5: i16, %arg6: i64, %arg7: f32):\n      \"tes..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform",
        "builtin",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  %0:2 = \"test.get_two_results\"() : () -> (i32, i32)\n  %1:3 = \"test.get_three_results\"() : () -> (i32, i32, f32)\n  \"builtin.module\"() ({\n    \"transform.named_sequence\"() <{functi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"verify_failure\"}> ({\n  ^bb0(%arg1: f64):\n    \"func.return\"(%arg1) : (f64) -> ()\n  }) : () -> ()\n  \"builtin.module\"() (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32xf32>) -> (), sym_name = \"load_non_temporal\"}> ({\n  ^bb0(%arg0: memref<32xf32>):\n    %0 = \"arith.constant\"() <{value = 7 : index}> : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testd"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"succeededDynParamsConstraint\"}> ({\n    %0 = \"testd.dynparams\"() : () -> !testd.parametric<i32>\n    %1 = \"testd.dynparams\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_intdiv\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<3xi8>) -> tensor<3xi8>, sym_name = \"rescale_per_channel\"}> ({\n  ^bb0(%arg0: tensor<3xi8>):\n    %0 = \"tosa.const\"() <{values = dense<[42,..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"builtin.module\"() <{sym_name = \"nested_module\", sym_visibility = \"public\"}> ({\n    \"func.func\"() <{function_type = (i32) -> (i32, i32), sym_name = \"nested\", sym_visibility = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xui8>, tensor<1xui8>) -> (tensor<1xui8>, tensor<1xui8>), sym_name = \"test_unsigned_function_signature\"}> ({\n  ^bb0(%arg0: tensor<1xui8>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<32x128xi4, 1>) -> memref<32x128xi4>, sym_name = \"memref_memory_space_cast_i4\"}> ({\n  ^bb0(%arg0: memref<32x128xi4, 1>):\n    %0 = \"memref..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xi32>, tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_add_i32\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xi32>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_cos\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.cos\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"invalid_target_op_type\"}> ({\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n  \"transform.named_sequence\"() <{function_type..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op, !transform.param<i64>, !transform.param<i64>, !transform.param<i64>) -> (), sym_name = \"__transform_main\"}> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i32, sym_name = \"liveSingleCast\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    \"func..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_reciprocal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.reciprocal\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"main\"}> ({\n    %0 = \"arith.constant\"() <{value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00]> : tensor<3xf32>}> : () ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (tensor<10xi1>, tensor<10xi1>), sym_name = \"fold_greater_splat_i32\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-10> : tensor<10xi32>}> ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i1, sym_name = \"while_cond_true\"}> ({\n    %0 = \"scf.while\"() ({\n      %1 = \"test.condition\"() : () -> i1\n      \"scf.condition\"(%1, %1) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "math",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> f32, sym_name = \"if_yield\"}> ({\n  ^bb0(%arg7: i1):\n    %11 = \"scf.if\"(%arg7) ({\n      %14 = \"arith.constant\"() <{value = 0.000000e+00 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<6xi8>, tensor<512xi8>) -> (), sym_name = \"table8\"}> ({\n  ^bb0(%arg0: tensor<6xi8>, %arg1: tensor<512xi8>):\n    %0 = \"tosa.table\"(%arg0, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x1x3xi1>, tensor<1x1x1x1x13x21x3xi1>) -> tensor<1x1x1x1x13x21x3xi1>, sym_name = \"test_logical_or_rank_invalid\"}> ({\n  ^bb0(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "arith",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i1 ()>, linkage = #llvm.linkage<external>, sym_name = \"fold_icmp_alloca\", unnamed_addr = 0 : i64, visibilit..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32, i32) -> (), sym_name = \"fastmath\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32, %arg2: i32):\n    %0 = \"arith.addf\"(%arg0, %arg1) <{fastmath = #..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xi32>) -> tensor<13x21x3xi32>, sym_name = \"test_clz\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xi32>):\n    %0 = \"tosa.clz\"(%arg0) : (tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i32>, sym_name = \"fold_mul_no_shift\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-23661> : tensor<i32>}> : () -> tensor<i32>\n    ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64, i32, i8) -> i32, sym_name = \"apply_scale_unsupported_inexact_round\"}> ({\n  ^bb0(%arg0: i64, %arg1: i32, %arg2: i8):\n    %0 = \"tosa.apply_s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x1xbf16>, tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_add\"}> ({\n  ^bb0(%arg0: tensor<13x21x1xbf16>, %arg1: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, index, tensor<?x?x?xf32>) -> (), sym_name = \"insert\"}> ({\n  ^bb0(%arg0: f32, %arg1: index, %arg2: tensor<?x?x?xf32>):\n    %0 = \"tensor.ins..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>, tensor<?xf32>) -> tensor<?xf32>, sym_name = \"test_add_1d_all_dynamic\"}> ({\n  ^bb0(%arg0: tensor<?xf32>, %arg1: tensor<?xf32>):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "scf",
        "test",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi32>, i1) -> (), sym_name = \"auto_dealloc_inside_nested_region\"}> ({\n  ^bb0(%arg0: memref<?xi32>, %arg1: i1):\n    %0 = \"arith.constant..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<*xf32>, sym_name = \"test_mul_scalar\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):\n    %0 = \"tosa.co..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<536870912x21x3xf32>, tensor<536870912x26xi32>) -> tensor<536870912x26x3xf32>, sym_name = \"test_gather_tensor_size_invalid\"}> ({\n  ^bb0(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "irdl"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"irdl.dialect\"() <{sym_name = \"test_irdl_to_cpp\"}> ({\n    \"irdl.type\"() <{sym_name = \"ty\"}> ({\n      %0 = \"irdl.any\"() : () -> !irdl.attribute\n      \"irdl.parameters\"(%0) <{nam..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<14x19xi8>) -> tensor<14xi32>, sym_name = \"test_argmax\"}> ({\n  ^bb0(%arg0: tensor<14x19xi8>):\n    %0 = \"tosa.argmax\"(%arg0) <{axis = 1 : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<2x3x1x5xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<\"0x01000000020000000300000004000000050..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"unsupported_constant_i64_0\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i64}> : () -> i64\n    \"func.return\"() : () -> (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<i16>, sym_name = \"cast_float_to_int_round\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<-3.500000e+00> : tensor<f32>}> : () -> ten..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32, i32), sym_name = \"cse_recursive_effects_success\"}> ({\n    %0 = \"test.op_with_memread\"() : () -> i32\n    %1 = \"arith.constant\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> f32, sym_name = \"bitcastConstantItoFP\"}> ({\n    %0 = \"arith.constant\"() <{value = 0 : i32}> : () -> i32\n    %1 = \"arith.bitcast\"(%0) : (i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "foo",
        "scf"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> i64, sym_name = \"while_loop2\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"scf.while\"(%arg0) ({\n    ^bb0(%arg2: f32):\n      %2 = \"foo.shared_comp..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> tensor<1xi32>, sym_name = \"test_error_i32_output_unsigned_input\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.const\"() <{v..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1), sym_name = \"cmpf_nan\"}> ({\n    %0 = \"arith.constant\"() <{value = 4.20000..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math",
        "gpu"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"gpu.module\"() <{sym_name = \"test_module_1\"}> ({\n    \"gpu.func\"() <{function_type = () -> ()}> ({\n      \"gpu.printf\"() <{format = \"Hello, world with location\\0A\"}> : () -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1, index, memref<?xf32>, i8) -> (), sym_name = \"outline_if_else\"}> ({\n  ^bb0(%arg0: i1, %arg1: index, %arg2: memref<?xf32>, %arg3: i8):\n    %0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x21x3xf32>) -> tensor<26x21x3xf32>, sym_name = \"test_concat\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tenso..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x13x13x5xf32>) -> tensor<1x13x13xi64>, sym_name = \"test_unsupported_int64_data_type\"}> ({\n  ^bb0(%arg0: tensor<1x13x13x5xf32>):\n    %0 ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64, f64) -> f64, sym_name = \"sparse_reduce_2d_to_1d\"}> ({\n  ^bb0(%arg0: f64, %arg1: f64):\n    %0 = \"arith.constant\"() <{value = 0.000000e+00 :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, index) -> f32, sym_name = \"for_iter_args\"}> ({\n  ^bb0(%arg0: index, %arg1: index, %arg2: index):\n    %0 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"unsupported_result_integer\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"arith.extsi\"(%arg0) : (i64) -> i128\n    %1 = \"arith.mul..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, index, index, index) -> (i32, i32), sym_name = \"fold_away_iter_with_no_use_and_yielded_input\"}> ({\n  ^bb0(%arg0: i32, %arg1: index, %arg2:..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x21x3xi1>) -> tensor<1x21x3xi1>, sym_name = \"test_logical_not\"}> ({\n  ^bb0(%arg0: tensor<1x21x3xi1>):\n    %0 = \"tosa.logical_not\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0)[s0] -> (d0 + s0 * 42 - 1)>\n#map1 = affine_map<(d0) -> (d0 + 7)>\n#map2 = affine_map<(d0) -> (d0 * 4)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> in..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"not\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"spirv.Not\"(%arg0) : (i32) -> i32\n    \"spirv.ReturnValue\"(%0) : (i32) -> ()\n  }..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %28 = \"smt.constant\"() <{value = true}> : () -> !smt.bool\n    %29 = \"smt.exists\"() <{weight = 2 : i32}> ({\n    ^bb0(%arg18: !smt.int, %arg19: !smt.int):\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"non_negative_int_attr_pass\"}> ({\n    \"test.non_negative_int_attr\"() <{i32attr = 5 : i32, i64attr = 10 : i64}> : () -> ()\n ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<2xui8>) -> (), sym_name = \"rescale_i8_unsigned_input_output_explicit\"}> ({\n  ^bb0(%arg0: tensor<2xui8>):\n    %0 = \"tosa.const\"() <{value..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>, tensor<13x1x3xf32>) -> tensor<13x21x3xi1>, sym_name = \"test_equal\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>, %arg1: tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> i8, sym_name = \"trivial_rem\"}> ({\n    %0 = \"arith.constant\"() <{value = 64 : i8}> : () -> i8\n    %1 = \"test.with_bounds\"() <{smax = 63 : s..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"variable_init_normal_constant\"}> ({\n    %0 = \"spirv.Constant\"() <{value = 4.000000e+00 : f32}> : () -> f32\n    %1 = \"spirv..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "scf",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"side_effect\", sym_visibility = \"private\"}> ({\n  }) : () -> ()\n  \"func.func\"() <{function_type = (i1) -> index, sym_name = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "linalg",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<64xf32>, memref<64xf32>, memref<64xf32>) -> (), sym_name = \"map\"}> ({\n  ^bb0(%arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x3x5xi32>, index) -> index, sym_name = \"dim_some_omitting_dynamic\"}> ({\n  ^bb0(%arg0: memref<?x3x5xi32>, %arg1: index):\n    %0 = \"arith..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "testvar"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"testSingleResultFail\"}> ({\n    %0:2 = \"testvar.single_result\"() : () -> (i32, i32)\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?xf32>) -> tensor<?xf32>, sym_name = \"use_of_unknown_op_2\"}> ({\n  ^bb0(%arg0: tensor<?xf32>):\n    %0 = \"test.dummy_op\"(%arg0) : (tensor<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x1xi32>) -> tensor<1x1x1x1x13x21x1xi32>, sym_name = \"test_bitwise_not_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref",
        "bufferization"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> memref<32xf32>, sym_name = \"clone_and_preceding_dealloc\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    \"memref.dealloc\"(%arg0) : (me..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i16 ()>, linkage = #llvm.linkage<external>, sym_name = \"load_smaller_int\", unnamed_addr = 0 : i64, visibili..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, memref<4xf32>, index) -> (), sym_name = \"atomicrmw_cast_fold\"}> ({\n  ^bb0(%arg0: f32, %arg1: memref<4xf32>, %arg2: index):\n    %0 = \"memre..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i8) -> i8, sym_name = \"up_to_date_replacement\"}> ({\n  ^bb0(%arg0: i8):\n    %0 = \"test.rewrite\"(%arg0) : (i8) -> i8\n    %1 = \"test.rewrite\"(%0) ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"trunc\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.trunc\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32\n    \"f..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi16>) -> (), sym_name = \"test_simple_i16\"}> ({\n  ^bb0(%arg0: tensor<1xi16>):\n    %0 = \"tosa.const\"() <{values = dense<0> : tensor<1xi8..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<i32, StorageBuffer>, i32) -> i32, sym_name = \"atomic_and\"}> ({\n  ^bb0(%arg0: !spirv.ptr<i32, StorageBuffer>, %arg1: i32):\n    %0 = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.sampled_image<!spirv.image<f32, Dim2D, NoDepth, NonArrayed, SingleSampled, NeedSampler, Unknown>>) -> (), sym_name = \"image\"}> ({\n  ^bb0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> tensor<1x3xi32>, sym_name = \"reduce_sum_constant\"}> ({\n    %0 = \"tosa.const\"() <{values = dense<[[1, 2, 3], [4, 5, 6]]> : tensor<2x3xi32>}..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{arg_attrs = [{bufferization.writable = true}, {}, {}, {}], function_type = (tensor<?xf32>, i1, index, f32) -> (tensor<?xf32>, index), sym_name = \"simple_scf_if\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<i32>) -> tensor<i32>, sym_name = \"fold_add_zero_lhs_i32\"}> ({\n  ^bb0(%arg0: tensor<i32>):\n    %0 = \"tosa.const\"() <{values = dense<0> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"unusedChain\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1 = \"bu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<10xi32>) -> tensor<10xi32>, sym_name = \"test_custom\"}> ({\n  ^bb0(%arg0: tensor<10xi32>):\n    %0 = \"tosa.custom\"(%arg0) <{domain_name = \"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg1: !transform.any_op):\n    %1 = \"transform.collect_match..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32, f32) -> f32, sym_name = \"maxnumf\"}> ({\n  ^bb0(%arg0: f32, %arg1: f32):\n    %0 = \"arith.maxnumf\"(%arg0, %arg1) <{fastmath = #arith.fastmath..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "transform",
        "scf",
        "arith",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"loop_peel_op\"}> ({\n    %3 = \"arith.constant\"() <{value = 0 : index}> : () -> index\n    %4 = \"arith.constant\"() <{value = 4..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> i32, sym_name = \"clean_func_op_remove_argument_and_return_value\", sym_visibility = \"private\"}> ({\n  ^bb0(%arg1: i32):\n    \"func.return\"..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xbf16>) -> tensor<13x21x3xbf16>, sym_name = \"test_tanh\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xbf16>):\n    %0 = \"tosa.tanh\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> (), sym_name = \"experimental_constrained_fptrunc\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"arith.truncf\"(%arg0) <{roundingmode = 0 : i32}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.comdat\"() <{sym_name = \"__llvm_comdat\"}> ({\n    \"llvm.comdat_selector\"() <{comdat = 0 : i64, sym_name = \"foo\"}> : () -> ()\n  }) : () -> ()\n  \"llvm.comdat\"() <{sym_name = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"clamp_ulessthanequal\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    %0 = \"spirv.ULessThanEqual\"(%arg0..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "smt"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"smt.solver\"() ({\n    %0 = \"smt.int.constant\"() <{value = 5 : ui4}> : () -> !smt.int\n    %1 = \"smt.int.constant\"() <{value = 10 : ui8}> : () -> !smt.int\n    %2 = \"smt.int.add\"(..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "math"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"roundeven\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"math.roundeven\"(%arg0) <{fastmath = #arith.fastmath<none>}> : (f32) -> f3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape, !shape.shape) -> (), sym_name = \"broadcast\"}> ({\n  ^bb0(%arg0: !shape.shape, %arg1: !shape.shape):\n    %0 = \"shape.broadcast\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"tuple_success\"}> ({\n    %0 = \"test.tuple_32_bit\"() : () -> tuple<i32>\n    \"func.return\"() : () -> ()\n  }) : () -> ()\n}) : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!spirv.ptr<f32, CrossWorkgroup>) -> (), sym_name = \"ptrcasttogeneric1\"}> ({\n  ^bb0(%arg0: !spirv.ptr<f32, CrossWorkgroup>):\n    %0 = \"spirv.Ptr..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f32) -> (), sym_name = \"atanh\"}> ({\n  ^bb0(%arg0: f32):\n    %0 = \"spirv.CL.atanh\"(%arg0) : (f32) -> f32\n    \"func.return\"() : () -> ()\n  }) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"std_call\"}> ({\n    %5 = \"func.call\"() <{callee = @one_result}> : () -> i32\n    %6 = \"func.call\"() <{callee = @one_result}>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, tensor<f32>) -> tensor<f32>, sym_name = \"test_add_0d\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: tensor<f32>):\n    %0 = \"tosa.add\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (i32, i32), sym_name = \"simple_constant\"}> ({\n    %0 = \"arith.constant\"() <{value = 1 : i32}> : () -> i32\n    %1 = \"arith.constant\"() <{va..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "affine"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "#map = affine_map<(d0) -> (d0)>\n#map1 = affine_map<()[s0] -> (s0)>\n#map2 = affine_map<()[s0, s1, s2, s3] -> (s0 + s1 + s2 + s3)>\n\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i1) -> (), sym_name = \"invalid_unranked_memref_descriptor\"}> ({\n  ^bb0(%arg0: i1):\n    %0 = \"test.direct_replacement\"(%arg0) : (i1) -> memref<*..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xi16>) -> memref<?xbf16>, sym_name = \"memref_bitcast\"}> ({\n  ^bb0(%arg0: memref<?xi16>):\n    %0 = \"arith.bitcast\"(%arg0) : (memref<?xi1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arm_sme"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> index, sym_name = \"arm_sme_streaming_vl_double_words\"}> ({\n    %0 = \"arm_sme.streaming_vl\"() <{type_size = #arm_sme.type_size<double>}> : ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?x?xf32>) -> (), sym_name = \"memref_cast_dynamic_to_mixed\"}> ({\n  ^bb0(%arg0: memref<?x?xf32>):\n    %0 = \"memref.cast\"(%arg0) : (memref<..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<5xi8>) -> memref<5xi8>, sym_name = \"collapse_shape_identity_fold\"}> ({\n  ^bb0(%arg0: memref<5xi8>):\n    %0 = \"memref.collapse_shape\"(%ar..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "shape"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (!shape.shape) -> !shape.shape, sym_name = \"max_same_arg\"}> ({\n  ^bb0(%arg0: !shape.shape):\n    %0 = \"shape.max\"(%arg0, %arg0) : (!shape.shape, ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "scf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"slicing_test_3\"}> ({\n    %0 = \"arith.constant\"() <{value = 1.000000e+00 : f32}> : () -> f32\n    %1 = \"slicing-test-op\"(%0)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "sparse_tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (f64) -> f64, sym_name = \"sparse_unary\"}> ({\n  ^bb0(%arg0: f64):\n    %0 = \"sparse_tensor.unary\"(%arg0) ({\n    ^bb0(%arg1: f64):\n      \"sparse_te..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<5xf32>) -> tensor<5xi32>, sym_name = \"arith_cast_tensor\"}> ({\n  ^bb0(%arg0: tensor<5xf32>):\n    %0 = \"arith.fptosi\"(%arg0) : (tensor<5xf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xi8>) -> (), sym_name = \"test_i8\"}> ({\n  ^bb0(%arg0: tensor<1xi8>):\n    %0 = \"tosa.clamp\"(%arg0) <{max_val = 126 : i8, min_val = -127 :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "emitc"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32) -> (), sym_name = \"logical\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32):\n    %0 = \"emitc.logical_and\"(%arg0, %arg1) : (i32, i32) -> i1\n    %1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "foo",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"nested_isolated_region\"}> ({\n    \"builtin.module\"() ({\n      \"func.func\"() <{function_type = () -> (), sym_name = \"isolate..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.one_region_op\"() ({\n    \"test.symbol_scope\"() ({\n      \"func.func\"() <{function_type = () -> (), sym_name = \"nfunction\", sym_visibility = \"nested\"}> ({\n        \"func.retu..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "linalg",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<64xf32>, sym_name = \"map_binary\"}> ({\n  ^bb0(%arg0: tensor<64xf32>, %arg1: tensor<64x..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "spirv"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32, i32, i32) -> i32, sym_name = \"clamp_ulessthan\"}> ({\n  ^bb0(%arg0: i32, %arg1: i32, %arg2: i32):\n    %0 = \"spirv.ULessThan\"(%arg1, %arg0) :..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1xf32>) -> (), sym_name = \"test_simple_f32\"}> ({\n  ^bb0(%arg0: tensor<1xf32>):\n    %0 = \"tosa.tanh\"(%arg0) : (tensor<1xf32>) -> tensor<1..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xf32>) -> tensor<1x1x1x1x13x21x3xf32>, sym_name = \"test_abs_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"test.operand_type_mismatch\"() ({\n  ^bb0(%arg2: i32, %arg3: f32):\n    \"test.some_branching_op\"(%arg3, %arg2) : (f32, i32) -> ()\n  }) : () -> ()\n  \"test.operand_type_mismatch\"()..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "rocdl",
        "llvm"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"llvm.func\"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<f32 (f32)>, linkage = #llvm.linkage<external>, sym_name = \"rocdl.readlane\", unnamed_addr = 0 : i64, visibil..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "cf"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = () -> (), sym_name = \"assert_true\"}> ({\n    %0 = \"arith.constant\"() <{value = true}> : () -> i1\n    \"cf.assert\"(%0) <{msg = \"Computer says no\"}>..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<13x21x3xf32>) -> tensor<13x21x3xf32>, sym_name = \"test_clamp_propagate\"}> ({\n  ^bb0(%arg0: tensor<13x21x3xf32>):\n    %0 = \"tosa.clamp\"(%..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tosa"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<1x1x1x1x13x21x3xi1>) -> tensor<1x1x1x1x1x21x3xi1>, sym_name = \"test_reduce_all_rank_invalid\"}> ({\n  ^bb0(%arg0: tensor<1x1x1x1x13x21x3xi..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<8xi32>) -> i32, sym_name = \"simple_hoist\"}> ({\n  ^bb0(%arg0: memref<8xi32>):\n    %0 = \"arith.constant\"() <{value = 42 : i32}> : () -> i3..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "builtin"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i64) -> i64, sym_name = \"symmetricChain\"}> ({\n  ^bb0(%arg0: i64):\n    %0 = \"builtin.unrealized_conversion_cast\"(%arg0) : (i64) -> i32\n    %1 = ..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "test"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<f32>, f32) -> (), sym_name = \"correct_variadic_operand\"}> ({\n  ^bb0(%arg0: tensor<f32>, %arg1: f32):\n    \"test.mixed_normal_variadic_ope..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<?x?xi32>) -> tensor<?x8xi32>, sym_name = \"tensor.cast_chain_keep\"}> ({\n  ^bb0(%arg0: tensor<?x?xi32>):\n    %0 = \"tensor.cast\"(%arg0) : (..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "transform",
        "builtin"
      ],
      "complexity_class": "complex",
      "control_flow_type": "complex",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (index, index) -> (), sym_name = \"get_consumer_fail_2\"}> ({\n  ^bb0(%arg1: index, %arg2: index):\n    %2 = \"arith.muli\"(%arg1, %arg2) <{overflowFl..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "transform"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"transform.named_sequence\"() <{function_type = (!transform.any_op) -> (), sym_name = \"__transform_main\"}> ({\n  ^bb0(%arg0: !transform.any_op):\n    \"transform.test_add_test_exte..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "tensor"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<*xf32>, tensor<4x4xf32>, tensor<?x?xf32>) -> (), sym_name = \"cast\"}> ({\n  ^bb0(%arg0: tensor<*xf32>, %arg1: tensor<4x4xf32>, %arg2: tens..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "bufferization",
        "memref"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (memref<?xf32>) -> (), sym_name = \"clone_and_realloc\"}> ({\n  ^bb0(%arg0: memref<?xf32>):\n    %0 = \"bufferization.clone\"(%arg0) : (memref<?xf32>)..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith",
        "xla"
      ],
      "complexity_class": "complex",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>, sym_name = \"main\"}> ({\n  ^bb0(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>):\n    %0 = \"arith.addf..."
    },
    {
      "has_module": false,
      "num_functions": 0,
      "dialects_used": [
        "func",
        "arith"
      ],
      "complexity_class": "medium",
      "control_flow_type": "simple",
      "code_snippet": "\"builtin.module\"() ({\n  \"func.func\"() <{function_type = (i32) -> (i32, i32, i32), sym_name = \"simple_arith.remsi\"}> ({\n  ^bb0(%arg0: i32):\n    %0 = \"arith.constant\"() <{value = 5 : i32}> : () -> i32\n ..."
    }
  ],
  "total_files": 2535,
  "parsed_successfully": 2535,
  "parse_errors": [],
  "statistics": {
    "top_dialects": [
      [
        "func",
        5448
      ],
      [
        "arith",
        1961
      ],
      [
        "tosa",
        1419
      ],
      [
        "transform",
        956
      ],
      [
        "test",
        879
      ],
      [
        "scf",
        871
      ],
      [
        "spirv",
        555
      ],
      [
        "llvm",
        377
      ],
      [
        "tensor",
        316
      ],
      [
        "smt",
        228
      ]
    ],
    "top_operations": [
      [
        "func.func",
        2746
      ],
      [
        "func.return",
        2539
      ],
      [
        "arith.constant",
        1041
      ],
      [
        "scf.yield",
        469
      ],
      [
        "tosa.const",
        425
      ],
      [
        "transform.yield",
        209
      ],
      [
        "transform.named_sequence",
        207
      ],
      [
        "scf.for",
        186
      ],
      [
        "func.call",
        163
      ],
      [
        "arith.addi",
        136
      ],
      [
        "scf.if",
        132
      ],
      [
        "transform.structured.match",
        132
      ],
      [
        "builtin.module",
        131
      ],
      [
        "spirv.ReturnValue",
        104
      ],
      [
        "arith.cmpf",
        95
      ],
      [
        "arith.addf",
        89
      ],
      [
        "spirv.func",
        87
      ],
      [
        "arith.cmpi",
        74
      ],
      [
        "llvm.mlir.constant",
        74
      ],
      [
        "llvm.return",
        74
      ]
    ],
    "top_types": [
      [
        "f32",
        1294
      ],
      [
        "index",
        890
      ],
      [
        "i32",
        878
      ],
      [
        "none",
        707
      ],
      [
        "transformany_op",
        393
      ],
      [
        "1xi32",
        283
      ],
      [
        "i1",
        232
      ],
      [
        "f64",
        214
      ],
      [
        "i64",
        188
      ],
      [
        "i32i32",
        167
      ],
      [
        "?xf32",
        159
      ],
      [
        "f32f32",
        122
      ],
      [
        "13x21x3xf32",
        104
      ],
      [
        "i8",
        69
      ],
      [
        "?x?xf32",
        53
      ]
    ],
    "avg_ops_per_file": 5.8177514792899405,
    "avg_region_depth": 2.232741617357002,
    "complexity_distribution": {
      "medium": 2116,
      "complex": 373,
      "simple": 46
    }
  }
}